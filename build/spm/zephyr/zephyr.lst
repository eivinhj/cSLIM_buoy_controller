
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	return pm_state;
}


enum power_states pm_system_suspend(int32_t ticks)
{
   0:	20001888 	.word	0x20001888
	pm_state = (forced_pm_state == POWER_STATE_AUTO) ?
   4:	000023dd 	.word	0x000023dd
		   pm_policy_next_state(ticks) : forced_pm_state;
   8:	00005d03 	.word	0x00005d03
   c:	0000243d 	.word	0x0000243d
  10:	0000243d 	.word	0x0000243d
	if (pm_state == POWER_STATE_ACTIVE) {
  14:	0000243d 	.word	0x0000243d
  18:	0000243d 	.word	0x0000243d
	post_ops_done = 0;
  1c:	0000243d 	.word	0x0000243d
	...
	pm_power_state_set(pm_state);
  2c:	00002195 	.word	0x00002195
	if (!post_ops_done) {
  30:	0000243d 	.word	0x0000243d
		post_ops_done = 1;
  34:	00000000 	.word	0x00000000
		forced_pm_state = POWER_STATE_AUTO;
  38:	0000213d 	.word	0x0000213d
		pm_state_notify(false);
  3c:	00005bd5 	.word	0x00005bd5

00000040 <_irq_vector_table>:
		pm_power_state_exit_post_ops(pm_state);
  40:	0000239d 0000239d 0000239d 0000239d     .#...#...#...#..
	return pm_policy_mgr(ticks);
}
  50:	0000239d 0000239d 0000239d 0000239d     .#...#...#...#..
  60:	0000239d 0000239d 0000239d 0000239d     .#...#...#...#..
  70:	0000239d 0000239d 0000239d 0000239d     .#...#...#...#..
  80:	0000239d 0000239d 0000239d 0000239d     .#...#...#...#..
  90:	0000239d 0000239d 0000239d 0000239d     .#...#...#...#..
  a0:	0000239d 0000239d 0000239d 0000239d     .#...#...#...#..
  b0:	0000239d 0000239d 0000239d 0000239d     .#...#...#...#..
  c0:	0000239d 0000239d 0000239d 0000239d     .#...#...#...#..
  d0:	0000239d 0000239d 0000239d 0000239d     .#...#...#...#..
  e0:	0000239d 0000239d 0000239d 0000239d     .#...#...#...#..
  f0:	0000239d 0000239d 0000239d 0000239d     .#...#...#...#..
 100:	0000239d 0000239d 0000239d 0000239d     .#...#...#...#..
 110:	0000239d 0000239d 0000239d 0000239d     .#...#...#...#..
 120:	0000239d 0000239d 0000239d 0000239d     .#...#...#...#..
 130:	0000239d 0000239d 0000239d 0000239d     .#...#...#...#..
 140:	0000239d                                .#..

00000144 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
 210:	00008000 00000001 00000000 00000000     ................
 220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000023c <__aeabi_uldivmod>:
     23c:	b953      	cbnz	r3, 254 <__aeabi_uldivmod+0x18>
     23e:	b94a      	cbnz	r2, 254 <__aeabi_uldivmod+0x18>
     240:	2900      	cmp	r1, #0
     242:	bf08      	it	eq
     244:	2800      	cmpeq	r0, #0
     246:	bf1c      	itt	ne
     248:	f04f 31ff 	movne.w	r1, #4294967295
     24c:	f04f 30ff 	movne.w	r0, #4294967295
     250:	f000 b96c 	b.w	52c <__aeabi_idiv0>
     254:	f1ad 0c08 	sub.w	ip, sp, #8
     258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     25c:	f000 f806 	bl	26c <__udivmoddi4>
     260:	f8dd e004 	ldr.w	lr, [sp, #4]
     264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     268:	b004      	add	sp, #16
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	9d08      	ldr	r5, [sp, #32]
     272:	4604      	mov	r4, r0
     274:	4688      	mov	r8, r1
     276:	2b00      	cmp	r3, #0
     278:	d17d      	bne.n	376 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf6>
     27a:	428a      	cmp	r2, r1
     27c:	4617      	mov	r7, r2
     27e:	d93f      	bls.n	300 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x80>
     280:	fab2 f282 	clz	r2, r2
     284:	b142      	cbz	r2, 298 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x18>
     286:	f1c2 0020 	rsb	r0, r2, #32
     28a:	4091      	lsls	r1, r2
     28c:	4097      	lsls	r7, r2
     28e:	fa24 f000 	lsr.w	r0, r4, r0
     292:	4094      	lsls	r4, r2
     294:	ea40 0801 	orr.w	r8, r0, r1
     298:	ea4f 4c17 	mov.w	ip, r7, lsr #16
     29c:	0c23      	lsrs	r3, r4, #16
     29e:	fa1f fe87 	uxth.w	lr, r7
     2a2:	fbb8 f6fc 	udiv	r6, r8, ip
     2a6:	fb0c 8116 	mls	r1, ip, r6, r8
     2aa:	fb06 f00e 	mul.w	r0, r6, lr
     2ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2b2:	4298      	cmp	r0, r3
     2b4:	d905      	bls.n	2c2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x42>
     2b6:	18fb      	adds	r3, r7, r3
     2b8:	d202      	bcs.n	2c0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x40>
     2ba:	4298      	cmp	r0, r3
     2bc:	f200 8124 	bhi.w	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
     2c0:	3e01      	subs	r6, #1
     2c2:	1a19      	subs	r1, r3, r0
     2c4:	b2a3      	uxth	r3, r4
     2c6:	fbb1 f0fc 	udiv	r0, r1, ip
     2ca:	fb0c 1110 	mls	r1, ip, r0, r1
     2ce:	fb00 fe0e 	mul.w	lr, r0, lr
     2d2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     2d6:	45a6      	cmp	lr, r4
     2d8:	d905      	bls.n	2e6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x66>
     2da:	193c      	adds	r4, r7, r4
     2dc:	d202      	bcs.n	2e4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x64>
     2de:	45a6      	cmp	lr, r4
     2e0:	f200 810f 	bhi.w	502 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a>
     2e4:	3801      	subs	r0, #1
     2e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     2ea:	eba4 040e 	sub.w	r4, r4, lr
     2ee:	2600      	movs	r6, #0
     2f0:	b11d      	cbz	r5, 2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     2f2:	40d4      	lsrs	r4, r2
     2f4:	2300      	movs	r3, #0
     2f6:	e9c5 4300 	strd	r4, r3, [r5]
     2fa:	4631      	mov	r1, r6
     2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     300:	b902      	cbnz	r2, 304 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x84>
     302:	deff      	udf	#255	; 0xff
     304:	fab2 f282 	clz	r2, r2
     308:	2a00      	cmp	r2, #0
     30a:	d150      	bne.n	3ae <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12e>
     30c:	1bcb      	subs	r3, r1, r7
     30e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     312:	fa1f f887 	uxth.w	r8, r7
     316:	2601      	movs	r6, #1
     318:	0c21      	lsrs	r1, r4, #16
     31a:	fbb3 fcfe 	udiv	ip, r3, lr
     31e:	fb0e 301c 	mls	r0, lr, ip, r3
     322:	460b      	mov	r3, r1
     324:	fb08 f90c 	mul.w	r9, r8, ip
     328:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     32c:	4589      	cmp	r9, r1
     32e:	d90a      	bls.n	346 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc6>
     330:	1879      	adds	r1, r7, r1
     332:	bf2c      	ite	cs
     334:	2301      	movcs	r3, #1
     336:	2300      	movcc	r3, #0
     338:	4589      	cmp	r9, r1
     33a:	d902      	bls.n	342 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc2>
     33c:	2b00      	cmp	r3, #0
     33e:	f000 80d9 	beq.w	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
     342:	f10c 3cff 	add.w	ip, ip, #4294967295
     346:	eba1 0109 	sub.w	r1, r1, r9
     34a:	b2a3      	uxth	r3, r4
     34c:	fbb1 f0fe 	udiv	r0, r1, lr
     350:	fb0e 1110 	mls	r1, lr, r0, r1
     354:	fb08 f800 	mul.w	r8, r8, r0
     358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     35c:	45a0      	cmp	r8, r4
     35e:	d905      	bls.n	36c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xec>
     360:	193c      	adds	r4, r7, r4
     362:	d202      	bcs.n	36a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xea>
     364:	45a0      	cmp	r8, r4
     366:	f200 80c9 	bhi.w	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
     36a:	3801      	subs	r0, #1
     36c:	eba4 0408 	sub.w	r4, r4, r8
     370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     374:	e7bc      	b.n	2f0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x70>
     376:	428b      	cmp	r3, r1
     378:	d909      	bls.n	38e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x10e>
     37a:	2d00      	cmp	r5, #0
     37c:	f000 80b1 	beq.w	4e2 <CONFIG_FLASH_SIZE+0xe2>
     380:	2600      	movs	r6, #0
     382:	e9c5 0100 	strd	r0, r1, [r5]
     386:	4630      	mov	r0, r6
     388:	4631      	mov	r1, r6
     38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38e:	fab3 f683 	clz	r6, r3
     392:	2e00      	cmp	r6, #0
     394:	d146      	bne.n	424 <CONFIG_FLASH_SIZE+0x24>
     396:	428b      	cmp	r3, r1
     398:	f0c0 80a6 	bcc.w	4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
     39c:	4282      	cmp	r2, r0
     39e:	f240 80a3 	bls.w	4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
     3a2:	4630      	mov	r0, r6
     3a4:	2d00      	cmp	r5, #0
     3a6:	d0a8      	beq.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     3a8:	e9c5 4800 	strd	r4, r8, [r5]
     3ac:	e7a5      	b.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     3ae:	4097      	lsls	r7, r2
     3b0:	f1c2 0320 	rsb	r3, r2, #32
     3b4:	fa01 f002 	lsl.w	r0, r1, r2
     3b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     3bc:	40d9      	lsrs	r1, r3
     3be:	fa24 f303 	lsr.w	r3, r4, r3
     3c2:	fa1f f887 	uxth.w	r8, r7
     3c6:	4094      	lsls	r4, r2
     3c8:	4303      	orrs	r3, r0
     3ca:	fbb1 f0fe 	udiv	r0, r1, lr
     3ce:	0c1e      	lsrs	r6, r3, #16
     3d0:	fb0e 1110 	mls	r1, lr, r0, r1
     3d4:	fb00 fc08 	mul.w	ip, r0, r8
     3d8:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
     3dc:	458c      	cmp	ip, r1
     3de:	d909      	bls.n	3f4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x174>
     3e0:	1879      	adds	r1, r7, r1
     3e2:	bf2c      	ite	cs
     3e4:	2601      	movcs	r6, #1
     3e6:	2600      	movcc	r6, #0
     3e8:	458c      	cmp	ip, r1
     3ea:	d902      	bls.n	3f2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x172>
     3ec:	2e00      	cmp	r6, #0
     3ee:	f000 8093 	beq.w	518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>
     3f2:	3801      	subs	r0, #1
     3f4:	eba1 010c 	sub.w	r1, r1, ip
     3f8:	b29b      	uxth	r3, r3
     3fa:	fbb1 f6fe 	udiv	r6, r1, lr
     3fe:	fb0e 1116 	mls	r1, lr, r6, r1
     402:	fb06 fc08 	mul.w	ip, r6, r8
     406:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
     40a:	458c      	cmp	ip, r1
     40c:	d905      	bls.n	41a <CONFIG_FLASH_SIZE+0x1a>
     40e:	1879      	adds	r1, r7, r1
     410:	d202      	bcs.n	418 <CONFIG_FLASH_SIZE+0x18>
     412:	458c      	cmp	ip, r1
     414:	f200 8087 	bhi.w	526 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3e>
     418:	3e01      	subs	r6, #1
     41a:	eba1 030c 	sub.w	r3, r1, ip
     41e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     422:	e779      	b.n	318 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x98>
     424:	f1c6 0720 	rsb	r7, r6, #32
     428:	fa03 f406 	lsl.w	r4, r3, r6
     42c:	fa02 fc06 	lsl.w	ip, r2, r6
     430:	fa01 fe06 	lsl.w	lr, r1, r6
     434:	40fa      	lsrs	r2, r7
     436:	fa20 f807 	lsr.w	r8, r0, r7
     43a:	40f9      	lsrs	r1, r7
     43c:	fa00 f306 	lsl.w	r3, r0, r6
     440:	4322      	orrs	r2, r4
     442:	ea48 040e 	orr.w	r4, r8, lr
     446:	ea4f 4812 	mov.w	r8, r2, lsr #16
     44a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
     44e:	fa1f f982 	uxth.w	r9, r2
     452:	fbb1 faf8 	udiv	sl, r1, r8
     456:	fb08 111a 	mls	r1, r8, sl, r1
     45a:	fb0a f009 	mul.w	r0, sl, r9
     45e:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
     462:	4570      	cmp	r0, lr
     464:	d90a      	bls.n	47c <CONFIG_FLASH_SIZE+0x7c>
     466:	eb12 0e0e 	adds.w	lr, r2, lr
     46a:	bf2c      	ite	cs
     46c:	2101      	movcs	r1, #1
     46e:	2100      	movcc	r1, #0
     470:	4570      	cmp	r0, lr
     472:	d901      	bls.n	478 <CONFIG_FLASH_SIZE+0x78>
     474:	2900      	cmp	r1, #0
     476:	d052      	beq.n	51e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x36>
     478:	f10a 3aff 	add.w	sl, sl, #4294967295
     47c:	ebae 0e00 	sub.w	lr, lr, r0
     480:	b2a4      	uxth	r4, r4
     482:	fbbe f0f8 	udiv	r0, lr, r8
     486:	fb08 ee10 	mls	lr, r8, r0, lr
     48a:	fb00 f909 	mul.w	r9, r0, r9
     48e:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
     492:	45f1      	cmp	r9, lr
     494:	d905      	bls.n	4a2 <CONFIG_FLASH_SIZE+0xa2>
     496:	eb12 0e0e 	adds.w	lr, r2, lr
     49a:	d201      	bcs.n	4a0 <CONFIG_FLASH_SIZE+0xa0>
     49c:	45f1      	cmp	r9, lr
     49e:	d838      	bhi.n	512 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a>
     4a0:	3801      	subs	r0, #1
     4a2:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     4a6:	ebae 0e09 	sub.w	lr, lr, r9
     4aa:	fba0 890c 	umull	r8, r9, r0, ip
     4ae:	45ce      	cmp	lr, r9
     4b0:	4641      	mov	r1, r8
     4b2:	464c      	mov	r4, r9
     4b4:	d302      	bcc.n	4bc <CONFIG_FLASH_SIZE+0xbc>
     4b6:	d106      	bne.n	4c6 <CONFIG_FLASH_SIZE+0xc6>
     4b8:	4543      	cmp	r3, r8
     4ba:	d204      	bcs.n	4c6 <CONFIG_FLASH_SIZE+0xc6>
     4bc:	3801      	subs	r0, #1
     4be:	ebb8 010c 	subs.w	r1, r8, ip
     4c2:	eb69 0402 	sbc.w	r4, r9, r2
     4c6:	b315      	cbz	r5, 50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
     4c8:	1a5a      	subs	r2, r3, r1
     4ca:	eb6e 0e04 	sbc.w	lr, lr, r4
     4ce:	40f2      	lsrs	r2, r6
     4d0:	fa0e f707 	lsl.w	r7, lr, r7
     4d4:	fa2e f306 	lsr.w	r3, lr, r6
     4d8:	2600      	movs	r6, #0
     4da:	4317      	orrs	r7, r2
     4dc:	e9c5 7300 	strd	r7, r3, [r5]
     4e0:	e70b      	b.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     4e2:	462e      	mov	r6, r5
     4e4:	4628      	mov	r0, r5
     4e6:	e708      	b.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     4e8:	1a84      	subs	r4, r0, r2
     4ea:	eb61 0103 	sbc.w	r1, r1, r3
     4ee:	2001      	movs	r0, #1
     4f0:	4688      	mov	r8, r1
     4f2:	e757      	b.n	3a4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x124>
     4f4:	f1ac 0c02 	sub.w	ip, ip, #2
     4f8:	4439      	add	r1, r7
     4fa:	e724      	b.n	346 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc6>
     4fc:	3802      	subs	r0, #2
     4fe:	443c      	add	r4, r7
     500:	e734      	b.n	36c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xec>
     502:	3802      	subs	r0, #2
     504:	443c      	add	r4, r7
     506:	e6ee      	b.n	2e6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x66>
     508:	3e02      	subs	r6, #2
     50a:	443b      	add	r3, r7
     50c:	e6d9      	b.n	2c2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x42>
     50e:	462e      	mov	r6, r5
     510:	e6f3      	b.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     512:	3802      	subs	r0, #2
     514:	4496      	add	lr, r2
     516:	e7c4      	b.n	4a2 <CONFIG_FLASH_SIZE+0xa2>
     518:	3802      	subs	r0, #2
     51a:	4439      	add	r1, r7
     51c:	e76a      	b.n	3f4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x174>
     51e:	f1aa 0a02 	sub.w	sl, sl, #2
     522:	4496      	add	lr, r2
     524:	e7aa      	b.n	47c <CONFIG_FLASH_SIZE+0x7c>
     526:	3e02      	subs	r6, #2
     528:	4439      	add	r1, r7
     52a:	e776      	b.n	41a <CONFIG_FLASH_SIZE+0x1a>

0000052c <__aeabi_idiv0>:
     52c:	4770      	bx	lr
     52e:	bf00      	nop

00000530 <__gnu_cmse_nonsecure_call>:
     530:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     534:	4627      	mov	r7, r4
     536:	46a0      	mov	r8, r4
     538:	46a1      	mov	r9, r4
     53a:	46a2      	mov	sl, r4
     53c:	46a3      	mov	fp, r4
     53e:	46a4      	mov	ip, r4
     540:	ed2d 8b10 	vpush	{d8-d15}
     544:	f04f 0500 	mov.w	r5, #0
     548:	ec45 5b18 	vmov	d8, r5, r5
     54c:	ec45 5a19 	vmov	s18, s19, r5, r5
     550:	ec45 5a1a 	vmov	s20, s21, r5, r5
     554:	ec45 5a1b 	vmov	s22, s23, r5, r5
     558:	ec45 5a1c 	vmov	s24, s25, r5, r5
     55c:	ec45 5a1d 	vmov	s26, s27, r5, r5
     560:	ec45 5a1e 	vmov	s28, s29, r5, r5
     564:	ec45 5a1f 	vmov	s30, s31, r5, r5
     568:	eef1 5a10 	vmrs	r5, fpscr
     56c:	f64f 7660 	movw	r6, #65376	; 0xff60
     570:	f6c0 76ff 	movt	r6, #4095	; 0xfff
     574:	4035      	ands	r5, r6
     576:	eee1 5a10 	vmsr	fpscr, r5
     57a:	f384 8800 	msr	CPSR_f, r4
     57e:	4625      	mov	r5, r4
     580:	4626      	mov	r6, r4
     582:	47a4      	blxns	r4
     584:	ecbd 8b10 	vpop	{d8-d15}
     588:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0000058c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     58c:	680b      	ldr	r3, [r1, #0]
     58e:	3301      	adds	r3, #1
     590:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     592:	4b01      	ldr	r3, [pc, #4]	; (598 <char_out+0xc>)
     594:	681b      	ldr	r3, [r3, #0]
     596:	4718      	bx	r3
     598:	20000000 	.word	0x20000000

0000059c <__printk_hook_install>:
	_char_out = fn;
     59c:	4b01      	ldr	r3, [pc, #4]	; (5a4 <__printk_hook_install+0x8>)
     59e:	6018      	str	r0, [r3, #0]
}
     5a0:	4770      	bx	lr
     5a2:	bf00      	nop
     5a4:	20000000 	.word	0x20000000

000005a8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     5a8:	b507      	push	{r0, r1, r2, lr}
     5aa:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     5ac:	2100      	movs	r1, #0
{
     5ae:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     5b0:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     5b2:	4803      	ldr	r0, [pc, #12]	; (5c0 <vprintk+0x18>)
     5b4:	a901      	add	r1, sp, #4
     5b6:	f000 f8ed 	bl	794 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     5ba:	b003      	add	sp, #12
     5bc:	f85d fb04 	ldr.w	pc, [sp], #4
     5c0:	0000058d 	.word	0x0000058d

000005c4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     5c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5c8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
     5cc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     5ce:	f019 0808 	ands.w	r8, r9, #8
{
     5d2:	4693      	mov	fp, r2
	if (processing) {
     5d4:	d00e      	beq.n	5f4 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
     5d6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     5d8:	bf0c      	ite	eq
     5da:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     5de:	f049 0920 	orrne.w	r9, r9, #32
     5e2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     5e6:	f38b 8811 	msr	BASEPRI, fp
     5ea:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     5ee:	b003      	add	sp, #12
     5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
     5f4:	f8df a198 	ldr.w	sl, [pc, #408]	; 790 <process_event+0x1cc>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5f8:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     5fc:	2902      	cmp	r1, #2
     5fe:	d107      	bne.n	610 <process_event+0x4c>
			evt = process_recheck(mgr);
     600:	4620      	mov	r0, r4
     602:	f005 f824 	bl	564e <process_recheck>
		if (evt == EVT_NOP) {
     606:	2800      	cmp	r0, #0
     608:	d0ed      	beq.n	5e6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     60a:	2801      	cmp	r0, #1
     60c:	8b23      	ldrh	r3, [r4, #24]
     60e:	d14d      	bne.n	6ac <process_event+0xe8>
			res = mgr->last_res;
     610:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     612:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     614:	2f00      	cmp	r7, #0
     616:	da15      	bge.n	644 <process_event+0x80>
		*clients = mgr->clients;
     618:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     61a:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     61e:	e9c4 8800 	strd	r8, r8, [r4]
     622:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     626:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     628:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     62a:	8b21      	ldrh	r1, [r4, #24]
     62c:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     630:	454a      	cmp	r2, r9
     632:	d002      	beq.n	63a <process_event+0x76>
		if (do_monitors
     634:	68a3      	ldr	r3, [r4, #8]
     636:	2b00      	cmp	r3, #0
     638:	d159      	bne.n	6ee <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
     63a:	b90d      	cbnz	r5, 640 <process_event+0x7c>
		    || (transit != NULL)) {
     63c:	2e00      	cmp	r6, #0
     63e:	d071      	beq.n	724 <process_event+0x160>
     640:	2300      	movs	r3, #0
     642:	e055      	b.n	6f0 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     644:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     648:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     64a:	2a01      	cmp	r2, #1
     64c:	d81f      	bhi.n	68e <process_event+0xca>
		*clients = mgr->clients;
     64e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     652:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     654:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
     656:	b289      	uxth	r1, r1
	list->tail = NULL;
     658:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     65c:	d10c      	bne.n	678 <process_event+0xb4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     65e:	2d00      	cmp	r5, #0
     660:	462b      	mov	r3, r5
     662:	bf38      	it	cc
     664:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     666:	b12b      	cbz	r3, 674 <process_event+0xb0>
				mgr->refs += 1U;
     668:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     66a:	681b      	ldr	r3, [r3, #0]
     66c:	3201      	adds	r2, #1
     66e:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     670:	2b00      	cmp	r3, #0
     672:	d1f8      	bne.n	666 <process_event+0xa2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     674:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
     678:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     67a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     67c:	f004 ffe7 	bl	564e <process_recheck>
     680:	2800      	cmp	r0, #0
     682:	d0d1      	beq.n	628 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     684:	8b23      	ldrh	r3, [r4, #24]
     686:	f043 0320 	orr.w	r3, r3, #32
     68a:	8323      	strh	r3, [r4, #24]
     68c:	e7cc      	b.n	628 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
     68e:	2b04      	cmp	r3, #4
     690:	d10a      	bne.n	6a8 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     692:	f021 0107 	bic.w	r1, r1, #7
     696:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
     698:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     69a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     69c:	f004 ffd7 	bl	564e <process_recheck>
     6a0:	b110      	cbz	r0, 6a8 <process_event+0xe4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     6a2:	f041 0120 	orr.w	r1, r1, #32
     6a6:	8321      	strh	r1, [r4, #24]
     6a8:	2500      	movs	r5, #0
     6aa:	e7bd      	b.n	628 <process_event+0x64>
		} else if (evt == EVT_START) {
     6ac:	2803      	cmp	r0, #3
     6ae:	d109      	bne.n	6c4 <process_event+0x100>
			transit = mgr->transitions->start;
     6b0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6b2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     6b6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6b8:	f043 0306 	orr.w	r3, r3, #6
}
     6bc:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
     6be:	8323      	strh	r3, [r4, #24]
		res = 0;
     6c0:	462f      	mov	r7, r5
     6c2:	e7b2      	b.n	62a <process_event+0x66>
		} else if (evt == EVT_STOP) {
     6c4:	2804      	cmp	r0, #4
     6c6:	d106      	bne.n	6d6 <process_event+0x112>
			transit = mgr->transitions->stop;
     6c8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6ca:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     6ce:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6d0:	f043 0304 	orr.w	r3, r3, #4
     6d4:	e7f2      	b.n	6bc <process_event+0xf8>
		} else if (evt == EVT_RESET) {
     6d6:	2805      	cmp	r0, #5
     6d8:	d106      	bne.n	6e8 <process_event+0x124>
			transit = mgr->transitions->reset;
     6da:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6dc:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     6e0:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6e2:	f043 0305 	orr.w	r3, r3, #5
     6e6:	e7e9      	b.n	6bc <process_event+0xf8>
     6e8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     6ea:	462e      	mov	r6, r5
     6ec:	e7e8      	b.n	6c0 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
     6ee:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     6f0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     6f4:	8321      	strh	r1, [r4, #24]
     6f6:	f38b 8811 	msr	BASEPRI, fp
     6fa:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     6fe:	bb03      	cbnz	r3, 742 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
     700:	2d00      	cmp	r5, #0
     702:	d134      	bne.n	76e <process_event+0x1aa>
			if (transit != NULL) {
     704:	b116      	cbz	r6, 70c <process_event+0x148>
				transit(mgr, transition_complete);
     706:	4651      	mov	r1, sl
     708:	4620      	mov	r0, r4
     70a:	47b0      	blx	r6
	__asm__ volatile(
     70c:	f04f 0320 	mov.w	r3, #32
     710:	f3ef 8b11 	mrs	fp, BASEPRI
     714:	f383 8811 	msr	BASEPRI, r3
     718:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     71c:	8b23      	ldrh	r3, [r4, #24]
     71e:	f023 0308 	bic.w	r3, r3, #8
     722:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     724:	8b23      	ldrh	r3, [r4, #24]
     726:	06da      	lsls	r2, r3, #27
     728:	d52a      	bpl.n	780 <process_event+0x1bc>
			evt = EVT_COMPLETE;
     72a:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     72c:	f023 0310 	bic.w	r3, r3, #16
     730:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     732:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     736:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     73a:	2900      	cmp	r1, #0
     73c:	f47f af5e 	bne.w	5fc <process_event+0x38>
out:
     740:	e751      	b.n	5e6 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     742:	68a1      	ldr	r1, [r4, #8]
     744:	2900      	cmp	r1, #0
     746:	d0db      	beq.n	700 <process_event+0x13c>
	return node->next;
     748:	680b      	ldr	r3, [r1, #0]
     74a:	2b00      	cmp	r3, #0
     74c:	bf38      	it	cc
     74e:	2300      	movcc	r3, #0
     750:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
     752:	4620      	mov	r0, r4
     754:	463b      	mov	r3, r7
     756:	f8d1 b004 	ldr.w	fp, [r1, #4]
     75a:	9201      	str	r2, [sp, #4]
     75c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     75e:	9a01      	ldr	r2, [sp, #4]
     760:	f1b9 0f00 	cmp.w	r9, #0
     764:	d0cc      	beq.n	700 <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     766:	4649      	mov	r1, r9
     768:	f8d9 3000 	ldr.w	r3, [r9]
     76c:	e7ed      	b.n	74a <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     76e:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     770:	463b      	mov	r3, r7
     772:	4620      	mov	r0, r4
     774:	9201      	str	r2, [sp, #4]
     776:	682d      	ldr	r5, [r5, #0]
     778:	f004 ff85 	bl	5686 <notify_one>
	while (!sys_slist_is_empty(list)) {
     77c:	9a01      	ldr	r2, [sp, #4]
     77e:	e7bf      	b.n	700 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     780:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     784:	bf1e      	ittt	ne
     786:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
     78a:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     78c:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     78e:	e7d0      	b.n	732 <process_event+0x16e>
     790:	000056b3 	.word	0x000056b3

00000794 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     798:	4688      	mov	r8, r1
     79a:	4691      	mov	r9, r2
     79c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     79e:	2500      	movs	r5, #0
{
     7a0:	b0a5      	sub	sp, #148	; 0x94
     7a2:	9003      	str	r0, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     7a4:	f899 0000 	ldrb.w	r0, [r9]
     7a8:	b910      	cbnz	r0, 7b0 <cbvprintf+0x1c>
			OUTC(' ');
			--width;
		}
	}

	return count;
     7aa:	4628      	mov	r0, r5
     7ac:	f000 be18 	b.w	13e0 <CONFIG_MAIN_STACK_SIZE+0x3e0>
		if (*fp != '%') {
     7b0:	f109 0301 	add.w	r3, r9, #1
     7b4:	2825      	cmp	r0, #37	; 0x25
     7b6:	9309      	str	r3, [sp, #36]	; 0x24
     7b8:	d007      	beq.n	7ca <cbvprintf+0x36>
			OUTC(*fp++);
     7ba:	4641      	mov	r1, r8
			OUTC('%');
     7bc:	9b03      	ldr	r3, [sp, #12]
     7be:	4798      	blx	r3
     7c0:	2800      	cmp	r0, #0
     7c2:	f2c0 860d 	blt.w	13e0 <CONFIG_MAIN_STACK_SIZE+0x3e0>
     7c6:	3501      	adds	r5, #1
		if (bps == NULL) {
     7c8:	e245      	b.n	c56 <CONFIG_ISR_STACK_SIZE+0x456>
		} state = {
     7ca:	2218      	movs	r2, #24
     7cc:	2100      	movs	r1, #0
     7ce:	a816      	add	r0, sp, #88	; 0x58
     7d0:	f005 fb1b 	bl	5e0a <memset>
	if (*sp == '%') {
     7d4:	f899 3001 	ldrb.w	r3, [r9, #1]
     7d8:	2b25      	cmp	r3, #37	; 0x25
     7da:	d079      	beq.n	8d0 <CONFIG_ISR_STACK_SIZE+0xd0>
     7dc:	2200      	movs	r2, #0
     7de:	4616      	mov	r6, r2
     7e0:	4696      	mov	lr, r2
     7e2:	4617      	mov	r7, r2
     7e4:	4694      	mov	ip, r2
     7e6:	9809      	ldr	r0, [sp, #36]	; 0x24
     7e8:	4601      	mov	r1, r0
		switch (*sp) {
     7ea:	f810 3b01 	ldrb.w	r3, [r0], #1
     7ee:	2b2b      	cmp	r3, #43	; 0x2b
     7f0:	f000 809e 	beq.w	930 <CONFIG_ISR_STACK_SIZE+0x130>
     7f4:	f200 8095 	bhi.w	922 <CONFIG_ISR_STACK_SIZE+0x122>
     7f8:	2b20      	cmp	r3, #32
     7fa:	f000 809b 	beq.w	934 <CONFIG_ISR_STACK_SIZE+0x134>
     7fe:	2b23      	cmp	r3, #35	; 0x23
     800:	f000 809b 	beq.w	93a <CONFIG_ISR_STACK_SIZE+0x13a>
     804:	f1bc 0f00 	cmp.w	ip, #0
     808:	d005      	beq.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
     80a:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
     80e:	f040 0004 	orr.w	r0, r0, #4
     812:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
     816:	b12f      	cbz	r7, 824 <CONFIG_ISR_STACK_SIZE+0x24>
     818:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
     81c:	f040 0008 	orr.w	r0, r0, #8
     820:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
     824:	f1be 0f00 	cmp.w	lr, #0
     828:	d005      	beq.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
     82a:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
     82e:	f040 0010 	orr.w	r0, r0, #16
     832:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
     836:	b12e      	cbz	r6, 844 <CONFIG_ISR_STACK_SIZE+0x44>
     838:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
     83c:	f040 0020 	orr.w	r0, r0, #32
     840:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
     844:	b12a      	cbz	r2, 852 <CONFIG_ISR_STACK_SIZE+0x52>
     846:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
     84a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     84e:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	if (conv->flag_zero && conv->flag_dash) {
     852:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
     856:	f002 0044 	and.w	r0, r2, #68	; 0x44
     85a:	2844      	cmp	r0, #68	; 0x44
     85c:	d103      	bne.n	866 <CONFIG_ISR_STACK_SIZE+0x66>
		conv->flag_zero = false;
     85e:	f36f 1286 	bfc	r2, #6, #1
     862:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	conv->width_present = true;
     866:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
	if (*sp == '*') {
     86a:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     86c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     870:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	if (*sp == '*') {
     874:	d17c      	bne.n	970 <CONFIG_ISR_STACK_SIZE+0x170>
		conv->width_star = true;
     876:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
     87a:	1c4b      	adds	r3, r1, #1
     87c:	f042 0201 	orr.w	r2, r2, #1
     880:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
	conv->prec_present = (*sp == '.');
     884:	781a      	ldrb	r2, [r3, #0]
     886:	2a2e      	cmp	r2, #46	; 0x2e
     888:	bf0c      	ite	eq
     88a:	2101      	moveq	r1, #1
     88c:	2100      	movne	r1, #0
     88e:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
     892:	f361 0241 	bfi	r2, r1, #1, #1
     896:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
	if (!conv->prec_present) {
     89a:	d175      	bne.n	988 <CONFIG_ISR_STACK_SIZE+0x188>
	if (*sp == '*') {
     89c:	785a      	ldrb	r2, [r3, #1]
     89e:	2a2a      	cmp	r2, #42	; 0x2a
     8a0:	d06b      	beq.n	97a <CONFIG_ISR_STACK_SIZE+0x17a>
	size_t val = 0;
     8a2:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     8a4:	260a      	movs	r6, #10
     8a6:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     8a8:	4618      	mov	r0, r3
     8aa:	f810 2b01 	ldrb.w	r2, [r0], #1
     8ae:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     8b2:	2f09      	cmp	r7, #9
     8b4:	f240 80aa 	bls.w	a0c <CONFIG_ISR_STACK_SIZE+0x20c>
	conv->unsupported |= ((conv->prec_value < 0)
     8b8:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
	conv->prec_value = prec;
     8bc:	911a      	str	r1, [sp, #104]	; 0x68
	conv->unsupported |= ((conv->prec_value < 0)
     8be:	f3c2 0040 	ubfx	r0, r2, #1, #1
     8c2:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     8c6:	f361 0241 	bfi	r2, r1, #1, #1
     8ca:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	return sp;
     8ce:	e05b      	b.n	988 <CONFIG_ISR_STACK_SIZE+0x188>
		conv->specifier = *sp++;
     8d0:	f109 0202 	add.w	r2, r9, #2
     8d4:	9209      	str	r2, [sp, #36]	; 0x24
     8d6:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
		if (conv->width_star) {
     8da:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
     8de:	07de      	lsls	r6, r3, #31
     8e0:	f140 816f 	bpl.w	bc2 <CONFIG_ISR_STACK_SIZE+0x3c2>
			width = va_arg(ap, int);
     8e4:	f854 2b04 	ldr.w	r2, [r4], #4
			if (width < 0) {
     8e8:	2a00      	cmp	r2, #0
			width = va_arg(ap, int);
     8ea:	9208      	str	r2, [sp, #32]
			if (width < 0) {
     8ec:	da08      	bge.n	900 <CONFIG_ISR_STACK_SIZE+0x100>
				conv->flag_dash = true;
     8ee:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
     8f2:	f042 0204 	orr.w	r2, r2, #4
     8f6:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
				width = -width;
     8fa:	9a08      	ldr	r2, [sp, #32]
     8fc:	4252      	negs	r2, r2
		int width = -1;
     8fe:	9208      	str	r2, [sp, #32]
		if (conv->prec_star) {
     900:	0758      	lsls	r0, r3, #29
     902:	f140 8166 	bpl.w	bd2 <CONFIG_ISR_STACK_SIZE+0x3d2>
			int arg = va_arg(ap, int);
     906:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
     90a:	2f00      	cmp	r7, #0
     90c:	f280 8165 	bge.w	bda <CONFIG_ISR_STACK_SIZE+0x3da>
				conv->prec_present = false;
     910:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
     914:	f36f 0341 	bfc	r3, #1, #1
     918:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
		int precision = -1;
     91c:	f04f 37ff 	mov.w	r7, #4294967295
     920:	e15b      	b.n	bda <CONFIG_ISR_STACK_SIZE+0x3da>
		switch (*sp) {
     922:	2b2d      	cmp	r3, #45	; 0x2d
     924:	d00b      	beq.n	93e <CONFIG_ISR_STACK_SIZE+0x13e>
     926:	2b30      	cmp	r3, #48	; 0x30
     928:	f47f af6c 	bne.w	804 <CONFIG_ISR_STACK_SIZE+0x4>
			conv->flag_zero = true;
     92c:	2201      	movs	r2, #1
	} while (loop);
     92e:	e75b      	b.n	7e8 <cbvprintf+0x54>
			conv->flag_plus = true;
     930:	2701      	movs	r7, #1
     932:	e759      	b.n	7e8 <cbvprintf+0x54>
			conv->flag_space = true;
     934:	f04f 0e01 	mov.w	lr, #1
     938:	e756      	b.n	7e8 <cbvprintf+0x54>
			conv->flag_hash = true;
     93a:	2601      	movs	r6, #1
     93c:	e754      	b.n	7e8 <cbvprintf+0x54>
		switch (*sp) {
     93e:	f04f 0c01 	mov.w	ip, #1
     942:	e751      	b.n	7e8 <cbvprintf+0x54>
		val = 10U * val + *sp++ - '0';
     944:	4633      	mov	r3, r6
     946:	fb0c 0202 	mla	r2, ip, r2, r0
     94a:	3a30      	subs	r2, #48	; 0x30
     94c:	461e      	mov	r6, r3
     94e:	f816 0b01 	ldrb.w	r0, [r6], #1
     952:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     956:	2f09      	cmp	r7, #9
     958:	d9f4      	bls.n	944 <CONFIG_ISR_STACK_SIZE+0x144>
	if (sp != wp) {
     95a:	4299      	cmp	r1, r3
     95c:	d092      	beq.n	884 <CONFIG_ISR_STACK_SIZE+0x84>
		conv->unsupported |= ((conv->width_value < 0)
     95e:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
		conv->width_value = width;
     962:	9219      	str	r2, [sp, #100]	; 0x64
				      || (width != (size_t)conv->width_value));
     964:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     966:	f362 0141 	bfi	r1, r2, #1, #1
     96a:	f88d 1060 	strb.w	r1, [sp, #96]	; 0x60
     96e:	e789      	b.n	884 <CONFIG_ISR_STACK_SIZE+0x84>
     970:	460b      	mov	r3, r1
	size_t val = 0;
     972:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     974:	f04f 0c0a 	mov.w	ip, #10
     978:	e7e8      	b.n	94c <CONFIG_ISR_STACK_SIZE+0x14c>
		conv->prec_star = true;
     97a:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
		return ++sp;
     97e:	3302      	adds	r3, #2
		conv->prec_star = true;
     980:	f042 0204 	orr.w	r2, r2, #4
     984:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
	switch (*sp) {
     988:	4619      	mov	r1, r3
     98a:	f811 2b01 	ldrb.w	r2, [r1], #1
     98e:	2a6c      	cmp	r2, #108	; 0x6c
     990:	d05c      	beq.n	a4c <CONFIG_ISR_STACK_SIZE+0x24c>
     992:	d840      	bhi.n	a16 <CONFIG_ISR_STACK_SIZE+0x216>
     994:	2a68      	cmp	r2, #104	; 0x68
     996:	d046      	beq.n	a26 <CONFIG_ISR_STACK_SIZE+0x226>
     998:	2a6a      	cmp	r2, #106	; 0x6a
     99a:	d061      	beq.n	a60 <CONFIG_ISR_STACK_SIZE+0x260>
     99c:	2a4c      	cmp	r2, #76	; 0x4c
     99e:	d067      	beq.n	a70 <CONFIG_ISR_STACK_SIZE+0x270>
     9a0:	4619      	mov	r1, r3
	conv->specifier = *sp++;
     9a2:	460b      	mov	r3, r1
     9a4:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
     9a8:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
     9aa:	9309      	str	r3, [sp, #36]	; 0x24
     9ac:	f88d 2063 	strb.w	r2, [sp, #99]	; 0x63
	switch (conv->specifier) {
     9b0:	f200 80df 	bhi.w	b72 <CONFIG_ISR_STACK_SIZE+0x372>
     9b4:	2a57      	cmp	r2, #87	; 0x57
     9b6:	d868      	bhi.n	a8a <CONFIG_ISR_STACK_SIZE+0x28a>
     9b8:	2a41      	cmp	r2, #65	; 0x41
     9ba:	d004      	beq.n	9c6 <CONFIG_ISR_STACK_SIZE+0x1c6>
     9bc:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
     9c0:	2b02      	cmp	r3, #2
     9c2:	f200 80d6 	bhi.w	b72 <CONFIG_ISR_STACK_SIZE+0x372>
		conv->specifier_cat = SPECIFIER_FP;
     9c6:	2104      	movs	r1, #4
     9c8:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
			|| (conv->specifier == 'A');
     9cc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
     9d0:	f1a2 0a41 	sub.w	sl, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
     9d4:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
     9d8:	f1da 0200 	rsbs	r2, sl, #0
		conv->specifier_a = (conv->specifier == 'a')
     9dc:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
			|| (conv->specifier == 'A');
     9e0:	eb42 020a 	adc.w	r2, r2, sl
		conv->specifier_a = (conv->specifier == 'a')
     9e4:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
     9e8:	060a      	lsls	r2, r1, #24
		conv->specifier_cat = SPECIFIER_FP;
     9ea:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		conv->specifier_a = (conv->specifier == 'a')
     9ee:	f88d 1061 	strb.w	r1, [sp, #97]	; 0x61
		if (conv->specifier_a
     9f2:	b2cb      	uxtb	r3, r1
     9f4:	f100 80e3 	bmi.w	bbe <CONFIG_ISR_STACK_SIZE+0x3be>
		if (conv->length_mod == LENGTH_L) {
     9f8:	f003 0278 	and.w	r2, r3, #120	; 0x78
     9fc:	2a18      	cmp	r2, #24
     9fe:	f040 80b5 	bne.w	b6c <CONFIG_ISR_STACK_SIZE+0x36c>
			conv->length_mod = LENGTH_NONE;
     a02:	f36f 03c6 	bfc	r3, #3, #4
     a06:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
     a0a:	e09c      	b.n	b46 <CONFIG_ISR_STACK_SIZE+0x346>
		val = 10U * val + *sp++ - '0';
     a0c:	fb06 2101 	mla	r1, r6, r1, r2
     a10:	4603      	mov	r3, r0
     a12:	3930      	subs	r1, #48	; 0x30
     a14:	e748      	b.n	8a8 <CONFIG_ISR_STACK_SIZE+0xa8>
	switch (*sp) {
     a16:	2a74      	cmp	r2, #116	; 0x74
     a18:	d026      	beq.n	a68 <CONFIG_ISR_STACK_SIZE+0x268>
     a1a:	2a7a      	cmp	r2, #122	; 0x7a
     a1c:	d1c0      	bne.n	9a0 <CONFIG_ISR_STACK_SIZE+0x1a0>
		conv->length_mod = LENGTH_Z;
     a1e:	2206      	movs	r2, #6
     a20:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
     a24:	e00d      	b.n	a42 <CONFIG_ISR_STACK_SIZE+0x242>
		if (*++sp == 'h') {
     a26:	785a      	ldrb	r2, [r3, #1]
     a28:	2a68      	cmp	r2, #104	; 0x68
     a2a:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
     a2e:	d106      	bne.n	a3e <CONFIG_ISR_STACK_SIZE+0x23e>
			conv->length_mod = LENGTH_HH;
     a30:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     a32:	f361 02c6 	bfi	r2, r1, #3, #4
     a36:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
			++sp;
     a3a:	1c99      	adds	r1, r3, #2
     a3c:	e7b1      	b.n	9a2 <CONFIG_ISR_STACK_SIZE+0x1a2>
			conv->length_mod = LENGTH_H;
     a3e:	4613      	mov	r3, r2
     a40:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     a42:	f362 03c6 	bfi	r3, r2, #3, #4
     a46:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
		break;
     a4a:	e7aa      	b.n	9a2 <CONFIG_ISR_STACK_SIZE+0x1a2>
		if (*++sp == 'l') {
     a4c:	785a      	ldrb	r2, [r3, #1]
     a4e:	2a6c      	cmp	r2, #108	; 0x6c
     a50:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
     a54:	d101      	bne.n	a5a <CONFIG_ISR_STACK_SIZE+0x25a>
			conv->length_mod = LENGTH_LL;
     a56:	2104      	movs	r1, #4
     a58:	e7eb      	b.n	a32 <CONFIG_ISR_STACK_SIZE+0x232>
			conv->length_mod = LENGTH_L;
     a5a:	4613      	mov	r3, r2
     a5c:	2203      	movs	r2, #3
     a5e:	e7f0      	b.n	a42 <CONFIG_ISR_STACK_SIZE+0x242>
		conv->length_mod = LENGTH_J;
     a60:	2205      	movs	r2, #5
     a62:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
     a66:	e7ec      	b.n	a42 <CONFIG_ISR_STACK_SIZE+0x242>
		conv->length_mod = LENGTH_T;
     a68:	2207      	movs	r2, #7
     a6a:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
     a6e:	e7e8      	b.n	a42 <CONFIG_ISR_STACK_SIZE+0x242>
		conv->unsupported = true;
     a70:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
     a74:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     a78:	f023 0302 	bic.w	r3, r3, #2
     a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     a80:	f043 0302 	orr.w	r3, r3, #2
     a84:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
		break;
     a88:	e78b      	b.n	9a2 <CONFIG_ISR_STACK_SIZE+0x1a2>
     a8a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
     a8e:	2b20      	cmp	r3, #32
     a90:	d86f      	bhi.n	b72 <CONFIG_ISR_STACK_SIZE+0x372>
     a92:	a101      	add	r1, pc, #4	; (adr r1, a98 <CONFIG_ISR_STACK_SIZE+0x298>)
     a94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
     a98:	00000b4b 	.word	0x00000b4b
     a9c:	00000b73 	.word	0x00000b73
     aa0:	00000b73 	.word	0x00000b73
     aa4:	00000b73 	.word	0x00000b73
     aa8:	00000b73 	.word	0x00000b73
     aac:	00000b73 	.word	0x00000b73
     ab0:	00000b73 	.word	0x00000b73
     ab4:	00000b73 	.word	0x00000b73
     ab8:	00000b73 	.word	0x00000b73
     abc:	000009c7 	.word	0x000009c7
     ac0:	00000b73 	.word	0x00000b73
     ac4:	00000b4b 	.word	0x00000b4b
     ac8:	00000b1d 	.word	0x00000b1d
     acc:	000009c7 	.word	0x000009c7
     ad0:	000009c7 	.word	0x000009c7
     ad4:	000009c7 	.word	0x000009c7
     ad8:	00000b73 	.word	0x00000b73
     adc:	00000b1d 	.word	0x00000b1d
     ae0:	00000b73 	.word	0x00000b73
     ae4:	00000b73 	.word	0x00000b73
     ae8:	00000b73 	.word	0x00000b73
     aec:	00000b73 	.word	0x00000b73
     af0:	00000b81 	.word	0x00000b81
     af4:	00000b4b 	.word	0x00000b4b
     af8:	00000ba1 	.word	0x00000ba1
     afc:	00000b73 	.word	0x00000b73
     b00:	00000b73 	.word	0x00000b73
     b04:	00000ba1 	.word	0x00000ba1
     b08:	00000b73 	.word	0x00000b73
     b0c:	00000b4b 	.word	0x00000b4b
     b10:	00000b73 	.word	0x00000b73
     b14:	00000b73 	.word	0x00000b73
     b18:	00000b4b 	.word	0x00000b4b
		conv->specifier_cat = SPECIFIER_SINT;
     b1c:	2101      	movs	r1, #1
     b1e:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
		conv->specifier_cat = SPECIFIER_UINT;
     b22:	f361 0302 	bfi	r3, r1, #0, #3
     b26:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod == LENGTH_UPPER_L) {
     b2a:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
     b2e:	f003 0378 	and.w	r3, r3, #120	; 0x78
     b32:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
     b34:	bf02      	ittt	eq
     b36:	f89d 1060 	ldrbeq.w	r1, [sp, #96]	; 0x60
     b3a:	f041 0101 	orreq.w	r1, r1, #1
     b3e:	f88d 1060 	strbeq.w	r1, [sp, #96]	; 0x60
		if (conv->specifier == 'c') {
     b42:	2a63      	cmp	r2, #99	; 0x63
     b44:	d005      	beq.n	b52 <CONFIG_ISR_STACK_SIZE+0x352>
	bool unsupported = false;
     b46:	2300      	movs	r3, #0
     b48:	e006      	b.n	b58 <CONFIG_ISR_STACK_SIZE+0x358>
		conv->specifier_cat = SPECIFIER_UINT;
     b4a:	2102      	movs	r1, #2
     b4c:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
     b50:	e7e7      	b.n	b22 <CONFIG_ISR_STACK_SIZE+0x322>
			unsupported = (conv->length_mod != LENGTH_NONE);
     b52:	3b00      	subs	r3, #0
     b54:	bf18      	it	ne
     b56:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     b58:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
     b5c:	f3c2 0140 	ubfx	r1, r2, #1, #1
     b60:	430b      	orrs	r3, r1
     b62:	f363 0241 	bfi	r2, r3, #1, #1
     b66:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	return sp;
     b6a:	e6b6      	b.n	8da <CONFIG_ISR_STACK_SIZE+0xda>
		} else if ((conv->length_mod != LENGTH_NONE)
     b6c:	f013 0f38 	tst.w	r3, #56	; 0x38
     b70:	d0e9      	beq.n	b46 <CONFIG_ISR_STACK_SIZE+0x346>
			conv->invalid = true;
     b72:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
     b76:	f043 0301 	orr.w	r3, r3, #1
     b7a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
     b7e:	e7e2      	b.n	b46 <CONFIG_ISR_STACK_SIZE+0x346>
		conv->specifier_cat = SPECIFIER_PTR;
     b80:	2203      	movs	r2, #3
     b82:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
     b86:	f362 0302 	bfi	r3, r2, #0, #3
     b8a:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod == LENGTH_UPPER_L) {
     b8e:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
     b92:	f003 0378 	and.w	r3, r3, #120	; 0x78
     b96:	f1a3 0740 	sub.w	r7, r3, #64	; 0x40
     b9a:	427b      	negs	r3, r7
     b9c:	417b      	adcs	r3, r7
     b9e:	e7db      	b.n	b58 <CONFIG_ISR_STACK_SIZE+0x358>
		conv->specifier_cat = SPECIFIER_PTR;
     ba0:	2203      	movs	r2, #3
     ba2:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
     ba6:	f362 0302 	bfi	r3, r2, #0, #3
     baa:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod != LENGTH_NONE) {
     bae:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
     bb2:	f013 0f78 	tst.w	r3, #120	; 0x78
     bb6:	bf14      	ite	ne
     bb8:	2301      	movne	r3, #1
     bba:	2300      	moveq	r3, #0
     bbc:	e7cc      	b.n	b58 <CONFIG_ISR_STACK_SIZE+0x358>
			unsupported = true;
     bbe:	2301      	movs	r3, #1
     bc0:	e7ca      	b.n	b58 <CONFIG_ISR_STACK_SIZE+0x358>
		} else if (conv->width_present) {
     bc2:	f99d 2060 	ldrsb.w	r2, [sp, #96]	; 0x60
     bc6:	2a00      	cmp	r2, #0
		int width = -1;
     bc8:	bfac      	ite	ge
     bca:	f04f 32ff 	movge.w	r2, #4294967295
			width = conv->width_value;
     bce:	9a19      	ldrlt	r2, [sp, #100]	; 0x64
     bd0:	e695      	b.n	8fe <CONFIG_ISR_STACK_SIZE+0xfe>
		} else if (conv->prec_present) {
     bd2:	0799      	lsls	r1, r3, #30
     bd4:	f57f aea2 	bpl.w	91c <CONFIG_ISR_STACK_SIZE+0x11c>
			precision = conv->prec_value;
     bd8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
		conv->pad0_value = 0;
     bda:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     bdc:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
		    && (conv->specifier_cat == SPECIFIER_FP)
     be0:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
     be4:	f003 0307 	and.w	r3, r3, #7
     be8:	2b04      	cmp	r3, #4
     bea:	d109      	bne.n	c00 <CONFIG_ISR_STACK_SIZE+0x400>
		    && !conv->prec_present) {
     bec:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
     bf0:	079a      	lsls	r2, r3, #30
     bf2:	d405      	bmi.n	c00 <CONFIG_ISR_STACK_SIZE+0x400>
			if (conv->specifier_a) {
     bf4:	f99d 3061 	ldrsb.w	r3, [sp, #97]	; 0x61
				precision = 6;
     bf8:	2b00      	cmp	r3, #0
     bfa:	bfb4      	ite	lt
     bfc:	270d      	movlt	r7, #13
     bfe:	2706      	movge	r7, #6
			= (enum specifier_cat_enum)conv->specifier_cat;
     c00:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
			= (enum length_mod_enum)conv->length_mod;
     c04:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
		enum specifier_cat_enum specifier_cat
     c08:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     c0c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     c0e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     c12:	d136      	bne.n	c82 <CONFIG_ISR_STACK_SIZE+0x482>
			switch (length_mod) {
     c14:	1ecb      	subs	r3, r1, #3
     c16:	2b04      	cmp	r3, #4
     c18:	d820      	bhi.n	c5c <CONFIG_ISR_STACK_SIZE+0x45c>
     c1a:	e8df f003 	tbb	[pc, r3]
     c1e:	0703      	.short	0x0703
     c20:	1f07      	.short	0x1f07
     c22:	1f          	.byte	0x1f
     c23:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     c24:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
     c28:	17d3      	asrs	r3, r2, #31
     c2a:	e004      	b.n	c36 <CONFIG_ISR_STACK_SIZE+0x436>
					(sint_value_type)va_arg(ap, intmax_t);
     c2c:	3407      	adds	r4, #7
     c2e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     c32:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
     c36:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		if (conv->invalid || conv->unsupported) {
     c3a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
     c3e:	07b3      	lsls	r3, r6, #30
     c40:	d055      	beq.n	cee <CONFIG_ISR_STACK_SIZE+0x4ee>
			OUTS(sp, fp);
     c42:	464a      	mov	r2, r9
     c44:	4641      	mov	r1, r8
     c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c48:	9803      	ldr	r0, [sp, #12]
     c4a:	f004 ff13 	bl	5a74 <outs>
     c4e:	2800      	cmp	r0, #0
     c50:	f2c0 83c6 	blt.w	13e0 <CONFIG_MAIN_STACK_SIZE+0x3e0>
     c54:	4405      	add	r5, r0
			while (pad_len-- > 0) {
     c56:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
     c5a:	e5a3      	b.n	7a4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     c5c:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
     c60:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     c62:	ea4f 73e2 	mov.w	r3, r2, asr #31
     c66:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
			if (length_mod == LENGTH_HH) {
     c6a:	d105      	bne.n	c78 <CONFIG_ISR_STACK_SIZE+0x478>
				value->uint = (unsigned char)value->uint;
     c6c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
				value->uint = (unsigned short)value->uint;
     c70:	9316      	str	r3, [sp, #88]	; 0x58
     c72:	2300      	movs	r3, #0
     c74:	9317      	str	r3, [sp, #92]	; 0x5c
     c76:	e7e0      	b.n	c3a <CONFIG_ISR_STACK_SIZE+0x43a>
			} else if (length_mod == LENGTH_H) {
     c78:	2902      	cmp	r1, #2
     c7a:	d1de      	bne.n	c3a <CONFIG_ISR_STACK_SIZE+0x43a>
				value->sint = (short)value->sint;
     c7c:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
     c80:	e7d2      	b.n	c28 <CONFIG_ISR_STACK_SIZE+0x428>
		} else if (specifier_cat == SPECIFIER_UINT) {
     c82:	2b02      	cmp	r3, #2
     c84:	d123      	bne.n	cce <CONFIG_ISR_STACK_SIZE+0x4ce>
			switch (length_mod) {
     c86:	1ecb      	subs	r3, r1, #3
     c88:	2b04      	cmp	r3, #4
     c8a:	d813      	bhi.n	cb4 <CONFIG_ISR_STACK_SIZE+0x4b4>
     c8c:	e8df f003 	tbb	[pc, r3]
     c90:	120a0a03 	.word	0x120a0a03
     c94:	12          	.byte	0x12
     c95:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
     c96:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
     c98:	6822      	ldr	r2, [r4, #0]
     c9a:	1d20      	adds	r0, r4, #4
     c9c:	9216      	str	r2, [sp, #88]	; 0x58
     c9e:	9317      	str	r3, [sp, #92]	; 0x5c
					(uint_value_type)va_arg(ap, size_t);
     ca0:	4604      	mov	r4, r0
     ca2:	e7ca      	b.n	c3a <CONFIG_ISR_STACK_SIZE+0x43a>
					(uint_value_type)va_arg(ap,
     ca4:	3407      	adds	r4, #7
     ca6:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
     caa:	e8f0 2302 	ldrd	r2, r3, [r0], #8
     cae:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
				break;
     cb2:	e7f5      	b.n	ca0 <CONFIG_ISR_STACK_SIZE+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
     cb4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     cb8:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
     cba:	9316      	str	r3, [sp, #88]	; 0x58
     cbc:	f04f 0300 	mov.w	r3, #0
     cc0:	9317      	str	r3, [sp, #92]	; 0x5c
			if (length_mod == LENGTH_HH) {
     cc2:	d0d3      	beq.n	c6c <CONFIG_ISR_STACK_SIZE+0x46c>
			} else if (length_mod == LENGTH_H) {
     cc4:	2902      	cmp	r1, #2
     cc6:	d1b8      	bne.n	c3a <CONFIG_ISR_STACK_SIZE+0x43a>
				value->uint = (unsigned short)value->uint;
     cc8:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
     ccc:	e7d0      	b.n	c70 <CONFIG_ISR_STACK_SIZE+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
     cce:	2b04      	cmp	r3, #4
     cd0:	d107      	bne.n	ce2 <CONFIG_ISR_STACK_SIZE+0x4e2>
			if (length_mod == LENGTH_UPPER_L) {
     cd2:	3407      	adds	r4, #7
     cd4:	f024 0407 	bic.w	r4, r4, #7
     cd8:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
     cdc:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
     ce0:	e7ab      	b.n	c3a <CONFIG_ISR_STACK_SIZE+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
     ce2:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     ce4:	bf04      	itt	eq
     ce6:	f854 3b04 	ldreq.w	r3, [r4], #4
     cea:	9316      	streq	r3, [sp, #88]	; 0x58
     cec:	e7a5      	b.n	c3a <CONFIG_ISR_STACK_SIZE+0x43a>
		switch (conv->specifier) {
     cee:	f89d 9063 	ldrb.w	r9, [sp, #99]	; 0x63
     cf2:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
     cf6:	d8ae      	bhi.n	c56 <CONFIG_ISR_STACK_SIZE+0x456>
     cf8:	f1b9 0f57 	cmp.w	r9, #87	; 0x57
     cfc:	f200 80a7 	bhi.w	e4e <CONFIG_ISR_STACK_SIZE+0x64e>
     d00:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
     d04:	f000 80ee 	beq.w	ee4 <CONFIG_ISR_STACK_SIZE+0x6e4>
     d08:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
     d0c:	d9a3      	bls.n	c56 <CONFIG_ISR_STACK_SIZE+0x456>
     d0e:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
     d12:	d003      	beq.n	d1c <CONFIG_ISR_STACK_SIZE+0x51c>
     d14:	f1a9 0345 	sub.w	r3, r9, #69	; 0x45
     d18:	2b02      	cmp	r3, #2
     d1a:	d89c      	bhi.n	c56 <CONFIG_ISR_STACK_SIZE+0x456>
	} u = {
     d1c:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
	if ((u.u64 & SIGN_MASK) != 0U) {
     d20:	2a00      	cmp	r2, #0
     d22:	f173 0100 	sbcs.w	r1, r3, #0
     d26:	f2c0 81d5 	blt.w	10d4 <CONFIG_MAIN_STACK_SIZE+0xd4>
	} else if (conv->flag_plus) {
     d2a:	0731      	lsls	r1, r6, #28
     d2c:	f100 81d4 	bmi.w	10d8 <CONFIG_MAIN_STACK_SIZE+0xd8>
		*sign = ' ';
     d30:	f016 0610 	ands.w	r6, r6, #16
     d34:	bf18      	it	ne
     d36:	2620      	movne	r6, #32
	int exp = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
     d38:	f3c3 5b0a 	ubfx	fp, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
     d3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
     d40:	9206      	str	r2, [sp, #24]
     d42:	9307      	str	r3, [sp, #28]
     d44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     d48:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	bool is_subnormal = (exp == 0) && (fract != 0);
     d4c:	f1bb 0f00 	cmp.w	fp, #0
     d50:	f040 81c4 	bne.w	10dc <CONFIG_MAIN_STACK_SIZE+0xdc>
     d54:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
     d58:	4313      	orrs	r3, r2
     d5a:	bf14      	ite	ne
     d5c:	f04f 0c01 	movne.w	ip, #1
     d60:	f04f 0c00 	moveq.w	ip, #0
	if ((exp | fract) != 0) {
     d64:	4658      	mov	r0, fp
	fract <<= EXPONENT_BITS;
     d66:	9907      	ldr	r1, [sp, #28]
		c = 'f';
     d68:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
	fract <<= EXPONENT_BITS;
     d6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     d70:	9906      	ldr	r1, [sp, #24]
		c = 'f';
     d72:	bf08      	it	eq
     d74:	f04f 0966 	moveq.w	r9, #102	; 0x66
	fract <<= EXPONENT_BITS;
     d78:	02ca      	lsls	r2, r1, #11
     d7a:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
	if ((exp | fract) != 0) {
     d7e:	ea4b 0102 	orr.w	r1, fp, r2
     d82:	910c      	str	r1, [sp, #48]	; 0x30
     d84:	17c1      	asrs	r1, r0, #31
     d86:	4319      	orrs	r1, r3
     d88:	910d      	str	r1, [sp, #52]	; 0x34
     d8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
     d8e:	4301      	orrs	r1, r0
	fract &= ~SIGN_MASK;
     d90:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	if ((exp | fract) != 0) {
     d94:	f000 8215 	beq.w	11c2 <CONFIG_MAIN_STACK_SIZE+0x1c2>
		if (is_subnormal) {
     d98:	f1bc 0f00 	cmp.w	ip, #0
     d9c:	f040 81d5 	bne.w	114a <CONFIG_MAIN_STACK_SIZE+0x14a>
		fract |= BIT_63;
     da0:	9b12      	ldr	r3, [sp, #72]	; 0x48
		fract *= 5U;
     da2:	2105      	movs	r1, #5
		fract |= BIT_63;
     da4:	9304      	str	r3, [sp, #16]
     da6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
     da8:	f2ab 3bfe 	subw	fp, fp, #1022	; 0x3fe
		fract |= BIT_63;
     dac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     db0:	9305      	str	r3, [sp, #20]
     db2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
     db6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
     dba:	2300      	movs	r3, #0
     dbc:	461a      	mov	r2, r3
	while (exp < -2) {
     dbe:	f11b 0f02 	cmn.w	fp, #2
     dc2:	f2c0 81cb 	blt.w	115c <CONFIG_MAIN_STACK_SIZE+0x15c>
     dc6:	b11b      	cbz	r3, dd0 <CONFIG_ISR_STACK_SIZE+0x5d0>
     dc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
     dcc:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	while (exp > 0) {
     dd0:	e9dd 3112 	ldrd	r3, r1, [sp, #72]	; 0x48
     dd4:	f1bb 0f00 	cmp.w	fp, #0
     dd8:	f300 81db 	bgt.w	1192 <CONFIG_MAIN_STACK_SIZE+0x192>
	fract >>= (4 - exp);
     ddc:	9913      	ldr	r1, [sp, #76]	; 0x4c
     dde:	9b12      	ldr	r3, [sp, #72]	; 0x48
     de0:	f1cb 0004 	rsb	r0, fp, #4
     de4:	f10b 0b1c 	add.w	fp, fp, #28
     de8:	fa01 fb0b 	lsl.w	fp, r1, fp
     dec:	f1a0 0c20 	sub.w	ip, r0, #32
     df0:	40c3      	lsrs	r3, r0
     df2:	fa21 fc0c 	lsr.w	ip, r1, ip
     df6:	ea43 030b 	orr.w	r3, r3, fp
     dfa:	ea43 030c 	orr.w	r3, r3, ip
     dfe:	40c1      	lsrs	r1, r0
     e00:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
	if ((c == 'g') || (c == 'G')) {
     e04:	f009 03df 	and.w	r3, r9, #223	; 0xdf
     e08:	2b47      	cmp	r3, #71	; 0x47
     e0a:	f040 81e1 	bne.w	11d0 <CONFIG_MAIN_STACK_SIZE+0x1d0>
		if (decexp < (-4 + 1) || decexp > precision) {
     e0e:	1cd0      	adds	r0, r2, #3
     e10:	db02      	blt.n	e18 <CONFIG_ISR_STACK_SIZE+0x618>
     e12:	4297      	cmp	r7, r2
     e14:	f280 81d8 	bge.w	11c8 <CONFIG_MAIN_STACK_SIZE+0x1c8>
			c += 'e' - 'g';  /* e or E */
     e18:	f1a9 0902 	sub.w	r9, r9, #2
			if (precision > 0) {
     e1c:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
     e1e:	fa5f f989 	uxtb.w	r9, r9
			if (precision > 0) {
     e22:	dd00      	ble.n	e26 <CONFIG_ISR_STACK_SIZE+0x626>
				precision--;
     e24:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
     e26:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
     e2a:	0699      	lsls	r1, r3, #26
     e2c:	f100 81d0 	bmi.w	11d0 <CONFIG_MAIN_STACK_SIZE+0x1d0>
     e30:	2f00      	cmp	r7, #0
     e32:	bfd4      	ite	le
     e34:	2300      	movle	r3, #0
     e36:	2301      	movgt	r3, #1
	if (c == 'f') {
     e38:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
	bool prune_zero = false;
     e3c:	930e      	str	r3, [sp, #56]	; 0x38
	if (c == 'f') {
     e3e:	f040 81c9 	bne.w	11d4 <CONFIG_MAIN_STACK_SIZE+0x1d4>
		if (decimals < 0) {
     e42:	18bb      	adds	r3, r7, r2
     e44:	f140 81c7 	bpl.w	11d6 <CONFIG_MAIN_STACK_SIZE+0x1d6>
			decimals = 0;
     e48:	f04f 0a00 	mov.w	sl, #0
     e4c:	e1c7      	b.n	11de <CONFIG_MAIN_STACK_SIZE+0x1de>
     e4e:	f1a9 0358 	sub.w	r3, r9, #88	; 0x58
     e52:	2b20      	cmp	r3, #32
     e54:	f63f aeff 	bhi.w	c56 <CONFIG_ISR_STACK_SIZE+0x456>
     e58:	a201      	add	r2, pc, #4	; (adr r2, e60 <CONFIG_ISR_STACK_SIZE+0x660>)
     e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     e5e:	bf00      	nop
     e60:	00001075 	.word	0x00001075
     e64:	00000c57 	.word	0x00000c57
     e68:	00000c57 	.word	0x00000c57
     e6c:	00000c57 	.word	0x00000c57
     e70:	00000c57 	.word	0x00000c57
     e74:	00000c57 	.word	0x00000c57
     e78:	00000c57 	.word	0x00000c57
     e7c:	00000c57 	.word	0x00000c57
     e80:	00000c57 	.word	0x00000c57
     e84:	00000d1d 	.word	0x00000d1d
     e88:	00000c57 	.word	0x00000c57
     e8c:	00000f11 	.word	0x00000f11
     e90:	00001015 	.word	0x00001015
     e94:	00000d1d 	.word	0x00000d1d
     e98:	00000d1d 	.word	0x00000d1d
     e9c:	00000d1d 	.word	0x00000d1d
     ea0:	00000c57 	.word	0x00000c57
     ea4:	00001015 	.word	0x00001015
     ea8:	00000c57 	.word	0x00000c57
     eac:	00000c57 	.word	0x00000c57
     eb0:	00000c57 	.word	0x00000c57
     eb4:	00000c57 	.word	0x00000c57
     eb8:	000010ab 	.word	0x000010ab
     ebc:	00001075 	.word	0x00001075
     ec0:	00001079 	.word	0x00001079
     ec4:	00000c57 	.word	0x00000c57
     ec8:	00000c57 	.word	0x00000c57
     ecc:	00000eeb 	.word	0x00000eeb
     ed0:	00000c57 	.word	0x00000c57
     ed4:	00001075 	.word	0x00001075
     ed8:	00000c57 	.word	0x00000c57
     edc:	00000c57 	.word	0x00000c57
     ee0:	00001075 	.word	0x00001075
			OUTC('%');
     ee4:	4641      	mov	r1, r8
     ee6:	4648      	mov	r0, r9
     ee8:	e468      	b.n	7bc <cbvprintf+0x28>
			if (precision >= 0) {
     eea:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
     eec:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
			if (precision >= 0) {
     ef0:	db0a      	blt.n	f08 <CONFIG_ISR_STACK_SIZE+0x708>
				len = strnlen(bps, precision);
     ef2:	4639      	mov	r1, r7
     ef4:	4648      	mov	r0, r9
     ef6:	f004 ff21 	bl	5d3c <strnlen>
		char sign = 0;
     efa:	2600      	movs	r6, #0
			bpe = bps + len;
     efc:	eb09 0a00 	add.w	sl, r9, r0
		if (bps == NULL) {
     f00:	f1b9 0f00 	cmp.w	r9, #0
     f04:	d10c      	bne.n	f20 <CONFIG_ISR_STACK_SIZE+0x720>
     f06:	e6a6      	b.n	c56 <CONFIG_ISR_STACK_SIZE+0x456>
				len = strlen(bps);
     f08:	4648      	mov	r0, r9
     f0a:	f004 ff10 	bl	5d2e <strlen>
     f0e:	e7f4      	b.n	efa <CONFIG_ISR_STACK_SIZE+0x6fa>
		char sign = 0;
     f10:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     f12:	9b16      	ldr	r3, [sp, #88]	; 0x58
			bpe = buf + 1;
     f14:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     f18:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
				bps = encode_float(value->dbl, conv, precision,
     f1c:	f10d 0974 	add.w	r9, sp, #116	; 0x74
		size_t nj_len = (bpe - bps);
     f20:	ebaa 0209 	sub.w	r2, sl, r9
		if (sign != 0) {
     f24:	b106      	cbz	r6, f28 <CONFIG_ISR_STACK_SIZE+0x728>
			nj_len += 1U;
     f26:	3201      	adds	r2, #1
		if (conv->altform_0c) {
     f28:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
     f2c:	06c3      	lsls	r3, r0, #27
     f2e:	f140 824c 	bpl.w	13ca <CONFIG_MAIN_STACK_SIZE+0x3ca>
			nj_len += 2U;
     f32:	3202      	adds	r2, #2
		nj_len += conv->pad0_value;
     f34:	9919      	ldr	r1, [sp, #100]	; 0x64
		if (conv->pad_fp) {
     f36:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
     f38:	440a      	add	r2, r1
		if (width > 0) {
     f3a:	9b08      	ldr	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
     f3c:	bf44      	itt	mi
     f3e:	991a      	ldrmi	r1, [sp, #104]	; 0x68
     f40:	1852      	addmi	r2, r2, r1
		if (width > 0) {
     f42:	2b00      	cmp	r3, #0
     f44:	dd25      	ble.n	f92 <CONFIG_ISR_STACK_SIZE+0x792>
			width -= (int)nj_len;
     f46:	1a9b      	subs	r3, r3, r2
			if (!conv->flag_dash) {
     f48:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
     f4c:	0751      	lsls	r1, r2, #29
     f4e:	f3c2 0b80 	ubfx	fp, r2, #2, #1
     f52:	f100 824c 	bmi.w	13ee <CONFIG_MAIN_STACK_SIZE+0x3ee>
				if (conv->flag_zero) {
     f56:	0657      	lsls	r7, r2, #25
     f58:	f140 8245 	bpl.w	13e6 <CONFIG_MAIN_STACK_SIZE+0x3e6>
					if (sign != 0) {
     f5c:	2e00      	cmp	r6, #0
     f5e:	f000 8244 	beq.w	13ea <CONFIG_MAIN_STACK_SIZE+0x3ea>
     f62:	9308      	str	r3, [sp, #32]
						OUTC(sign);
     f64:	4641      	mov	r1, r8
     f66:	4630      	mov	r0, r6
     f68:	9b03      	ldr	r3, [sp, #12]
     f6a:	4798      	blx	r3
     f6c:	2800      	cmp	r0, #0
     f6e:	f2c0 8237 	blt.w	13e0 <CONFIG_MAIN_STACK_SIZE+0x3e0>
						sign = 0;
     f72:	465e      	mov	r6, fp
					pad = '0';
     f74:	2730      	movs	r7, #48	; 0x30
     f76:	9b08      	ldr	r3, [sp, #32]
						OUTC(sign);
     f78:	3501      	adds	r5, #1
					pad = '0';
     f7a:	9308      	str	r3, [sp, #32]
     f7c:	eb03 0b05 	add.w	fp, r3, r5
     f80:	9b08      	ldr	r3, [sp, #32]
     f82:	ebab 0503 	sub.w	r5, fp, r3
				while (width-- > 0) {
     f86:	2b00      	cmp	r3, #0
     f88:	f103 33ff 	add.w	r3, r3, #4294967295
     f8c:	9308      	str	r3, [sp, #32]
     f8e:	f300 8220 	bgt.w	13d2 <CONFIG_MAIN_STACK_SIZE+0x3d2>
		if (sign != 0) {
     f92:	b13e      	cbz	r6, fa4 <CONFIG_ISR_STACK_SIZE+0x7a4>
			OUTC(sign);
     f94:	4641      	mov	r1, r8
     f96:	4630      	mov	r0, r6
     f98:	9b03      	ldr	r3, [sp, #12]
     f9a:	4798      	blx	r3
     f9c:	2800      	cmp	r0, #0
     f9e:	f2c0 821f 	blt.w	13e0 <CONFIG_MAIN_STACK_SIZE+0x3e0>
     fa2:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
     fa4:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
     fa8:	0656      	lsls	r6, r2, #25
     faa:	f140 827e 	bpl.w	14aa <CONFIG_MAIN_STACK_SIZE+0x4aa>
			if (conv->specifier_a) {
     fae:	f99d 2061 	ldrsb.w	r2, [sp, #97]	; 0x61
     fb2:	2a00      	cmp	r2, #0
     fb4:	f2c0 821d 	blt.w	13f2 <CONFIG_MAIN_STACK_SIZE+0x3f2>
     fb8:	eba5 0509 	sub.w	r5, r5, r9
				while (isdigit((int)*cp)) {
     fbc:	f899 0000 	ldrb.w	r0, [r9]
     fc0:	464f      	mov	r7, r9
     fc2:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
     fc6:	2a09      	cmp	r2, #9
     fc8:	eb05 0b09 	add.w	fp, r5, r9
     fcc:	f109 0901 	add.w	r9, r9, #1
     fd0:	f240 823f 	bls.w	1452 <CONFIG_MAIN_STACK_SIZE+0x452>
				if (!conv->pad_postdp) {
     fd4:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
				pad_len = conv->pad0_value;
     fd8:	9e19      	ldr	r6, [sp, #100]	; 0x64
				if (!conv->pad_postdp) {
     fda:	0690      	lsls	r0, r2, #26
     fdc:	d408      	bmi.n	ff0 <CONFIG_ISR_STACK_SIZE+0x7f0>
     fde:	eb06 090b 	add.w	r9, r6, fp
					while (pad_len-- > 0) {
     fe2:	2e00      	cmp	r6, #0
     fe4:	eba9 0b06 	sub.w	fp, r9, r6
     fe8:	f106 36ff 	add.w	r6, r6, #4294967295
     fec:	f300 8238 	bgt.w	1460 <CONFIG_MAIN_STACK_SIZE+0x460>
				if (*cp == '.') {
     ff0:	7838      	ldrb	r0, [r7, #0]
     ff2:	282e      	cmp	r0, #46	; 0x2e
     ff4:	d10b      	bne.n	100e <CONFIG_MAIN_STACK_SIZE+0xe>
					OUTC(*cp++);
     ff6:	4641      	mov	r1, r8
     ff8:	9b03      	ldr	r3, [sp, #12]
     ffa:	4798      	blx	r3
						OUTC('0');
     ffc:	2800      	cmp	r0, #0
     ffe:	f2c0 81ef 	blt.w	13e0 <CONFIG_MAIN_STACK_SIZE+0x3e0>
					while (pad_len-- > 0) {
    1002:	2e00      	cmp	r6, #0
						OUTC('0');
    1004:	f10b 0b01 	add.w	fp, fp, #1
					while (pad_len-- > 0) {
    1008:	f300 8232 	bgt.w	1470 <CONFIG_MAIN_STACK_SIZE+0x470>
					OUTC(*cp++);
    100c:	3701      	adds	r7, #1
    100e:	ebab 0b07 	sub.w	fp, fp, r7
    1012:	e238      	b.n	1486 <CONFIG_MAIN_STACK_SIZE+0x486>
			if (conv->flag_plus) {
    1014:	0730      	lsls	r0, r6, #28
    1016:	d42b      	bmi.n	1070 <CONFIG_MAIN_STACK_SIZE+0x70>
				sign = ' ';
    1018:	f016 0610 	ands.w	r6, r6, #16
    101c:	bf18      	it	ne
    101e:	2620      	movne	r6, #32
			if (value->sint < 0) {
    1020:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    1024:	2a00      	cmp	r2, #0
    1026:	f173 0100 	sbcs.w	r1, r3, #0
    102a:	da05      	bge.n	1038 <CONFIG_MAIN_STACK_SIZE+0x38>
				sign = '-';
    102c:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
    102e:	4252      	negs	r2, r2
    1030:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1034:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
			bps = encode_uint(value->uint, conv, buf, bpe);
    1038:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    103c:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
    1040:	9300      	str	r3, [sp, #0]
    1042:	aa18      	add	r2, sp, #96	; 0x60
    1044:	ab1d      	add	r3, sp, #116	; 0x74
    1046:	f004 fcca 	bl	59de <encode_uint>
    104a:	4681      	mov	r9, r0
			if (precision >= 0) {
    104c:	2f00      	cmp	r7, #0
    104e:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
    1052:	db0b      	blt.n	106c <CONFIG_MAIN_STACK_SIZE+0x6c>
				conv->flag_zero = false;
    1054:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
				size_t len = bpe - bps;
    1058:	eba3 0209 	sub.w	r2, r3, r9
				conv->flag_zero = false;
    105c:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    1060:	4297      	cmp	r7, r2
				conv->flag_zero = false;
    1062:	f88d 1060 	strb.w	r1, [sp, #96]	; 0x60
				if (len < (size_t)precision) {
    1066:	d901      	bls.n	106c <CONFIG_MAIN_STACK_SIZE+0x6c>
					conv->pad0_value = precision - (int)len;
    1068:	1abf      	subs	r7, r7, r2
    106a:	9719      	str	r7, [sp, #100]	; 0x64
		const char *bpe = buf + sizeof(buf);
    106c:	469a      	mov	sl, r3
    106e:	e747      	b.n	f00 <CONFIG_ISR_STACK_SIZE+0x700>
				sign = '+';
    1070:	262b      	movs	r6, #43	; 0x2b
    1072:	e7d5      	b.n	1020 <CONFIG_MAIN_STACK_SIZE+0x20>
		switch (conv->specifier) {
    1074:	2600      	movs	r6, #0
    1076:	e7df      	b.n	1038 <CONFIG_MAIN_STACK_SIZE+0x38>
			if (value->ptr != NULL) {
    1078:	9816      	ldr	r0, [sp, #88]	; 0x58
    107a:	2800      	cmp	r0, #0
    107c:	f000 819f 	beq.w	13be <CONFIG_MAIN_STACK_SIZE+0x3be>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1080:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
    1084:	9300      	str	r3, [sp, #0]
    1086:	2100      	movs	r1, #0
    1088:	ab1d      	add	r3, sp, #116	; 0x74
    108a:	aa18      	add	r2, sp, #96	; 0x60
    108c:	f004 fca7 	bl	59de <encode_uint>
				conv->altform_0c = true;
    1090:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1094:	4681      	mov	r9, r0
				conv->altform_0c = true;
    1096:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    109a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    109e:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    10a2:	2600      	movs	r6, #0
				conv->altform_0c = true;
    10a4:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
				goto prec_int_pad0;
    10a8:	e7d0      	b.n	104c <CONFIG_MAIN_STACK_SIZE+0x4c>
				store_count(conv, value->ptr, count);
    10aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
	switch ((enum length_mod_enum)conv->length_mod) {
    10ac:	2907      	cmp	r1, #7
    10ae:	f63f add2 	bhi.w	c56 <CONFIG_ISR_STACK_SIZE+0x456>
    10b2:	e8df f001 	tbb	[pc, r1]
    10b6:	040d      	.short	0x040d
    10b8:	08080d06 	.word	0x08080d06
    10bc:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    10be:	701d      	strb	r5, [r3, #0]
		break;
    10c0:	e5c9      	b.n	c56 <CONFIG_ISR_STACK_SIZE+0x456>
		*(short *)dp = (short)count;
    10c2:	801d      	strh	r5, [r3, #0]
		break;
    10c4:	e5c7      	b.n	c56 <CONFIG_ISR_STACK_SIZE+0x456>
		*(intmax_t *)dp = (intmax_t)count;
    10c6:	4628      	mov	r0, r5
    10c8:	17e9      	asrs	r1, r5, #31
    10ca:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    10ce:	e5c2      	b.n	c56 <CONFIG_ISR_STACK_SIZE+0x456>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    10d0:	601d      	str	r5, [r3, #0]
		break;
    10d2:	e5c0      	b.n	c56 <CONFIG_ISR_STACK_SIZE+0x456>
		*sign = '-';
    10d4:	262d      	movs	r6, #45	; 0x2d
    10d6:	e62f      	b.n	d38 <CONFIG_ISR_STACK_SIZE+0x538>
		*sign = '+';
    10d8:	262b      	movs	r6, #43	; 0x2b
    10da:	e62d      	b.n	d38 <CONFIG_ISR_STACK_SIZE+0x538>
	if (exp == BIT_MASK(EXPONENT_BITS)) {
    10dc:	f240 73ff 	movw	r3, #2047	; 0x7ff
    10e0:	459b      	cmp	fp, r3
    10e2:	d12d      	bne.n	1140 <CONFIG_MAIN_STACK_SIZE+0x140>
		if (fract == 0) {
    10e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    10e8:	4313      	orrs	r3, r2
    10ea:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
    10ee:	d118      	bne.n	1122 <CONFIG_MAIN_STACK_SIZE+0x122>
			if (isupper((int)c)) {
    10f0:	f1b9 0f19 	cmp.w	r9, #25
				*buf++ = 'I';
    10f4:	bf95      	itete	ls
    10f6:	f644 6349 	movwls	r3, #20041	; 0x4e49
				*buf++ = 'i';
    10fa:	f646 6369 	movwhi	r3, #28265	; 0x6e69
				*buf++ = 'I';
    10fe:	f8ad 3074 	strhls.w	r3, [sp, #116]	; 0x74
				*buf++ = 'i';
    1102:	f8ad 3074 	strhhi.w	r3, [sp, #116]	; 0x74
				*buf++ = 'F';
    1106:	bf94      	ite	ls
    1108:	2346      	movls	r3, #70	; 0x46
				*buf++ = 'f';
    110a:	2366      	movhi	r3, #102	; 0x66
				*buf++ = 'n';
    110c:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
		conv->flag_zero = false;
    1110:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
		*bpe = buf;
    1114:	f10d 0a77 	add.w	sl, sp, #119	; 0x77
		conv->flag_zero = false;
    1118:	f36f 1386 	bfc	r3, #6, #1
    111c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
		return bps;
    1120:	e6fc      	b.n	f1c <CONFIG_ISR_STACK_SIZE+0x71c>
			if (isupper((int)c)) {
    1122:	f1b9 0f19 	cmp.w	r9, #25
				*buf++ = 'N';
    1126:	bf95      	itete	ls
    1128:	f244 134e 	movwls	r3, #16718	; 0x414e
				*buf++ = 'n';
    112c:	f246 136e 	movwhi	r3, #24942	; 0x616e
				*buf++ = 'N';
    1130:	f8ad 3074 	strhls.w	r3, [sp, #116]	; 0x74
				*buf++ = 'n';
    1134:	f8ad 3074 	strhhi.w	r3, [sp, #116]	; 0x74
				*buf++ = 'N';
    1138:	bf94      	ite	ls
    113a:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'n';
    113c:	236e      	movhi	r3, #110	; 0x6e
    113e:	e7e5      	b.n	110c <CONFIG_MAIN_STACK_SIZE+0x10c>
	bool is_subnormal = (exp == 0) && (fract != 0);
    1140:	f04f 0c00 	mov.w	ip, #0
    1144:	e60e      	b.n	d64 <CONFIG_ISR_STACK_SIZE+0x564>
				exp--;
    1146:	f10b 3bff 	add.w	fp, fp, #4294967295
			while (((fract <<= 1) & BIT_63) == 0) {
    114a:	1892      	adds	r2, r2, r2
    114c:	415b      	adcs	r3, r3
    114e:	2a00      	cmp	r2, #0
    1150:	f173 0100 	sbcs.w	r1, r3, #0
    1154:	daf7      	bge.n	1146 <CONFIG_MAIN_STACK_SIZE+0x146>
    1156:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    115a:	e621      	b.n	da0 <CONFIG_ISR_STACK_SIZE+0x5a0>
			fract >>= 1;
    115c:	9b04      	ldr	r3, [sp, #16]
    115e:	9805      	ldr	r0, [sp, #20]
    1160:	085b      	lsrs	r3, r3, #1
    1162:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    1166:	0840      	lsrs	r0, r0, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    1168:	f1b0 3f33 	cmp.w	r0, #858993459	; 0x33333333
    116c:	46dc      	mov	ip, fp
			fract >>= 1;
    116e:	e9cd 3004 	strd	r3, r0, [sp, #16]
			exp++;
    1172:	f10b 0b01 	add.w	fp, fp, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    1176:	d2f1      	bcs.n	115c <CONFIG_MAIN_STACK_SIZE+0x15c>
		fract *= 5U;
    1178:	fba3 ab01 	umull	sl, fp, r3, r1
    117c:	4348      	muls	r0, r1
    117e:	e9cd ab04 	strd	sl, fp, [sp, #16]
    1182:	9b05      	ldr	r3, [sp, #20]
		exp++;
    1184:	f10c 0b02 	add.w	fp, ip, #2
		fract *= 5U;
    1188:	18c3      	adds	r3, r0, r3
    118a:	9305      	str	r3, [sp, #20]
		decexp--;
    118c:	3a01      	subs	r2, #1
    118e:	2301      	movs	r3, #1
    1190:	e615      	b.n	dbe <CONFIG_ISR_STACK_SIZE+0x5be>
		fract += 2;
    1192:	3302      	adds	r3, #2
    1194:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    1198:	a812      	add	r0, sp, #72	; 0x48
		fract += 2;
    119a:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
    119e:	920e      	str	r2, [sp, #56]	; 0x38
		_ldiv5(&fract);
    11a0:	f004 fbe7 	bl	5972 <_ldiv5>
		exp--;
    11a4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
		decexp++;
    11a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		exp--;
    11aa:	f10b 3bff 	add.w	fp, fp, #4294967295
		decexp++;
    11ae:	3201      	adds	r2, #1
			fract <<= 1;
    11b0:	1800      	adds	r0, r0, r0
    11b2:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    11b4:	2800      	cmp	r0, #0
    11b6:	f171 0300 	sbcs.w	r3, r1, #0
			exp--;
    11ba:	f10b 3bff 	add.w	fp, fp, #4294967295
		} while (!(fract & BIT_63));
    11be:	daf7      	bge.n	11b0 <CONFIG_MAIN_STACK_SIZE+0x1b0>
    11c0:	e604      	b.n	dcc <CONFIG_ISR_STACK_SIZE+0x5cc>
    11c2:	2200      	movs	r2, #0
    11c4:	4693      	mov	fp, r2
    11c6:	e609      	b.n	ddc <CONFIG_ISR_STACK_SIZE+0x5dc>
			c = 'f';
    11c8:	f04f 0966 	mov.w	r9, #102	; 0x66
			precision -= decexp;
    11cc:	1abf      	subs	r7, r7, r2
    11ce:	e62a      	b.n	e26 <CONFIG_ISR_STACK_SIZE+0x626>
	bool prune_zero = false;
    11d0:	2300      	movs	r3, #0
    11d2:	e631      	b.n	e38 <CONFIG_ISR_STACK_SIZE+0x638>
		decimals = precision + 1;
    11d4:	1c7b      	adds	r3, r7, #1
	if (decimals > 16) {
    11d6:	2b10      	cmp	r3, #16
    11d8:	bfa8      	it	ge
    11da:	2310      	movge	r3, #16
    11dc:	469a      	mov	sl, r3
    11de:	2110      	movs	r1, #16
	uint64_t round = BIT64(59); /* 0.5 */
    11e0:	2000      	movs	r0, #0
    11e2:	9111      	str	r1, [sp, #68]	; 0x44
    11e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    11e8:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	while (decimals--) {
    11ec:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
    11f0:	f10a 3aff 	add.w	sl, sl, #4294967295
    11f4:	f1ba 3fff 	cmp.w	sl, #4294967295
    11f8:	d11f      	bne.n	123a <CONFIG_MAIN_STACK_SIZE+0x23a>
	fract += round;
    11fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    11fc:	18cb      	adds	r3, r1, r3
    11fe:	930a      	str	r3, [sp, #40]	; 0x28
    1200:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	if (fract >= BIT64(60)) {
    1202:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
	fract += round;
    1206:	eb40 0303 	adc.w	r3, r0, r3
	if (fract >= BIT64(60)) {
    120a:	f04f 30ff 	mov.w	r0, #4294967295
	fract += round;
    120e:	930b      	str	r3, [sp, #44]	; 0x2c
	if (fract >= BIT64(60)) {
    1210:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    1214:	4559      	cmp	r1, fp
    1216:	bf08      	it	eq
    1218:	4550      	cmpeq	r0, sl
    121a:	d31a      	bcc.n	1252 <CONFIG_MAIN_STACK_SIZE+0x252>
	fract += round;
    121c:	4650      	mov	r0, sl
    121e:	4659      	mov	r1, fp
    1220:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	if (c == 'f') {
    1224:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
    1228:	d153      	bne.n	12d2 <CONFIG_MAIN_STACK_SIZE+0x2d2>
		if (decexp > 0) {
    122a:	2a00      	cmp	r2, #0
    122c:	dc20      	bgt.n	1270 <CONFIG_MAIN_STACK_SIZE+0x270>
			*buf++ = '0';
    122e:	2330      	movs	r3, #48	; 0x30
    1230:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
    1234:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    1238:	e02b      	b.n	1292 <CONFIG_MAIN_STACK_SIZE+0x292>
	*v >>= 1;
    123a:	0849      	lsrs	r1, r1, #1
    123c:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    1240:	0840      	lsrs	r0, r0, #1
    1242:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
	_ldiv5(v);
    1246:	a814      	add	r0, sp, #80	; 0x50
    1248:	920f      	str	r2, [sp, #60]	; 0x3c
    124a:	f004 fb92 	bl	5972 <_ldiv5>
    124e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
}
    1250:	e7cc      	b.n	11ec <CONFIG_MAIN_STACK_SIZE+0x1ec>
	*v >>= 1;
    1252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1254:	920f      	str	r2, [sp, #60]	; 0x3c
    1256:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1258:	085b      	lsrs	r3, r3, #1
    125a:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
    125e:	0851      	lsrs	r1, r2, #1
	_ldiv5(v);
    1260:	a812      	add	r0, sp, #72	; 0x48
	*v >>= 1;
    1262:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
	_ldiv5(v);
    1266:	f004 fb84 	bl	5972 <_ldiv5>
		decexp++;
    126a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    126c:	3201      	adds	r2, #1
    126e:	e7d9      	b.n	1224 <CONFIG_MAIN_STACK_SIZE+0x224>
	char *buf = bps;
    1270:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
			while (decexp > 0 && digit_count > 0) {
    1274:	9911      	ldr	r1, [sp, #68]	; 0x44
    1276:	2900      	cmp	r1, #0
    1278:	dd09      	ble.n	128e <CONFIG_MAIN_STACK_SIZE+0x28e>
				*buf++ = _get_digit(&fract, &digit_count);
    127a:	a911      	add	r1, sp, #68	; 0x44
    127c:	a812      	add	r0, sp, #72	; 0x48
    127e:	920f      	str	r2, [sp, #60]	; 0x3c
    1280:	f004 fb96 	bl	59b0 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    1284:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
				*buf++ = _get_digit(&fract, &digit_count);
    1286:	f80a 0b01 	strb.w	r0, [sl], #1
			while (decexp > 0 && digit_count > 0) {
    128a:	3a01      	subs	r2, #1
    128c:	d1f2      	bne.n	1274 <CONFIG_MAIN_STACK_SIZE+0x274>
			conv->pad0_value = decexp;
    128e:	9219      	str	r2, [sp, #100]	; 0x64
			decexp = 0;
    1290:	2200      	movs	r2, #0
		if (conv->flag_hash || (precision > 0)) {
    1292:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
    1296:	0688      	lsls	r0, r1, #26
    1298:	d401      	bmi.n	129e <CONFIG_MAIN_STACK_SIZE+0x29e>
    129a:	2f00      	cmp	r7, #0
    129c:	dd3f      	ble.n	131e <CONFIG_MAIN_STACK_SIZE+0x31e>
			*buf++ = '.';
    129e:	4653      	mov	r3, sl
    12a0:	212e      	movs	r1, #46	; 0x2e
    12a2:	f803 1b01 	strb.w	r1, [r3], #1
		if (decexp < 0 && precision > 0) {
    12a6:	b192      	cbz	r2, 12ce <CONFIG_MAIN_STACK_SIZE+0x2ce>
    12a8:	2f00      	cmp	r7, #0
    12aa:	dd76      	ble.n	139a <CONFIG_MAIN_STACK_SIZE+0x39a>
			conv->pad0_value = -decexp;
    12ac:	4251      	negs	r1, r2
    12ae:	42b9      	cmp	r1, r7
    12b0:	bfa8      	it	ge
    12b2:	4639      	movge	r1, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    12b4:	2900      	cmp	r1, #0
			conv->pad0_value = -decexp;
    12b6:	9119      	str	r1, [sp, #100]	; 0x64
			precision -= conv->pad0_value;
    12b8:	eba7 0701 	sub.w	r7, r7, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    12bc:	bfd4      	ite	le
    12be:	2100      	movle	r1, #0
    12c0:	2101      	movgt	r1, #1
    12c2:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    12c6:	f361 1045 	bfi	r0, r1, #5, #1
    12ca:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
			*buf++ = '.';
    12ce:	469a      	mov	sl, r3
    12d0:	e020      	b.n	1314 <CONFIG_MAIN_STACK_SIZE+0x314>
		*buf = _get_digit(&fract, &digit_count);
    12d2:	a911      	add	r1, sp, #68	; 0x44
    12d4:	a812      	add	r0, sp, #72	; 0x48
    12d6:	920f      	str	r2, [sp, #60]	; 0x3c
    12d8:	f004 fb6a 	bl	59b0 <_get_digit>
		if (*buf++ != '0') {
    12dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		if (conv->flag_hash || (precision > 0)) {
    12de:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
		if (*buf++ != '0') {
    12e2:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    12e4:	bf18      	it	ne
    12e6:	f102 32ff 	addne.w	r2, r2, #4294967295
		if (conv->flag_hash || (precision > 0)) {
    12ea:	0699      	lsls	r1, r3, #26
		*buf = _get_digit(&fract, &digit_count);
    12ec:	f88d 0074 	strb.w	r0, [sp, #116]	; 0x74
		if (conv->flag_hash || (precision > 0)) {
    12f0:	d401      	bmi.n	12f6 <CONFIG_MAIN_STACK_SIZE+0x2f6>
    12f2:	2f00      	cmp	r7, #0
    12f4:	dd53      	ble.n	139e <CONFIG_MAIN_STACK_SIZE+0x39e>
			*buf++ = '.';
    12f6:	232e      	movs	r3, #46	; 0x2e
    12f8:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    12fc:	f10d 0376 	add.w	r3, sp, #118	; 0x76
    1300:	e7e5      	b.n	12ce <CONFIG_MAIN_STACK_SIZE+0x2ce>
		*buf++ = _get_digit(&fract, &digit_count);
    1302:	a911      	add	r1, sp, #68	; 0x44
    1304:	a812      	add	r0, sp, #72	; 0x48
    1306:	920f      	str	r2, [sp, #60]	; 0x3c
    1308:	f004 fb52 	bl	59b0 <_get_digit>
    130c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    130e:	f80a 0b01 	strb.w	r0, [sl], #1
		precision--;
    1312:	3f01      	subs	r7, #1
	while (precision > 0 && digit_count > 0) {
    1314:	2f00      	cmp	r7, #0
    1316:	dd02      	ble.n	131e <CONFIG_MAIN_STACK_SIZE+0x31e>
    1318:	9911      	ldr	r1, [sp, #68]	; 0x44
    131a:	2900      	cmp	r1, #0
    131c:	dcf1      	bgt.n	1302 <CONFIG_MAIN_STACK_SIZE+0x302>
	if (prune_zero) {
    131e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1320:	2b00      	cmp	r3, #0
    1322:	d13f      	bne.n	13a4 <CONFIG_MAIN_STACK_SIZE+0x3a4>
	conv->pad0_pre_exp = precision;
    1324:	971a      	str	r7, [sp, #104]	; 0x68
	if ((c == 'e') || (c == 'E')) {
    1326:	f009 01df 	and.w	r1, r9, #223	; 0xdf
    132a:	2945      	cmp	r1, #69	; 0x45
    132c:	d123      	bne.n	1376 <CONFIG_MAIN_STACK_SIZE+0x376>
		if (decexp < 0) {
    132e:	2a00      	cmp	r2, #0
			*buf++ = '-';
    1330:	bfb4      	ite	lt
    1332:	212d      	movlt	r1, #45	; 0x2d
			*buf++ = '+';
    1334:	212b      	movge	r1, #43	; 0x2b
		*buf++ = c;
    1336:	4650      	mov	r0, sl
			decexp = -decexp;
    1338:	bfb8      	it	lt
    133a:	4252      	neglt	r2, r2
		if (decexp >= 100) {
    133c:	2a63      	cmp	r2, #99	; 0x63
		*buf++ = c;
    133e:	f800 9b02 	strb.w	r9, [r0], #2
			*buf++ = '-';
    1342:	f88a 1001 	strb.w	r1, [sl, #1]
		if (decexp >= 100) {
    1346:	dd0a      	ble.n	135e <CONFIG_MAIN_STACK_SIZE+0x35e>
			*buf++ = (decexp / 100) + '0';
    1348:	2764      	movs	r7, #100	; 0x64
    134a:	fb92 f1f7 	sdiv	r1, r2, r7
			decexp %= 100;
    134e:	fb07 2211 	mls	r2, r7, r1, r2
			*buf++ = (decexp / 100) + '0';
    1352:	f101 0c30 	add.w	ip, r1, #48	; 0x30
    1356:	f10a 0003 	add.w	r0, sl, #3
    135a:	f88a c002 	strb.w	ip, [sl, #2]
		*buf++ = (decexp / 10) + '0';
    135e:	270a      	movs	r7, #10
    1360:	fb92 f1f7 	sdiv	r1, r2, r7
    1364:	4682      	mov	sl, r0
		*buf++ = (decexp % 10) + '0';
    1366:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
    136a:	f101 0c30 	add.w	ip, r1, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    136e:	3230      	adds	r2, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    1370:	f80a cb02 	strb.w	ip, [sl], #2
		*buf++ = (decexp % 10) + '0';
    1374:	7042      	strb	r2, [r0, #1]
		|| (conv->pad0_pre_exp > 0);
    1376:	9a19      	ldr	r2, [sp, #100]	; 0x64
    1378:	2a00      	cmp	r2, #0
    137a:	dc1e      	bgt.n	13ba <CONFIG_MAIN_STACK_SIZE+0x3ba>
    137c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    137e:	2a00      	cmp	r2, #0
    1380:	bfd4      	ite	le
    1382:	2200      	movle	r2, #0
    1384:	2201      	movgt	r2, #1
	conv->pad_fp = (conv->pad0_value > 0)
    1386:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
    138a:	f362 1186 	bfi	r1, r2, #6, #1
	*buf = 0;
    138e:	2200      	movs	r2, #0
	conv->pad_fp = (conv->pad0_value > 0)
    1390:	f88d 1062 	strb.w	r1, [sp, #98]	; 0x62
	*buf = 0;
    1394:	f88a 2000 	strb.w	r2, [sl]
	return bps;
    1398:	e5c0      	b.n	f1c <CONFIG_ISR_STACK_SIZE+0x71c>
			*buf++ = '.';
    139a:	469a      	mov	sl, r3
    139c:	e7bf      	b.n	131e <CONFIG_MAIN_STACK_SIZE+0x31e>
		if (*buf++ != '0') {
    139e:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
    13a2:	e7bc      	b.n	131e <CONFIG_MAIN_STACK_SIZE+0x31e>
		conv->pad0_pre_exp = 0;
    13a4:	2100      	movs	r1, #0
    13a6:	911a      	str	r1, [sp, #104]	; 0x68
		while (*--buf == '0') {
    13a8:	4650      	mov	r0, sl
    13aa:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
    13ae:	2930      	cmp	r1, #48	; 0x30
    13b0:	d0fa      	beq.n	13a8 <CONFIG_MAIN_STACK_SIZE+0x3a8>
		if (*buf != '.') {
    13b2:	292e      	cmp	r1, #46	; 0x2e
    13b4:	bf18      	it	ne
    13b6:	4682      	movne	sl, r0
    13b8:	e7b5      	b.n	1326 <CONFIG_MAIN_STACK_SIZE+0x326>
		|| (conv->pad0_pre_exp > 0);
    13ba:	2201      	movs	r2, #1
    13bc:	e7e3      	b.n	1386 <CONFIG_MAIN_STACK_SIZE+0x386>
			bpe = bps + 5;
    13be:	f8df a13c 	ldr.w	sl, [pc, #316]	; 14fc <CONFIG_MAIN_STACK_SIZE+0x4fc>
		char sign = 0;
    13c2:	4606      	mov	r6, r0
			bps = "(nil)";
    13c4:	f1aa 0905 	sub.w	r9, sl, #5
    13c8:	e5aa      	b.n	f20 <CONFIG_ISR_STACK_SIZE+0x720>
		} else if (conv->altform_0) {
    13ca:	0707      	lsls	r7, r0, #28
			nj_len += 1U;
    13cc:	bf48      	it	mi
    13ce:	3201      	addmi	r2, #1
    13d0:	e5b0      	b.n	f34 <CONFIG_ISR_STACK_SIZE+0x734>
					OUTC(pad);
    13d2:	4641      	mov	r1, r8
    13d4:	4638      	mov	r0, r7
    13d6:	9b03      	ldr	r3, [sp, #12]
    13d8:	4798      	blx	r3
    13da:	2800      	cmp	r0, #0
    13dc:	f6bf add0 	bge.w	f80 <CONFIG_ISR_STACK_SIZE+0x780>
#undef OUTS
#undef OUTC
}
    13e0:	b025      	add	sp, #148	; 0x94
    13e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    13e6:	2720      	movs	r7, #32
    13e8:	e5c7      	b.n	f7a <CONFIG_ISR_STACK_SIZE+0x77a>
					pad = '0';
    13ea:	2730      	movs	r7, #48	; 0x30
    13ec:	e5c5      	b.n	f7a <CONFIG_ISR_STACK_SIZE+0x77a>
			width -= (int)nj_len;
    13ee:	9308      	str	r3, [sp, #32]
    13f0:	e5cf      	b.n	f92 <CONFIG_ISR_STACK_SIZE+0x792>
    13f2:	eba5 0b09 	sub.w	fp, r5, r9
    13f6:	464e      	mov	r6, r9
    13f8:	eb0b 0509 	add.w	r5, fp, r9
				while (*cp != 'p') {
    13fc:	f819 0b01 	ldrb.w	r0, [r9], #1
    1400:	2870      	cmp	r0, #112	; 0x70
    1402:	d120      	bne.n	1446 <CONFIG_MAIN_STACK_SIZE+0x446>
			while (pad_len-- > 0) {
    1404:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    1406:	eb02 0905 	add.w	r9, r2, r5
    140a:	eba9 0205 	sub.w	r2, r9, r5
    140e:	2a00      	cmp	r2, #0
    1410:	dc43      	bgt.n	149a <CONFIG_MAIN_STACK_SIZE+0x49a>
			OUTS(cp, bpe);
    1412:	4653      	mov	r3, sl
    1414:	4632      	mov	r2, r6
			OUTS(bps, bpe);
    1416:	4641      	mov	r1, r8
    1418:	9803      	ldr	r0, [sp, #12]
    141a:	f004 fb2b 	bl	5a74 <outs>
    141e:	2800      	cmp	r0, #0
    1420:	dbde      	blt.n	13e0 <CONFIG_MAIN_STACK_SIZE+0x3e0>
    1422:	9b08      	ldr	r3, [sp, #32]
    1424:	4428      	add	r0, r5
    1426:	4403      	add	r3, r0
			while (pad_len-- > 0) {
    1428:	4605      	mov	r5, r0
    142a:	469a      	mov	sl, r3
		while (width > 0) {
    142c:	ebaa 0305 	sub.w	r3, sl, r5
    1430:	2b00      	cmp	r3, #0
    1432:	f77f ac10 	ble.w	c56 <CONFIG_ISR_STACK_SIZE+0x456>
			OUTC(' ');
    1436:	4641      	mov	r1, r8
    1438:	2020      	movs	r0, #32
    143a:	9b03      	ldr	r3, [sp, #12]
    143c:	4798      	blx	r3
    143e:	2800      	cmp	r0, #0
    1440:	dbce      	blt.n	13e0 <CONFIG_MAIN_STACK_SIZE+0x3e0>
    1442:	3501      	adds	r5, #1
			--width;
    1444:	e7f2      	b.n	142c <CONFIG_MAIN_STACK_SIZE+0x42c>
					OUTC(*cp++);
    1446:	4641      	mov	r1, r8
    1448:	9b03      	ldr	r3, [sp, #12]
    144a:	4798      	blx	r3
    144c:	2800      	cmp	r0, #0
    144e:	dad2      	bge.n	13f6 <CONFIG_MAIN_STACK_SIZE+0x3f6>
    1450:	e7c6      	b.n	13e0 <CONFIG_MAIN_STACK_SIZE+0x3e0>
					OUTC(*cp++);
    1452:	4641      	mov	r1, r8
    1454:	9b03      	ldr	r3, [sp, #12]
    1456:	4798      	blx	r3
    1458:	2800      	cmp	r0, #0
    145a:	f6bf adaf 	bge.w	fbc <CONFIG_ISR_STACK_SIZE+0x7bc>
    145e:	e7bf      	b.n	13e0 <CONFIG_MAIN_STACK_SIZE+0x3e0>
						OUTC('0');
    1460:	4641      	mov	r1, r8
    1462:	2030      	movs	r0, #48	; 0x30
    1464:	9b03      	ldr	r3, [sp, #12]
    1466:	4798      	blx	r3
    1468:	2800      	cmp	r0, #0
    146a:	f6bf adba 	bge.w	fe2 <CONFIG_ISR_STACK_SIZE+0x7e2>
    146e:	e7b7      	b.n	13e0 <CONFIG_MAIN_STACK_SIZE+0x3e0>
						OUTC('0');
    1470:	4641      	mov	r1, r8
    1472:	2030      	movs	r0, #48	; 0x30
    1474:	9b03      	ldr	r3, [sp, #12]
    1476:	4798      	blx	r3
    1478:	3e01      	subs	r6, #1
    147a:	e5bf      	b.n	ffc <CONFIG_ISR_STACK_SIZE+0x7fc>
					OUTC(*cp++);
    147c:	4641      	mov	r1, r8
    147e:	9b03      	ldr	r3, [sp, #12]
    1480:	4798      	blx	r3
    1482:	2800      	cmp	r0, #0
    1484:	dbac      	blt.n	13e0 <CONFIG_MAIN_STACK_SIZE+0x3e0>
    1486:	463e      	mov	r6, r7
    1488:	eb0b 0507 	add.w	r5, fp, r7
				while (isdigit((int)*cp)) {
    148c:	f817 0b01 	ldrb.w	r0, [r7], #1
    1490:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    1494:	2a09      	cmp	r2, #9
    1496:	d9f1      	bls.n	147c <CONFIG_MAIN_STACK_SIZE+0x47c>
    1498:	e7b4      	b.n	1404 <CONFIG_MAIN_STACK_SIZE+0x404>
				OUTC('0');
    149a:	4641      	mov	r1, r8
    149c:	2030      	movs	r0, #48	; 0x30
    149e:	9b03      	ldr	r3, [sp, #12]
    14a0:	4798      	blx	r3
    14a2:	2800      	cmp	r0, #0
    14a4:	db9c      	blt.n	13e0 <CONFIG_MAIN_STACK_SIZE+0x3e0>
    14a6:	3501      	adds	r5, #1
    14a8:	e7af      	b.n	140a <CONFIG_MAIN_STACK_SIZE+0x40a>
			if (conv->altform_0c | conv->altform_0) {
    14aa:	06d1      	lsls	r1, r2, #27
    14ac:	d401      	bmi.n	14b2 <CONFIG_MAIN_STACK_SIZE+0x4b2>
    14ae:	0712      	lsls	r2, r2, #28
    14b0:	d506      	bpl.n	14c0 <CONFIG_MAIN_STACK_SIZE+0x4c0>
				OUTC('0');
    14b2:	4641      	mov	r1, r8
    14b4:	2030      	movs	r0, #48	; 0x30
    14b6:	9b03      	ldr	r3, [sp, #12]
    14b8:	4798      	blx	r3
    14ba:	2800      	cmp	r0, #0
    14bc:	db90      	blt.n	13e0 <CONFIG_MAIN_STACK_SIZE+0x3e0>
    14be:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    14c0:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
    14c4:	06d3      	lsls	r3, r2, #27
    14c6:	d507      	bpl.n	14d8 <CONFIG_MAIN_STACK_SIZE+0x4d8>
				OUTC(conv->specifier);
    14c8:	4641      	mov	r1, r8
    14ca:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
    14ce:	9b03      	ldr	r3, [sp, #12]
    14d0:	4798      	blx	r3
    14d2:	2800      	cmp	r0, #0
    14d4:	db84      	blt.n	13e0 <CONFIG_MAIN_STACK_SIZE+0x3e0>
    14d6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    14d8:	9e19      	ldr	r6, [sp, #100]	; 0x64
    14da:	442e      	add	r6, r5
    14dc:	1b72      	subs	r2, r6, r5
    14de:	2a00      	cmp	r2, #0
    14e0:	dc02      	bgt.n	14e8 <CONFIG_MAIN_STACK_SIZE+0x4e8>
			OUTS(bps, bpe);
    14e2:	4653      	mov	r3, sl
    14e4:	464a      	mov	r2, r9
    14e6:	e796      	b.n	1416 <CONFIG_MAIN_STACK_SIZE+0x416>
				OUTC('0');
    14e8:	4641      	mov	r1, r8
    14ea:	2030      	movs	r0, #48	; 0x30
    14ec:	9b03      	ldr	r3, [sp, #12]
    14ee:	4798      	blx	r3
    14f0:	2800      	cmp	r0, #0
    14f2:	f6ff af75 	blt.w	13e0 <CONFIG_MAIN_STACK_SIZE+0x3e0>
    14f6:	3501      	adds	r5, #1
    14f8:	e7f0      	b.n	14dc <CONFIG_MAIN_STACK_SIZE+0x4dc>
    14fa:	bf00      	nop
    14fc:	0000673e 	.word	0x0000673e

00001500 <nordicsemi_nrf91_init>:
    1500:	f04f 0220 	mov.w	r2, #32
    1504:	f3ef 8311 	mrs	r3, BASEPRI
    1508:	f382 8811 	msr	BASEPRI, r2
    150c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1510:	2101      	movs	r1, #1
    1512:	4a04      	ldr	r2, [pc, #16]	; (1524 <nordicsemi_nrf91_init+0x24>)
    1514:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    1518:	f383 8811 	msr	BASEPRI, r3
    151c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1520:	2000      	movs	r0, #0
    1522:	4770      	bx	lr
    1524:	50039000 	.word	0x50039000

00001528 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1528:	b120      	cbz	r0, 1534 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    152a:	4b03      	ldr	r3, [pc, #12]	; (1538 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    152c:	0180      	lsls	r0, r0, #6
    152e:	f043 0301 	orr.w	r3, r3, #1
    1532:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1534:	4770      	bx	lr
    1536:	bf00      	nop
    1538:	00006470 	.word	0x00006470

0000153c <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    153c:	b507      	push	{r0, r1, r2, lr}
    153e:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
    1540:	f04f 0220 	mov.w	r2, #32
    1544:	f3ef 8311 	mrs	r3, BASEPRI
    1548:	f382 8811 	msr	BASEPRI, r2
    154c:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    1550:	f004 fb42 	bl	5bd8 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    1554:	9801      	ldr	r0, [sp, #4]
    1556:	f001 f9c5 	bl	28e4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    155a:	4803      	ldr	r0, [pc, #12]	; (1568 <sys_reboot+0x2c>)
    155c:	f004 f86a 	bl	5634 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1560:	f000 fe9c 	bl	229c <arch_cpu_idle>
    1564:	e7fc      	b.n	1560 <sys_reboot+0x24>
    1566:	bf00      	nop
    1568:	00006749 	.word	0x00006749

0000156c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    156c:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    156e:	4806      	ldr	r0, [pc, #24]	; (1588 <uart_console_init+0x1c>)
    1570:	f002 f85c 	bl	362c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1574:	4b05      	ldr	r3, [pc, #20]	; (158c <uart_console_init+0x20>)
    1576:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    1578:	4805      	ldr	r0, [pc, #20]	; (1590 <uart_console_init+0x24>)
    157a:	f001 fc47 	bl	2e0c <__stdout_hook_install>
	__printk_hook_install(console_out);
    157e:	4804      	ldr	r0, [pc, #16]	; (1590 <uart_console_init+0x24>)
    1580:	f7ff f80c 	bl	59c <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    1584:	2000      	movs	r0, #0
    1586:	bd08      	pop	{r3, pc}
    1588:	00006772 	.word	0x00006772
    158c:	20000268 	.word	0x20000268
    1590:	00001595 	.word	0x00001595

00001594 <console_out>:
	if ('\n' == c) {
    1594:	280a      	cmp	r0, #10
{
    1596:	b538      	push	{r3, r4, r5, lr}
    1598:	4604      	mov	r4, r0
    159a:	4d07      	ldr	r5, [pc, #28]	; (15b8 <console_out+0x24>)
	if ('\n' == c) {
    159c:	d104      	bne.n	15a8 <console_out+0x14>
    159e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    15a0:	6883      	ldr	r3, [r0, #8]
    15a2:	210d      	movs	r1, #13
    15a4:	685b      	ldr	r3, [r3, #4]
    15a6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    15a8:	6828      	ldr	r0, [r5, #0]
    15aa:	6883      	ldr	r3, [r0, #8]
    15ac:	b2e1      	uxtb	r1, r4
    15ae:	685b      	ldr	r3, [r3, #4]
    15b0:	4798      	blx	r3
}
    15b2:	4620      	mov	r0, r4
    15b4:	bd38      	pop	{r3, r4, r5, pc}
    15b6:	bf00      	nop
    15b8:	20000268 	.word	0x20000268

000015bc <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    15bc:	b570      	push	{r4, r5, r6, lr}
    15be:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
    15c0:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
    15c2:	480d      	ldr	r0, [pc, #52]	; (15f8 <onoff_stop+0x3c>)
{
    15c4:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
    15c6:	1a23      	subs	r3, r4, r0
    15c8:	109a      	asrs	r2, r3, #2
    15ca:	4b0c      	ldr	r3, [pc, #48]	; (15fc <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
    15cc:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    15ce:	4353      	muls	r3, r2
    15d0:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    15d2:	435d      	muls	r5, r3
    15d4:	f105 0340 	add.w	r3, r5, #64	; 0x40
    15d8:	4418      	add	r0, r3
    15da:	f004 fa70 	bl	5abe <set_off_state>
	if (err < 0) {
    15de:	1e01      	subs	r1, r0, #0
    15e0:	db04      	blt.n	15ec <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    15e2:	4b07      	ldr	r3, [pc, #28]	; (1600 <onoff_stop+0x44>)
    15e4:	442b      	add	r3, r5
    15e6:	685b      	ldr	r3, [r3, #4]
    15e8:	4798      	blx	r3
	return 0;
    15ea:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    15ec:	4620      	mov	r0, r4
    15ee:	4633      	mov	r3, r6
}
    15f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    15f4:	4718      	bx	r3
    15f6:	bf00      	nop
    15f8:	2000027c 	.word	0x2000027c
    15fc:	b6db6db7 	.word	0xb6db6db7
    1600:	0000648c 	.word	0x0000648c

00001604 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1608:	4c0f      	ldr	r4, [pc, #60]	; (1648 <onoff_start+0x44>)
    160a:	4d10      	ldr	r5, [pc, #64]	; (164c <onoff_start+0x48>)
    160c:	1b03      	subs	r3, r0, r4
    160e:	109b      	asrs	r3, r3, #2
    1610:	435d      	muls	r5, r3
    1612:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    1614:	250c      	movs	r5, #12
    1616:	435d      	muls	r5, r3
{
    1618:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    161a:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    161e:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    1620:	4420      	add	r0, r4
    1622:	2140      	movs	r1, #64	; 0x40
    1624:	f004 fa64 	bl	5af0 <set_starting_state>
	if (err < 0) {
    1628:	1e01      	subs	r1, r0, #0
    162a:	db08      	blt.n	163e <onoff_start+0x3a>
	subdata->cb = cb;
    162c:	4b08      	ldr	r3, [pc, #32]	; (1650 <onoff_start+0x4c>)
    162e:	442c      	add	r4, r5
	subdata->user_data = user_data;
    1630:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    1634:	4b07      	ldr	r3, [pc, #28]	; (1654 <onoff_start+0x50>)
    1636:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    1638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    163c:	4718      	bx	r3
		notify(mgr, err);
    163e:	4638      	mov	r0, r7
    1640:	4633      	mov	r3, r6
}
    1642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    1646:	4718      	bx	r3
    1648:	2000027c 	.word	0x2000027c
    164c:	b6db6db7 	.word	0xb6db6db7
    1650:	00005b53 	.word	0x00005b53
    1654:	0000648c 	.word	0x0000648c

00001658 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    1658:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    165a:	2200      	movs	r2, #0
    165c:	2101      	movs	r1, #1
{
    165e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1660:	2005      	movs	r0, #5
    1662:	f000 fdc5 	bl	21f0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    1666:	2005      	movs	r0, #5
    1668:	f000 fda4 	bl	21b4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    166c:	480f      	ldr	r0, [pc, #60]	; (16ac <clk_init+0x54>)
    166e:	f001 fec9 	bl	3404 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1672:	4b0f      	ldr	r3, [pc, #60]	; (16b0 <clk_init+0x58>)
    1674:	4298      	cmp	r0, r3
    1676:	d115      	bne.n	16a4 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1678:	f004 fc4a 	bl	5f10 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    167c:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    167e:	490d      	ldr	r1, [pc, #52]	; (16b4 <clk_init+0x5c>)
    1680:	4630      	mov	r0, r6
    1682:	f004 f834 	bl	56ee <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1686:	2800      	cmp	r0, #0
    1688:	db0b      	blt.n	16a2 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    168a:	2501      	movs	r5, #1
    168c:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    168e:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1690:	4908      	ldr	r1, [pc, #32]	; (16b4 <clk_init+0x5c>)
    1692:	f104 001c 	add.w	r0, r4, #28
    1696:	f004 f82a 	bl	56ee <onoff_manager_init>
		if (err < 0) {
    169a:	2800      	cmp	r0, #0
    169c:	db01      	blt.n	16a2 <clk_init+0x4a>
	}

	return 0;
    169e:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    16a0:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    16a2:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    16a4:	f06f 0004 	mvn.w	r0, #4
    16a8:	e7fb      	b.n	16a2 <clk_init+0x4a>
    16aa:	bf00      	nop
    16ac:	000016f5 	.word	0x000016f5
    16b0:	0bad0000 	.word	0x0bad0000
    16b4:	000064a4 	.word	0x000064a4

000016b8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    16b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    16ba:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
    16bc:	4601      	mov	r1, r0
	sub_data->cb = NULL;
    16be:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
    16c0:	434b      	muls	r3, r1
    16c2:	480a      	ldr	r0, [pc, #40]	; (16ec <clkstarted_handle.constprop.0+0x34>)
    16c4:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    16c6:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    16c8:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    16cc:	4418      	add	r0, r3
	sub_data->cb = NULL;
    16ce:	63a6      	str	r6, [r4, #56]	; 0x38
	void *user_data = sub_data->user_data;
    16d0:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
    16d2:	f004 fa2b 	bl	5b2c <set_on_state>
	if (callback) {
    16d6:	b135      	cbz	r5, 16e6 <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
    16d8:	462b      	mov	r3, r5
    16da:	9a01      	ldr	r2, [sp, #4]
    16dc:	4804      	ldr	r0, [pc, #16]	; (16f0 <clkstarted_handle.constprop.0+0x38>)
}
    16de:	b002      	add	sp, #8
    16e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    16e4:	4718      	bx	r3
}
    16e6:	b002      	add	sp, #8
    16e8:	bd70      	pop	{r4, r5, r6, pc}
    16ea:	bf00      	nop
    16ec:	2000027c 	.word	0x2000027c
    16f0:	200000bc 	.word	0x200000bc

000016f4 <clock_event_handler>:
	switch (event) {
    16f4:	b110      	cbz	r0, 16fc <clock_event_handler+0x8>
    16f6:	2801      	cmp	r0, #1
    16f8:	d004      	beq.n	1704 <clock_event_handler+0x10>
    16fa:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    16fc:	4b03      	ldr	r3, [pc, #12]	; (170c <clock_event_handler+0x18>)
    16fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1700:	075b      	lsls	r3, r3, #29
    1702:	d101      	bne.n	1708 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1704:	f7ff bfd8 	b.w	16b8 <clkstarted_handle.constprop.0>
}
    1708:	4770      	bx	lr
    170a:	bf00      	nop
    170c:	2000027c 	.word	0x2000027c

00001710 <generic_hfclk_start>:
{
    1710:	b508      	push	{r3, lr}
    1712:	f04f 0320 	mov.w	r3, #32
    1716:	f3ef 8111 	mrs	r1, BASEPRI
    171a:	f383 8811 	msr	BASEPRI, r3
    171e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1722:	4a12      	ldr	r2, [pc, #72]	; (176c <generic_hfclk_start+0x5c>)
    1724:	6813      	ldr	r3, [r2, #0]
    1726:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    172a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    172e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1730:	d00c      	beq.n	174c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1732:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    1736:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    173a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    173e:	f013 0301 	ands.w	r3, r3, #1
    1742:	d003      	beq.n	174c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    1744:	480a      	ldr	r0, [pc, #40]	; (1770 <generic_hfclk_start+0x60>)
    1746:	f004 f9f1 	bl	5b2c <set_on_state>
			already_started = true;
    174a:	2301      	movs	r3, #1
	__asm__ volatile(
    174c:	f381 8811 	msr	BASEPRI, r1
    1750:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1754:	b123      	cbz	r3, 1760 <generic_hfclk_start+0x50>
}
    1756:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    175a:	2000      	movs	r0, #0
    175c:	f7ff bfac 	b.w	16b8 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1760:	2001      	movs	r0, #1
}
    1762:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1766:	f001 be5d 	b.w	3424 <nrfx_clock_start>
    176a:	bf00      	nop
    176c:	200002cc 	.word	0x200002cc
    1770:	200002bc 	.word	0x200002bc

00001774 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1774:	4b07      	ldr	r3, [pc, #28]	; (1794 <generic_hfclk_stop+0x20>)
    1776:	e8d3 2fef 	ldaex	r2, [r3]
    177a:	f022 0102 	bic.w	r1, r2, #2
    177e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1782:	2800      	cmp	r0, #0
    1784:	d1f7      	bne.n	1776 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1786:	07d3      	lsls	r3, r2, #31
    1788:	d402      	bmi.n	1790 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    178a:	2001      	movs	r0, #1
    178c:	f001 be7c 	b.w	3488 <nrfx_clock_stop>
}
    1790:	4770      	bx	lr
    1792:	bf00      	nop
    1794:	200002cc 	.word	0x200002cc

00001798 <api_blocking_start>:
{
    1798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    179a:	2200      	movs	r2, #0
    179c:	2301      	movs	r3, #1
    179e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    17a2:	466b      	mov	r3, sp
    17a4:	4a08      	ldr	r2, [pc, #32]	; (17c8 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    17a6:	f8cd d000 	str.w	sp, [sp]
    17aa:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    17ae:	f004 f9f7 	bl	5ba0 <api_start>
	if (err < 0) {
    17b2:	2800      	cmp	r0, #0
    17b4:	db05      	blt.n	17c2 <api_blocking_start+0x2a>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    17b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    17ba:	2300      	movs	r3, #0
    17bc:	4668      	mov	r0, sp
    17be:	f002 fd7f 	bl	42c0 <z_impl_k_sem_take>
}
    17c2:	b005      	add	sp, #20
    17c4:	f85d fb04 	ldr.w	pc, [sp], #4
    17c8:	00005b73 	.word	0x00005b73

000017cc <z_nrf_clock_control_lf_on>:
{
    17cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    17d0:	2201      	movs	r2, #1
    17d2:	4606      	mov	r6, r0
    17d4:	4939      	ldr	r1, [pc, #228]	; (18bc <z_nrf_clock_control_lf_on+0xf0>)
    17d6:	e8d1 3fef 	ldaex	r3, [r1]
    17da:	e8c1 2fe0 	stlex	r0, r2, [r1]
    17de:	2800      	cmp	r0, #0
    17e0:	d1f9      	bne.n	17d6 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    17e2:	b933      	cbnz	r3, 17f2 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    17e4:	4936      	ldr	r1, [pc, #216]	; (18c0 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    17e6:	4837      	ldr	r0, [pc, #220]	; (18c4 <z_nrf_clock_control_lf_on+0xf8>)
    17e8:	604b      	str	r3, [r1, #4]
    17ea:	60cb      	str	r3, [r1, #12]
    17ec:	608a      	str	r2, [r1, #8]
    17ee:	f003 ff91 	bl	5714 <onoff_request>
	switch (start_mode) {
    17f2:	1e73      	subs	r3, r6, #1
    17f4:	2b01      	cmp	r3, #1
    17f6:	d832      	bhi.n	185e <z_nrf_clock_control_lf_on+0x92>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    17f8:	2e01      	cmp	r6, #1
    17fa:	d107      	bne.n	180c <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    17fc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1800:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1804:	f003 0303 	and.w	r3, r3, #3
    1808:	2b02      	cmp	r3, #2
    180a:	d028      	beq.n	185e <z_nrf_clock_control_lf_on+0x92>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    180c:	f004 fc5b 	bl	60c6 <k_is_in_isr>
    1810:	4604      	mov	r4, r0
    1812:	b918      	cbnz	r0, 181c <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
    1814:	4b2c      	ldr	r3, [pc, #176]	; (18c8 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    1816:	781b      	ldrb	r3, [r3, #0]
    1818:	2b00      	cmp	r3, #0
    181a:	d147      	bne.n	18ac <z_nrf_clock_control_lf_on+0xe0>
	__asm__ volatile(
    181c:	f04f 0320 	mov.w	r3, #32
    1820:	f3ef 8511 	mrs	r5, BASEPRI
    1824:	f383 8811 	msr	BASEPRI, r3
    1828:	f3bf 8f6f 	isb	sy
    182c:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    182e:	4f27      	ldr	r7, [pc, #156]	; (18cc <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1830:	f8df 809c 	ldr.w	r8, [pc, #156]	; 18d0 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1834:	f8df 909c 	ldr.w	r9, [pc, #156]	; 18d4 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1838:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    183c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1840:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    1844:	03d2      	lsls	r2, r2, #15
    1846:	d50c      	bpl.n	1862 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1848:	f003 0303 	and.w	r3, r3, #3
    184c:	2b02      	cmp	r3, #2
    184e:	d001      	beq.n	1854 <z_nrf_clock_control_lf_on+0x88>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1850:	2e01      	cmp	r6, #1
    1852:	d106      	bne.n	1862 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
    1854:	b324      	cbz	r4, 18a0 <z_nrf_clock_control_lf_on+0xd4>
	__asm__ volatile(
    1856:	f385 8811 	msr	BASEPRI, r5
    185a:	f3bf 8f6f 	isb	sy
}
    185e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    1862:	b1c4      	cbz	r4, 1896 <z_nrf_clock_control_lf_on+0xca>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1864:	4628      	mov	r0, r5
    1866:	f000 fd27 	bl	22b8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    186a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    186e:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1872:	b2db      	uxtb	r3, r3
    1874:	2b01      	cmp	r3, #1
    1876:	d1df      	bne.n	1838 <z_nrf_clock_control_lf_on+0x6c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1878:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    187a:	2900      	cmp	r1, #0
    187c:	d0dc      	beq.n	1838 <z_nrf_clock_control_lf_on+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    187e:	2100      	movs	r1, #0
    1880:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1882:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    1884:	2102      	movs	r1, #2
    1886:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    188a:	2220      	movs	r2, #32
    188c:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1890:	f8c9 3000 	str.w	r3, [r9]
}
    1894:	e7d0      	b.n	1838 <z_nrf_clock_control_lf_on+0x6c>
	return z_impl_k_sleep(timeout);
    1896:	2100      	movs	r1, #0
    1898:	2021      	movs	r0, #33	; 0x21
    189a:	f002 fcc9 	bl	4230 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    189e:	e7e4      	b.n	186a <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
    18a0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    18a4:	2202      	movs	r2, #2
    18a6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    18aa:	e7d8      	b.n	185e <z_nrf_clock_control_lf_on+0x92>
    p_reg->INTENCLR = mask;
    18ac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    18b0:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    18b2:	4605      	mov	r5, r0
    18b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    18b8:	e7b9      	b.n	182e <z_nrf_clock_control_lf_on+0x62>
    18ba:	bf00      	nop
    18bc:	200002d0 	.word	0x200002d0
    18c0:	2000026c 	.word	0x2000026c
    18c4:	20000298 	.word	0x20000298
    18c8:	20000881 	.word	0x20000881
    18cc:	50005104 	.word	0x50005104
    18d0:	e000e100 	.word	0xe000e100
    18d4:	50005008 	.word	0x50005008

000018d8 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    18d8:	4a04      	ldr	r2, [pc, #16]	; (18ec <sys_clock_timeout_handler+0x14>)
    18da:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    18dc:	1ac9      	subs	r1, r1, r3
    18de:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    18e2:	4403      	add	r3, r0
    18e4:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    18e6:	f002 bebb 	b.w	4660 <z_clock_announce>
    18ea:	bf00      	nop
    18ec:	200002e0 	.word	0x200002e0

000018f0 <set_absolute_alarm>:
{
    18f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    18f4:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    18f8:	f04f 0900 	mov.w	r9, #0
    18fc:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    18fe:	f100 0450 	add.w	r4, r0, #80	; 0x50
    1902:	f106 2650 	add.w	r6, r6, #1342197760	; 0x50005000
    1906:	00a4      	lsls	r4, r4, #2
    1908:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
    190c:	b2a4      	uxth	r4, r4
    190e:	f104 2450 	add.w	r4, r4, #1342197760	; 0x50005000
    return p_reg->CC[ch];
    1912:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    1916:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1984 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    191a:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    191e:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    1922:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    1924:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1928:	eba3 030a 	sub.w	r3, r3, sl
    192c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    1930:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    1934:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    1936:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    193a:	d102      	bne.n	1942 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    193c:	2013      	movs	r0, #19
    193e:	f004 fbc8 	bl	60d2 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    1942:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    1946:	1aab      	subs	r3, r5, r2
    1948:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    194c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    1950:	bf88      	it	hi
    1952:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1954:	f8c4 9000 	str.w	r9, [r4]
    1958:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    195a:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    195e:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    1962:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    1966:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    196a:	459a      	cmp	sl, r3
    196c:	d006      	beq.n	197c <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    196e:	1aeb      	subs	r3, r5, r3
    1970:	3b02      	subs	r3, #2
    1972:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    1976:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    197a:	d801      	bhi.n	1980 <set_absolute_alarm+0x90>
}
    197c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    1980:	462b      	mov	r3, r5
    1982:	e7cf      	b.n	1924 <set_absolute_alarm+0x34>
    1984:	50015000 	.word	0x50015000

00001988 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    1988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    198a:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    198c:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    198e:	4e0f      	ldr	r6, [pc, #60]	; (19cc <rtc_nrf_isr+0x44>)
    1990:	4b0f      	ldr	r3, [pc, #60]	; (19d0 <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
    1992:	4a10      	ldr	r2, [pc, #64]	; (19d4 <rtc_nrf_isr+0x4c>)
    1994:	4618      	mov	r0, r3
    1996:	681d      	ldr	r5, [r3, #0]
    1998:	b104      	cbz	r4, 199c <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    199a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    199c:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    19a0:	03c9      	lsls	r1, r1, #15
    19a2:	d5fa      	bpl.n	199a <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    19a4:	6831      	ldr	r1, [r6, #0]
    19a6:	2900      	cmp	r1, #0
    19a8:	d0f7      	beq.n	199a <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    19aa:	6034      	str	r4, [r6, #0]
    19ac:	6831      	ldr	r1, [r6, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    19ae:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    19b2:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    19b6:	2401      	movs	r4, #1
    return p_reg->CC[ch];
    19b8:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
    19bc:	b125      	cbz	r5, 19c8 <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
    19be:	2000      	movs	r0, #0
    19c0:	685a      	ldr	r2, [r3, #4]
    19c2:	601f      	str	r7, [r3, #0]
    19c4:	47a8      	blx	r5
    19c6:	e7e3      	b.n	1990 <rtc_nrf_isr+0x8>
    19c8:	6005      	str	r5, [r0, #0]
}
    19ca:	e7e6      	b.n	199a <rtc_nrf_isr+0x12>
    19cc:	50015140 	.word	0x50015140
    19d0:	200002d4 	.word	0x200002d4
    19d4:	50015000 	.word	0x50015000

000019d8 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    19d8:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    19da:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    19dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    19e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    19e4:	4d0d      	ldr	r5, [pc, #52]	; (1a1c <z_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    19e6:	2101      	movs	r1, #1
    19e8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    19ec:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    19f0:	4b0b      	ldr	r3, [pc, #44]	; (1a20 <z_clock_driver_init+0x48>)
    19f2:	2015      	movs	r0, #21
    19f4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    19f8:	4622      	mov	r2, r4
    19fa:	f000 fbf9 	bl	21f0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    19fe:	2015      	movs	r0, #21
    1a00:	f000 fbd8 	bl	21b4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1a04:	2301      	movs	r3, #1
    1a06:	4a07      	ldr	r2, [pc, #28]	; (1a24 <z_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    1a08:	2002      	movs	r0, #2
    1a0a:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    1a0c:	4a06      	ldr	r2, [pc, #24]	; (1a28 <z_clock_driver_init+0x50>)
    1a0e:	602b      	str	r3, [r5, #0]
    1a10:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    1a12:	f7ff fedb 	bl	17cc <z_nrf_clock_control_lf_on>

	return 0;
}
    1a16:	4620      	mov	r0, r4
    1a18:	bd38      	pop	{r3, r4, r5, pc}
    1a1a:	bf00      	nop
    1a1c:	50015000 	.word	0x50015000
    1a20:	e000e100 	.word	0xe000e100
    1a24:	50015008 	.word	0x50015008
    1a28:	200002dc 	.word	0x200002dc

00001a2c <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1a2c:	4b13      	ldr	r3, [pc, #76]	; (1a7c <z_clock_set_timeout+0x50>)
    1a2e:	f1b0 3fff 	cmp.w	r0, #4294967295
    1a32:	bf08      	it	eq
    1a34:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    1a36:	3801      	subs	r0, #1
    1a38:	2800      	cmp	r0, #0
    1a3a:	dd1c      	ble.n	1a76 <z_clock_set_timeout+0x4a>
    1a3c:	4298      	cmp	r0, r3
    1a3e:	bfa8      	it	ge
    1a40:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    1a42:	4b0f      	ldr	r3, [pc, #60]	; (1a80 <z_clock_set_timeout+0x54>)
    1a44:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    1a48:	4b0e      	ldr	r3, [pc, #56]	; (1a84 <z_clock_set_timeout+0x58>)
    1a4a:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    1a4c:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    1a4e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    1a52:	bf18      	it	ne
    1a54:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
    1a56:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1a5a:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
    1a5c:	4a0a      	ldr	r2, [pc, #40]	; (1a88 <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1a5e:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    1a60:	480a      	ldr	r0, [pc, #40]	; (1a8c <z_clock_set_timeout+0x60>)
    1a62:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    1a64:	2000      	movs	r0, #0
    1a66:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    1a68:	4a04      	ldr	r2, [pc, #16]	; (1a7c <z_clock_set_timeout+0x50>)
    1a6a:	4293      	cmp	r3, r2
    1a6c:	bf94      	ite	ls
    1a6e:	18c9      	addls	r1, r1, r3
    1a70:	1889      	addhi	r1, r1, r2
    1a72:	f7ff bf3d 	b.w	18f0 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    1a76:	2000      	movs	r0, #0
    1a78:	e7e3      	b.n	1a42 <z_clock_set_timeout+0x16>
    1a7a:	bf00      	nop
    1a7c:	007fffff 	.word	0x007fffff
    1a80:	50015000 	.word	0x50015000
    1a84:	200002e0 	.word	0x200002e0
    1a88:	200002d4 	.word	0x200002d4
    1a8c:	000018d9 	.word	0x000018d9

00001a90 <z_clock_elapsed>:
	__asm__ volatile(
    1a90:	f04f 0220 	mov.w	r2, #32
    1a94:	f3ef 8311 	mrs	r3, BASEPRI
    1a98:	f382 8811 	msr	BASEPRI, r2
    1a9c:	f3bf 8f6f 	isb	sy
    1aa0:	4a06      	ldr	r2, [pc, #24]	; (1abc <z_clock_elapsed+0x2c>)
    1aa2:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    1aa6:	4a06      	ldr	r2, [pc, #24]	; (1ac0 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    1aa8:	6812      	ldr	r2, [r2, #0]
    1aaa:	1a80      	subs	r0, r0, r2
    1aac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    1ab0:	f383 8811 	msr	BASEPRI, r3
    1ab4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1ab8:	4770      	bx	lr
    1aba:	bf00      	nop
    1abc:	50015000 	.word	0x50015000
    1ac0:	200002e0 	.word	0x200002e0

00001ac4 <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
    1ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    1ac6:	2800      	cmp	r0, #0
{
    1ac8:	461c      	mov	r4, r3
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    1aca:	bf14      	ite	ne
    1acc:	f44f 5300 	movne.w	r3, #8192	; 0x2000
    1ad0:	f44f 4300 	moveq.w	r3, #32768	; 0x8000

	__ASSERT_NO_MSG(end >= start);
	if (end <= start) {
    1ad4:	428a      	cmp	r2, r1
    1ad6:	d941      	bls.n	1b5c <config_regions+0x98>
    1ad8:	460d      	mov	r5, r1
    1ada:	4f21      	ldr	r7, [pc, #132]	; (1b60 <config_regions+0x9c>)
		return;
	}

	for (size_t i = start; i < end; i++) {
		if (ram) {
    1adc:	2800      	cmp	r0, #0
    1ade:	d03a      	beq.n	1b56 <config_regions+0x92>
			NRF_SPU->RAMREGION[i].PERM = perm;
    1ae0:	f505 76e0 	add.w	r6, r5, #448	; 0x1c0
		} else {
			NRF_SPU->FLASHREGION[i].PERM = perm;
    1ae4:	f847 4026 	str.w	r4, [r7, r6, lsl #2]
	for (size_t i = start; i < end; i++) {
    1ae8:	1c6e      	adds	r6, r5, #1
    1aea:	42b2      	cmp	r2, r6
    1aec:	d131      	bne.n	1b52 <config_regions+0x8e>
		}
	}

	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
    1aee:	435a      	muls	r2, r3
    1af0:	481c      	ldr	r0, [pc, #112]	; (1b64 <config_regions+0xa0>)
    1af2:	434b      	muls	r3, r1
    1af4:	9200      	str	r2, [sp, #0]
    1af6:	462a      	mov	r2, r5
    1af8:	f003 fd9c 	bl	5634 <printk>
				region_size * start, region_size * end);
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
    1afc:	4b1a      	ldr	r3, [pc, #104]	; (1b68 <config_regions+0xa4>)
    1afe:	f014 0f10 	tst.w	r4, #16
    1b02:	491a      	ldr	r1, [pc, #104]	; (1b6c <config_regions+0xa8>)
    1b04:	481a      	ldr	r0, [pc, #104]	; (1b70 <config_regions+0xac>)
    1b06:	bf08      	it	eq
    1b08:	4619      	moveq	r1, r3
    1b0a:	f003 fd93 	bl	5634 <printk>
								"Non-Secure\t");
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
    1b0e:	f014 0f04 	tst.w	r4, #4
    1b12:	bf14      	ite	ne
    1b14:	2172      	movne	r1, #114	; 0x72
    1b16:	212d      	moveq	r1, #45	; 0x2d
    1b18:	4816      	ldr	r0, [pc, #88]	; (1b74 <config_regions+0xb0>)
    1b1a:	f003 fd8b 	bl	5634 <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
    1b1e:	f014 0f02 	tst.w	r4, #2
    1b22:	bf14      	ite	ne
    1b24:	2177      	movne	r1, #119	; 0x77
    1b26:	212d      	moveq	r1, #45	; 0x2d
    1b28:	4812      	ldr	r0, [pc, #72]	; (1b74 <config_regions+0xb0>)
    1b2a:	f003 fd83 	bl	5634 <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
    1b2e:	f014 0f01 	tst.w	r4, #1
    1b32:	bf0c      	ite	eq
    1b34:	212d      	moveq	r1, #45	; 0x2d
    1b36:	2178      	movne	r1, #120	; 0x78
    1b38:	480e      	ldr	r0, [pc, #56]	; (1b74 <config_regions+0xb0>)
    1b3a:	f003 fd7b 	bl	5634 <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
    1b3e:	216c      	movs	r1, #108	; 0x6c
    1b40:	480c      	ldr	r0, [pc, #48]	; (1b74 <config_regions+0xb0>)
    1b42:	f003 fd77 	bl	5634 <printk>
	PRINT("\n");
    1b46:	480c      	ldr	r0, [pc, #48]	; (1b78 <config_regions+0xb4>)
}
    1b48:	b003      	add	sp, #12
    1b4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
    1b4e:	f003 bd71 	b.w	5634 <printk>
    1b52:	4635      	mov	r5, r6
    1b54:	e7c2      	b.n	1adc <config_regions+0x18>
			NRF_SPU->FLASHREGION[i].PERM = perm;
    1b56:	f505 76c0 	add.w	r6, r5, #384	; 0x180
    1b5a:	e7c3      	b.n	1ae4 <config_regions+0x20>
}
    1b5c:	b003      	add	sp, #12
    1b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b60:	50003000 	.word	0x50003000
    1b64:	000067b2 	.word	0x000067b2
    1b68:	000067a6 	.word	0x000067a6
    1b6c:	0000679d 	.word	0x0000679d
    1b70:	00006931 	.word	0x00006931
    1b74:	000067cc 	.word	0x000067cc
    1b78:	000071ce 	.word	0x000071ce

00001b7c <spm_config_peripheral.constprop.0>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(uint8_t id, bool dma_present)
    1b7c:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
    1b7e:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1b80:	2b00      	cmp	r3, #0
    1b82:	db0c      	blt.n	1b9e <spm_config_peripheral.constprop.0+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b84:	2201      	movs	r2, #1
    1b86:	f000 011f 	and.w	r1, r0, #31
    1b8a:	408a      	lsls	r2, r1
    1b8c:	095b      	lsrs	r3, r3, #5
    1b8e:	4910      	ldr	r1, [pc, #64]	; (1bd0 <spm_config_peripheral.constprop.0+0x54>)
    1b90:	3320      	adds	r3, #32
    1b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1b96:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b9a:	f3bf 8f6f 	isb	sy
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1b9e:	0083      	lsls	r3, r0, #2
    1ba0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    1ba4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    1ba8:	2831      	cmp	r0, #49	; 0x31
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1baa:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    1bae:	d006      	beq.n	1bbe <spm_config_peripheral.constprop.0+0x42>
	return present && (usel || split);
    1bb0:	2a00      	cmp	r2, #0
    1bb2:	da07      	bge.n	1bc4 <spm_config_peripheral.constprop.0+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    1bb4:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
    1bb8:	3a02      	subs	r2, #2
    1bba:	2a01      	cmp	r2, #1
    1bbc:	d802      	bhi.n	1bc4 <spm_config_peripheral.constprop.0+0x48>

	if (usel_or_split(id)) {
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    1bbe:	4a05      	ldr	r2, [pc, #20]	; (1bd4 <spm_config_peripheral.constprop.0+0x58>)
    1bc0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    1bc4:	2101      	movs	r1, #1
    1bc6:	f004 f866 	bl	5c96 <irq_target_state_set>
	return 0;
}
    1bca:	2000      	movs	r0, #0
    1bcc:	bd08      	pop	{r3, pc}
    1bce:	bf00      	nop
    1bd0:	e000e100 	.word	0xe000e100
    1bd4:	80000100 	.word	0x80000100

00001bd8 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
    1bd8:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    1bda:	f44f 4440 	mov.w	r4, #49152	; 0xc000
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    1bde:	f24c 0504 	movw	r5, #49156	; 0xc004
{
    1be2:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    1be4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    1be8:	482c      	ldr	r0, [pc, #176]	; (1c9c <spm_jump+0xc4>)
    1bea:	f003 fd23 	bl	5634 <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    1bee:	6821      	ldr	r1, [r4, #0]
    1bf0:	482b      	ldr	r0, [pc, #172]	; (1ca0 <spm_jump+0xc8>)
    1bf2:	f003 fd1f 	bl	5634 <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    1bf6:	6829      	ldr	r1, [r5, #0]
    1bf8:	482a      	ldr	r0, [pc, #168]	; (1ca4 <spm_jump+0xcc>)
    1bfa:	f003 fd1b 	bl	5634 <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    1bfe:	2210      	movs	r2, #16
    1c00:	2100      	movs	r1, #0
    1c02:	4668      	mov	r0, sp
    1c04:	f004 f901 	bl	5e0a <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
    1c08:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
    1c0a:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    1c0c:	9300      	str	r3, [sp, #0]
    1c0e:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
    1c10:	f001 f886 	bl	2d20 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
    1c14:	2001      	movs	r0, #1
    1c16:	f001 f8b3 	bl	2d80 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
    1c1a:	2000      	movs	r0, #0
    1c1c:	f001 f89c 	bl	2d58 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
    1c20:	2000      	movs	r0, #0
    1c22:	f001 f8c1 	bl	2da8 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
    1c26:	2101      	movs	r1, #1
    1c28:	2000      	movs	r0, #0
    1c2a:	f001 f8db 	bl	2de4 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
    1c2e:	f001 f8cf 	bl	2dd0 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    1c32:	682c      	ldr	r4, [r5, #0]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    1c34:	481c      	ldr	r0, [pc, #112]	; (1ca8 <spm_jump+0xd0>)
    1c36:	f003 fcfd 	bl	5634 <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
    1c3a:	2008      	movs	r0, #8
    1c3c:	f7ff ff9e 	bl	1b7c <spm_config_peripheral.constprop.0>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    1c40:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
    1c44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c48:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
    1c4c:	0864      	lsrs	r4, r4, #1
    1c4e:	0064      	lsls	r4, r4, #1
    1c50:	4620      	mov	r0, r4
    1c52:	4621      	mov	r1, r4
    1c54:	4622      	mov	r2, r4
    1c56:	4623      	mov	r3, r4
    1c58:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    1c5c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    1c60:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    1c64:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    1c68:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    1c6c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    1c70:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    1c74:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    1c78:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    1c7c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    1c80:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    1c84:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    1c88:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    1c8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    1c90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1c94:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1c98:	f7fe fc4a 	bl	530 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
    1c9c:	000067cf 	.word	0x000067cf
    1ca0:	000067e6 	.word	0x000067e6
    1ca4:	000067fb 	.word	0x000067fb
    1ca8:	00006819 	.word	0x00006819

00001cac <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
    1cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
    1cb0:	483b      	ldr	r0, [pc, #236]	; (1da0 <spm_config+0xf4>)
    1cb2:	f003 fcbf 	bl	5634 <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
    1cb6:	2100      	movs	r1, #0
    1cb8:	f240 1317 	movw	r3, #279	; 0x117
    1cbc:	4608      	mov	r0, r1
    1cbe:	2201      	movs	r2, #1
    1cc0:	f7ff ff00 	bl	1ac4 <config_regions>
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
    1cc4:	f240 1307 	movw	r3, #263	; 0x107
    1cc8:	2220      	movs	r2, #32
    1cca:	2101      	movs	r1, #1
    1ccc:	2000      	movs	r0, #0
    1cce:	f7ff fef9 	bl	1ac4 <config_regions>
	PRINT("\n");
    1cd2:	4834      	ldr	r0, [pc, #208]	; (1da4 <spm_config+0xf8>)
    1cd4:	f003 fcae 	bl	5634 <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    1cd8:	4b33      	ldr	r3, [pc, #204]	; (1da8 <spm_config+0xfc>)
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
    1cda:	4a34      	ldr	r2, [pc, #208]	; (1dac <spm_config+0x100>)
    1cdc:	f3c3 31c4 	ubfx	r1, r3, #15, #5
    1ce0:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1ce4:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
    1ce8:	f3c3 1343 	ubfx	r3, r3, #5, #4
    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
    1cec:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
    1cf0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
    1cf4:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
    1cf8:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    1cfc:	482c      	ldr	r0, [pc, #176]	; (1db0 <spm_config+0x104>)
    1cfe:	0152      	lsls	r2, r2, #5
    1d00:	f003 fc98 	bl	5634 <printk>
	PRINT("\n");
    1d04:	4827      	ldr	r0, [pc, #156]	; (1da4 <spm_config+0xf8>)
    1d06:	f003 fc95 	bl	5634 <printk>
	int err = spm_secure_services_init();
    1d0a:	f003 ff66 	bl	5bda <spm_secure_services_init>
	if (err != 0) {
    1d0e:	4601      	mov	r1, r0
    1d10:	b110      	cbz	r0, 1d18 <spm_config+0x6c>
		PRINT("Could not initialize secure services (err %d).\n", err);
    1d12:	4828      	ldr	r0, [pc, #160]	; (1db4 <spm_config+0x108>)
    1d14:	f003 fc8e 	bl	5634 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    1d18:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
    1d1a:	4827      	ldr	r0, [pc, #156]	; (1db8 <spm_config+0x10c>)
    1d1c:	f003 fc8a 	bl	5634 <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
    1d20:	f240 1317 	movw	r3, #279	; 0x117
    1d24:	2208      	movs	r2, #8
    1d26:	2100      	movs	r1, #0
    1d28:	2001      	movs	r0, #1
    1d2a:	f7ff fecb 	bl	1ac4 <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
    1d2e:	4d1f      	ldr	r5, [pc, #124]	; (1dac <spm_config+0x100>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
    1d30:	f240 1307 	movw	r3, #263	; 0x107
    1d34:	2220      	movs	r2, #32
    1d36:	2108      	movs	r1, #8
    1d38:	2001      	movs	r0, #1
    1d3a:	f7ff fec3 	bl	1ac4 <config_regions>
	PRINT("\n");
    1d3e:	4819      	ldr	r0, [pc, #100]	; (1da4 <spm_config+0xf8>)
    1d40:	f003 fc78 	bl	5634 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    1d44:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
    1d48:	481c      	ldr	r0, [pc, #112]	; (1dbc <spm_config+0x110>)
    1d4a:	f003 fc73 	bl	5634 <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
    1d4e:	4f1c      	ldr	r7, [pc, #112]	; (1dc0 <spm_config+0x114>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
    1d50:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
    1d54:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1dd4 <spm_config+0x128>
    1d58:	4d1a      	ldr	r5, [pc, #104]	; (1dc4 <spm_config+0x118>)
    1d5a:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1dd8 <spm_config+0x12c>
    1d5e:	796e      	ldrb	r6, [r5, #5]
    1d60:	4621      	mov	r1, r4
    1d62:	2e00      	cmp	r6, #0
    1d64:	bf14      	ite	ne
    1d66:	463b      	movne	r3, r7
    1d68:	4643      	moveq	r3, r8
    1d6a:	4648      	mov	r0, r9
    1d6c:	682a      	ldr	r2, [r5, #0]
    1d6e:	f003 fc61 	bl	5634 <printk>
		if (!periph[i].nonsecure) {
    1d72:	b966      	cbnz	r6, 1d8e <spm_config+0xe2>
			PRINT("\tSKIP\n");
    1d74:	4814      	ldr	r0, [pc, #80]	; (1dc8 <spm_config+0x11c>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    1d76:	3401      	adds	r4, #1
			PRINT("\tOK\n");
    1d78:	f003 fc5c 	bl	5634 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    1d7c:	2c1a      	cmp	r4, #26
    1d7e:	f105 0508 	add.w	r5, r5, #8
    1d82:	d1ec      	bne.n	1d5e <spm_config+0xb2>
	PRINT("\n");
    1d84:	4807      	ldr	r0, [pc, #28]	; (1da4 <spm_config+0xf8>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
    1d86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
    1d8a:	f003 bc53 	b.w	5634 <printk>
		err = spm_config_peripheral(periph[i].id, false);
    1d8e:	7928      	ldrb	r0, [r5, #4]
    1d90:	f7ff fef4 	bl	1b7c <spm_config_peripheral.constprop.0>
		if (err) {
    1d94:	b108      	cbz	r0, 1d9a <spm_config+0xee>
			PRINT("\tERROR\n");
    1d96:	480d      	ldr	r0, [pc, #52]	; (1dcc <spm_config+0x120>)
    1d98:	e7ed      	b.n	1d76 <spm_config+0xca>
			PRINT("\tOK\n");
    1d9a:	480d      	ldr	r0, [pc, #52]	; (1dd0 <spm_config+0x124>)
    1d9c:	e7eb      	b.n	1d76 <spm_config+0xca>
    1d9e:	bf00      	nop
    1da0:	0000684f 	.word	0x0000684f
    1da4:	000071ce 	.word	0x000071ce
    1da8:	00007fe0 	.word	0x00007fe0
    1dac:	50003000 	.word	0x50003000
    1db0:	00006873 	.word	0x00006873
    1db4:	000068b9 	.word	0x000068b9
    1db8:	000068e9 	.word	0x000068e9
    1dbc:	0000690b 	.word	0x0000690b
    1dc0:	00006844 	.word	0x00006844
    1dc4:	000064b0 	.word	0x000064b0
    1dc8:	00006934 	.word	0x00006934
    1dcc:	0000693b 	.word	0x0000693b
    1dd0:	00006943 	.word	0x00006943
    1dd4:	000067aa 	.word	0x000067aa
    1dd8:	00006927 	.word	0x00006927

00001ddc <__acle_se_spm_request_read_nse>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read_nse(void *destination, uint32_t addr, size_t len)
{
    1ddc:	b570      	push	{r4, r5, r6, lr}
    1dde:	460c      	mov	r4, r1
    1de0:	4615      	mov	r5, r2
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
    1de2:	4606      	mov	r6, r0
    1de4:	bbb0      	cbnz	r0, 1e54 <__acle_se_spm_request_read_nse+0x78>
		return -EINVAL;
    1de6:	f06f 0015 	mvn.w	r0, #21
			return 0;
		}
	}

	return -EPERM;
}
    1dea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1dee:	4671      	mov	r1, lr
    1df0:	4672      	mov	r2, lr
    1df2:	4673      	mov	r3, lr
    1df4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    1df8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    1dfc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    1e00:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    1e04:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    1e08:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    1e0c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    1e10:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    1e14:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    1e18:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    1e1c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    1e20:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    1e24:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    1e28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    1e2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1e30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1e34:	f38e 8c00 	msr	CPSR_fs, lr
    1e38:	b410      	push	{r4}
    1e3a:	eef1 ca10 	vmrs	ip, fpscr
    1e3e:	f64f 7460 	movw	r4, #65376	; 0xff60
    1e42:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    1e46:	ea0c 0c04 	and.w	ip, ip, r4
    1e4a:	eee1 ca10 	vmsr	fpscr, ip
    1e4e:	bc10      	pop	{r4}
    1e50:	46f4      	mov	ip, lr
    1e52:	4774      	bxns	lr
	if (destination == NULL || len <= 0) {
    1e54:	2a00      	cmp	r2, #0
    1e56:	d0c6      	beq.n	1de6 <__acle_se_spm_request_read_nse+0xa>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1e58:	f003 ff64 	bl	5d24 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)destination)) {
    1e5c:	2801      	cmp	r0, #1
    1e5e:	d0c2      	beq.n	1de6 <__acle_se_spm_request_read_nse+0xa>
		if (addr >= start && addr + len <= start + size) {
    1e60:	4b0c      	ldr	r3, [pc, #48]	; (1e94 <__acle_se_spm_request_read_nse+0xb8>)
    1e62:	429c      	cmp	r4, r3
    1e64:	d90b      	bls.n	1e7e <__acle_se_spm_request_read_nse+0xa2>
    1e66:	192a      	adds	r2, r5, r4
    1e68:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
    1e6c:	429a      	cmp	r2, r3
    1e6e:	d809      	bhi.n	1e84 <__acle_se_spm_request_read_nse+0xa8>
			memcpy(destination, (const void *)addr, len);
    1e70:	462a      	mov	r2, r5
    1e72:	4621      	mov	r1, r4
    1e74:	4630      	mov	r0, r6
    1e76:	f003 ff9d 	bl	5db4 <memcpy>
			return 0;
    1e7a:	2000      	movs	r0, #0
    1e7c:	e7b5      	b.n	1dea <__acle_se_spm_request_read_nse+0xe>
		if (addr >= start && addr + len <= start + size) {
    1e7e:	4b06      	ldr	r3, [pc, #24]	; (1e98 <__acle_se_spm_request_read_nse+0xbc>)
    1e80:	429c      	cmp	r4, r3
    1e82:	d903      	bls.n	1e8c <__acle_se_spm_request_read_nse+0xb0>
    1e84:	4b05      	ldr	r3, [pc, #20]	; (1e9c <__acle_se_spm_request_read_nse+0xc0>)
    1e86:	192a      	adds	r2, r5, r4
    1e88:	429a      	cmp	r2, r3
    1e8a:	d9f1      	bls.n	1e70 <__acle_se_spm_request_read_nse+0x94>
	return -EPERM;
    1e8c:	f04f 30ff 	mov.w	r0, #4294967295
    1e90:	e7ab      	b.n	1dea <__acle_se_spm_request_read_nse+0xe>
    1e92:	bf00      	nop
    1e94:	00ff0203 	.word	0x00ff0203
    1e98:	00ff012f 	.word	0x00ff012f
    1e9c:	00ff0138 	.word	0x00ff0138

00001ea0 <__acle_se_spm_firmware_info_nse>:
#endif /* CONFIG_SPM_SERVICE_S0_ACTIVE */

#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info_nse(uint32_t fw_address, struct fw_info *info)
{
    1ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ea4:	4681      	mov	r9, r0
	const struct fw_info *tmp_info;

	if (info == NULL) {
    1ea6:	460d      	mov	r5, r1
{
    1ea8:	b085      	sub	sp, #20
	if (info == NULL) {
    1eaa:	2900      	cmp	r1, #0
    1eac:	d05d      	beq.n	1f6a <__acle_se_spm_firmware_info_nse+0xca>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1eae:	f003 ff39 	bl	5d24 <arm_cmse_addr_is_secure>
		return -EINVAL;
	}

	/* Ensure that fw_address is within secure area */
	if (!ptr_in_secure_area(fw_address)) {
    1eb2:	2801      	cmp	r0, #1
    1eb4:	d159      	bne.n	1f6a <__acle_se_spm_firmware_info_nse+0xca>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1eb6:	4628      	mov	r0, r5
    1eb8:	f003 ff34 	bl	5d24 <arm_cmse_addr_is_secure>
		return -EINVAL;
	}

	/* Ensure that *info is in non-secure RAM */
	if (ptr_in_secure_area((intptr_t)info)) {
    1ebc:	2801      	cmp	r0, #1
    1ebe:	d054      	beq.n	1f6a <__acle_se_spm_firmware_info_nse+0xca>
 */
static inline const struct fw_info *fw_info_find(uint32_t firmware_address)
{
	const struct fw_info *finfo;

	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    1ec0:	f04f 0800 	mov.w	r8, #0
    1ec4:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 1f7c <__acle_se_spm_firmware_info_nse+0xdc>
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1ec8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 1f80 <__acle_se_spm_firmware_info_nse+0xe0>
    1ecc:	af01      	add	r7, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
    1ece:	f85b 6b04 	ldr.w	r6, [fp], #4
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1ed2:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
    1ed6:	444e      	add	r6, r9
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1ed8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
    1edc:	220c      	movs	r2, #12
    1ede:	4639      	mov	r1, r7
    1ee0:	4630      	mov	r0, r6
    1ee2:	f003 ff40 	bl	5d66 <memcmp>
    1ee6:	4604      	mov	r4, r0
    1ee8:	b908      	cbnz	r0, 1eee <__acle_se_spm_firmware_info_nse+0x4e>
		if (finfo) {
    1eea:	2e00      	cmp	r6, #0
    1eec:	d140      	bne.n	1f70 <__acle_se_spm_firmware_info_nse+0xd0>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    1eee:	f108 0801 	add.w	r8, r8, #1
    1ef2:	f1b8 0f05 	cmp.w	r8, #5
    1ef6:	d1ea      	bne.n	1ece <__acle_se_spm_firmware_info_nse+0x2e>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
    1ef8:	f06f 040d 	mvn.w	r4, #13
}
    1efc:	4620      	mov	r0, r4
    1efe:	b005      	add	sp, #20
    1f00:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    1f04:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    1f08:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    1f0c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    1f10:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    1f14:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    1f18:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    1f1c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    1f20:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    1f24:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    1f28:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    1f2c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    1f30:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    1f34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    1f38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1f3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f40:	4671      	mov	r1, lr
    1f42:	4672      	mov	r2, lr
    1f44:	4673      	mov	r3, lr
    1f46:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1f4a:	f38e 8c00 	msr	CPSR_fs, lr
    1f4e:	b410      	push	{r4}
    1f50:	eef1 ca10 	vmrs	ip, fpscr
    1f54:	f64f 7460 	movw	r4, #65376	; 0xff60
    1f58:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    1f5c:	ea0c 0c04 	and.w	ip, ip, r4
    1f60:	eee1 ca10 	vmsr	fpscr, ip
    1f64:	bc10      	pop	{r4}
    1f66:	46f4      	mov	ip, lr
    1f68:	4774      	bxns	lr
		return -EINVAL;
    1f6a:	f06f 0415 	mvn.w	r4, #21
    1f6e:	e7c5      	b.n	1efc <__acle_se_spm_firmware_info_nse+0x5c>
		memcpy(info, tmp_info, sizeof(*tmp_info));
    1f70:	223c      	movs	r2, #60	; 0x3c
    1f72:	4631      	mov	r1, r6
    1f74:	4628      	mov	r0, r5
    1f76:	f003 ff1d 	bl	5db4 <memcpy>
		return 0;
    1f7a:	e7bf      	b.n	1efc <__acle_se_spm_firmware_info_nse+0x5c>
    1f7c:	00006580 	.word	0x00006580
    1f80:	00006420 	.word	0x00006420

00001f84 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1f84:	4801      	ldr	r0, [pc, #4]	; (1f8c <nrf_cc3xx_platform_abort_init+0x8>)
    1f86:	f002 be1b 	b.w	4bc0 <nrf_cc3xx_platform_set_abort>
    1f8a:	bf00      	nop
    1f8c:	00006594 	.word	0x00006594

00001f90 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1f90:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1f92:	b1b0      	cbz	r0, 1fc2 <mutex_unlock_platform+0x32>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1f94:	6843      	ldr	r3, [r0, #4]
    1f96:	2b04      	cmp	r3, #4
    1f98:	d10d      	bne.n	1fb6 <mutex_unlock_platform+0x26>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1f9a:	2200      	movs	r2, #0
    1f9c:	6803      	ldr	r3, [r0, #0]
    1f9e:	e8d3 1fef 	ldaex	r1, [r3]
    1fa2:	2901      	cmp	r1, #1
    1fa4:	d103      	bne.n	1fae <mutex_unlock_platform+0x1e>
    1fa6:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1faa:	2800      	cmp	r0, #0
    1fac:	d1f7      	bne.n	1f9e <mutex_unlock_platform+0xe>
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1fae:	4807      	ldr	r0, [pc, #28]	; (1fcc <mutex_unlock_platform+0x3c>)
    1fb0:	bf08      	it	eq
    1fb2:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1fb4:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1fb6:	b13b      	cbz	r3, 1fc8 <mutex_unlock_platform+0x38>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1fb8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    1fba:	f001 fd7d 	bl	3ab8 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1fbe:	2000      	movs	r0, #0
    1fc0:	e7f8      	b.n	1fb4 <mutex_unlock_platform+0x24>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1fc2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1fc6:	e7f5      	b.n	1fb4 <mutex_unlock_platform+0x24>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1fc8:	4801      	ldr	r0, [pc, #4]	; (1fd0 <mutex_unlock_platform+0x40>)
    1fca:	e7f3      	b.n	1fb4 <mutex_unlock_platform+0x24>
    1fcc:	ffff8fe9 	.word	0xffff8fe9
    1fd0:	ffff8fea 	.word	0xffff8fea

00001fd4 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1fd4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1fd6:	4604      	mov	r4, r0
    1fd8:	b918      	cbnz	r0, 1fe2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1fda:	4b0d      	ldr	r3, [pc, #52]	; (2010 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10>)
    1fdc:	480d      	ldr	r0, [pc, #52]	; (2014 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x14>)
    1fde:	685b      	ldr	r3, [r3, #4]
    1fe0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1fe2:	6861      	ldr	r1, [r4, #4]
    1fe4:	2908      	cmp	r1, #8
    1fe6:	d00d      	beq.n	2004 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1fe8:	f031 0304 	bics.w	r3, r1, #4
    1fec:	d00a      	beq.n	2004 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1fee:	f011 0102 	ands.w	r1, r1, #2
    1ff2:	d008      	beq.n	2006 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1ff4:	4621      	mov	r1, r4
    1ff6:	4808      	ldr	r0, [pc, #32]	; (2018 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x18>)
    1ff8:	f001 fcbc 	bl	3974 <k_mem_slab_free>
        mutex->mutex = NULL;
    1ffc:	2300      	movs	r3, #0
    1ffe:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2000:	2300      	movs	r3, #0
    2002:	6063      	str	r3, [r4, #4]
}
    2004:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2006:	2214      	movs	r2, #20
    2008:	6820      	ldr	r0, [r4, #0]
    200a:	f003 fefe 	bl	5e0a <memset>
    200e:	e7f7      	b.n	2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>
    2010:	20000070 	.word	0x20000070
    2014:	00006a44 	.word	0x00006a44
    2018:	200002e4 	.word	0x200002e4

0000201c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    201c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    201e:	4604      	mov	r4, r0
    2020:	b918      	cbnz	r0, 202a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    2022:	4b16      	ldr	r3, [pc, #88]	; (207c <mutex_init_platform+0x60>)
    2024:	4816      	ldr	r0, [pc, #88]	; (2080 <mutex_init_platform+0x64>)
    2026:	685b      	ldr	r3, [r3, #4]
    2028:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    202a:	6863      	ldr	r3, [r4, #4]
    202c:	2b04      	cmp	r3, #4
    202e:	d023      	beq.n	2078 <mutex_init_platform+0x5c>
    2030:	2b08      	cmp	r3, #8
    2032:	d021      	beq.n	2078 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2034:	b9cb      	cbnz	r3, 206a <mutex_init_platform+0x4e>
    2036:	6823      	ldr	r3, [r4, #0]
    2038:	b9bb      	cbnz	r3, 206a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    203a:	f04f 32ff 	mov.w	r2, #4294967295
    203e:	f04f 33ff 	mov.w	r3, #4294967295
    2042:	4621      	mov	r1, r4
    2044:	480f      	ldr	r0, [pc, #60]	; (2084 <mutex_init_platform+0x68>)
    2046:	f001 fc63 	bl	3910 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    204a:	b908      	cbnz	r0, 2050 <mutex_init_platform+0x34>
    204c:	6823      	ldr	r3, [r4, #0]
    204e:	b91b      	cbnz	r3, 2058 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    2050:	4b0a      	ldr	r3, [pc, #40]	; (207c <mutex_init_platform+0x60>)
    2052:	480d      	ldr	r0, [pc, #52]	; (2088 <mutex_init_platform+0x6c>)
    2054:	685b      	ldr	r3, [r3, #4]
    2056:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2058:	2214      	movs	r2, #20
    205a:	2100      	movs	r1, #0
    205c:	6820      	ldr	r0, [r4, #0]
    205e:	f003 fed4 	bl	5e0a <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2062:	6863      	ldr	r3, [r4, #4]
    2064:	f043 0302 	orr.w	r3, r3, #2
    2068:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    206a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    206c:	f003 ff78 	bl	5f60 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2070:	6863      	ldr	r3, [r4, #4]
    2072:	f043 0301 	orr.w	r3, r3, #1
    2076:	6063      	str	r3, [r4, #4]
}
    2078:	bd10      	pop	{r4, pc}
    207a:	bf00      	nop
    207c:	20000070 	.word	0x20000070
    2080:	00006a44 	.word	0x00006a44
    2084:	200002e4 	.word	0x200002e4
    2088:	00006a6a 	.word	0x00006a6a

0000208c <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    208c:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    208e:	b1e8      	cbz	r0, 20cc <mutex_lock_platform+0x40>
    switch (mutex->flags) {
    2090:	6843      	ldr	r3, [r0, #4]
    2092:	2b04      	cmp	r3, #4
    2094:	d10c      	bne.n	20b0 <mutex_lock_platform+0x24>
    2096:	2201      	movs	r2, #1
    2098:	6803      	ldr	r3, [r0, #0]
    209a:	e8d3 1fef 	ldaex	r1, [r3]
    209e:	2900      	cmp	r1, #0
    20a0:	d103      	bne.n	20aa <mutex_lock_platform+0x1e>
    20a2:	e8c3 2fe0 	stlex	r0, r2, [r3]
    20a6:	2800      	cmp	r0, #0
    20a8:	d1f7      	bne.n	209a <mutex_lock_platform+0xe>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    20aa:	d10b      	bne.n	20c4 <mutex_lock_platform+0x38>
    20ac:	2000      	movs	r0, #0
}
    20ae:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    20b0:	b153      	cbz	r3, 20c8 <mutex_lock_platform+0x3c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    20b2:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    20b4:	f04f 32ff 	mov.w	r2, #4294967295
    20b8:	f04f 33ff 	mov.w	r3, #4294967295
    20bc:	f001 fc84 	bl	39c8 <z_impl_k_mutex_lock>
        if (ret == 0) {
    20c0:	2800      	cmp	r0, #0
    20c2:	d0f3      	beq.n	20ac <mutex_lock_platform+0x20>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    20c4:	4803      	ldr	r0, [pc, #12]	; (20d4 <mutex_lock_platform+0x48>)
    20c6:	e7f2      	b.n	20ae <mutex_lock_platform+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    20c8:	4803      	ldr	r0, [pc, #12]	; (20d8 <mutex_lock_platform+0x4c>)
    20ca:	e7f0      	b.n	20ae <mutex_lock_platform+0x22>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    20cc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    20d0:	e7ed      	b.n	20ae <mutex_lock_platform+0x22>
    20d2:	bf00      	nop
    20d4:	ffff8fe9 	.word	0xffff8fe9
    20d8:	ffff8fea 	.word	0xffff8fea

000020dc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    20dc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    20de:	4906      	ldr	r1, [pc, #24]	; (20f8 <nrf_cc3xx_platform_mutex_init+0x1c>)
    20e0:	2340      	movs	r3, #64	; 0x40
    20e2:	2214      	movs	r2, #20
    20e4:	4805      	ldr	r0, [pc, #20]	; (20fc <nrf_cc3xx_platform_mutex_init+0x20>)
    20e6:	f003 ff20 	bl	5f2a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    20ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    20ee:	4904      	ldr	r1, [pc, #16]	; (2100 <nrf_cc3xx_platform_mutex_init+0x24>)
    20f0:	4804      	ldr	r0, [pc, #16]	; (2104 <nrf_cc3xx_platform_mutex_init+0x28>)
    20f2:	f002 bdb7 	b.w	4c64 <nrf_cc3xx_platform_set_mutexes>
    20f6:	bf00      	nop
    20f8:	20000300 	.word	0x20000300
    20fc:	200002e4 	.word	0x200002e4
    2100:	000065ac 	.word	0x000065ac
    2104:	0000659c 	.word	0x0000659c

00002108 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2108:	4a09      	ldr	r2, [pc, #36]	; (2130 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    210a:	490a      	ldr	r1, [pc, #40]	; (2134 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    210c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    210e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    2110:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    2112:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2114:	4908      	ldr	r1, [pc, #32]	; (2138 <arch_swap+0x30>)
    2116:	684b      	ldr	r3, [r1, #4]
    2118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    211c:	604b      	str	r3, [r1, #4]
    211e:	2300      	movs	r3, #0
    2120:	f383 8811 	msr	BASEPRI, r3
    2124:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2128:	6893      	ldr	r3, [r2, #8]
}
    212a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    212c:	4770      	bx	lr
    212e:	bf00      	nop
    2130:	20000820 	.word	0x20000820
    2134:	0000662c 	.word	0x0000662c
    2138:	e000ed00 	.word	0xe000ed00

0000213c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    213c:	4913      	ldr	r1, [pc, #76]	; (218c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    213e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2140:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    2144:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2146:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    214a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    214e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2150:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2154:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2158:	4f0d      	ldr	r7, [pc, #52]	; (2190 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    215a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    215e:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    2160:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2162:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2164:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    2166:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2168:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    216a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    216e:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    2172:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2176:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    217a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    217e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    2180:	f003 fdb7 	bl	5cf2 <configure_builtin_stack_guard>
    pop {r2, lr}
    2184:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    2188:	4770      	bx	lr
    218a:	0000      	.short	0x0000
    ldr r1, =_kernel
    218c:	20000820 	.word	0x20000820
    ldr v4, =_SCS_ICSR
    2190:	e000ed04 	.word	0xe000ed04

00002194 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    2194:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2198:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    219a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    219e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    21a2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    21a4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    21a8:	2902      	cmp	r1, #2
    beq _oops
    21aa:	d0ff      	beq.n	21ac <_oops>

000021ac <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    21ac:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    21ae:	f003 fda4 	bl	5cfa <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    21b2:	bd01      	pop	{r0, pc}

000021b4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    21b4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    21b6:	2b00      	cmp	r3, #0
    21b8:	db08      	blt.n	21cc <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21ba:	2201      	movs	r2, #1
    21bc:	f000 001f 	and.w	r0, r0, #31
    21c0:	fa02 f000 	lsl.w	r0, r2, r0
    21c4:	4a02      	ldr	r2, [pc, #8]	; (21d0 <arch_irq_enable+0x1c>)
    21c6:	095b      	lsrs	r3, r3, #5
    21c8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    21cc:	4770      	bx	lr
    21ce:	bf00      	nop
    21d0:	e000e100 	.word	0xe000e100

000021d4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    21d4:	4b05      	ldr	r3, [pc, #20]	; (21ec <arch_irq_is_enabled+0x18>)
    21d6:	0942      	lsrs	r2, r0, #5
    21d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    21dc:	2301      	movs	r3, #1
    21de:	f000 001f 	and.w	r0, r0, #31
    21e2:	fa03 f000 	lsl.w	r0, r3, r0
}
    21e6:	4010      	ands	r0, r2
    21e8:	4770      	bx	lr
    21ea:	bf00      	nop
    21ec:	e000e100 	.word	0xe000e100

000021f0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    21f0:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    21f2:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    21f4:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    21f8:	bfac      	ite	ge
    21fa:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    21fe:	4b06      	ldrlt	r3, [pc, #24]	; (2218 <z_arm_irq_priority_set+0x28>)
    2200:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2204:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2206:	bfab      	itete	ge
    2208:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    220c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2210:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2214:	5419      	strblt	r1, [r3, r0]
}
    2216:	4770      	bx	lr
    2218:	e000ed14 	.word	0xe000ed14

0000221c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    221c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2220:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    2222:	490b      	ldr	r1, [pc, #44]	; (2250 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    2224:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    2228:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    222a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    222e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2232:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    2234:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    2238:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    223c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2240:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2244:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2246:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2248:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    224a:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    224c:	4770      	bx	lr
    224e:	bf00      	nop
    2250:	000057a7 	.word	0x000057a7

00002254 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2254:	b508      	push	{r3, lr}
    2256:	4604      	mov	r4, r0
    2258:	460e      	mov	r6, r1
    225a:	4615      	mov	r5, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    225c:	2300      	movs	r3, #0
    225e:	eee1 3a10 	vmsr	fpscr, r3
	z_arm_configure_static_mpu_regions();
    2262:	f000 fbb5 	bl	29d0 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2266:	4b09      	ldr	r3, [pc, #36]	; (228c <arch_switch_to_main_thread+0x38>)
    2268:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    226a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    226c:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2270:	4628      	mov	r0, r5
    2272:	f386 8809 	msr	PSP, r6
    2276:	2100      	movs	r1, #0
    2278:	b663      	cpsie	if
    227a:	f381 8811 	msr	BASEPRI, r1
    227e:	f3bf 8f6f 	isb	sy
    2282:	2200      	movs	r2, #0
    2284:	2300      	movs	r3, #0
    2286:	f003 fa8e 	bl	57a6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    228a:	bf00      	nop
    228c:	20000820 	.word	0x20000820

00002290 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2290:	4901      	ldr	r1, [pc, #4]	; (2298 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2292:	2210      	movs	r2, #16
	str	r2, [r1]
    2294:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2296:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2298:	e000ed10 	.word	0xe000ed10

0000229c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    229c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    229e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    22a0:	f380 8811 	msr	BASEPRI, r0
	isb
    22a4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    22a8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    22ac:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    22ae:	b662      	cpsie	i
	isb
    22b0:	f3bf 8f6f 	isb	sy

	bx	lr
    22b4:	4770      	bx	lr
    22b6:	bf00      	nop

000022b8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    22b8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    22ba:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    22bc:	f381 8811 	msr	BASEPRI, r1

	wfe
    22c0:	bf20      	wfe

	msr	BASEPRI, r0
    22c2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    22c6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    22c8:	4770      	bx	lr
    22ca:	bf00      	nop

000022cc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    22cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    22ce:	4605      	mov	r5, r0

	if (esf != NULL) {
    22d0:	460c      	mov	r4, r1
    22d2:	b1c9      	cbz	r1, 2308 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    22d4:	688b      	ldr	r3, [r1, #8]
    22d6:	4810      	ldr	r0, [pc, #64]	; (2318 <z_arm_fatal_error+0x4c>)
    22d8:	9300      	str	r3, [sp, #0]
    22da:	e9d1 2300 	ldrd	r2, r3, [r1]
    22de:	2145      	movs	r1, #69	; 0x45
    22e0:	f003 f9a8 	bl	5634 <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    22e4:	6963      	ldr	r3, [r4, #20]
    22e6:	2145      	movs	r1, #69	; 0x45
    22e8:	9300      	str	r3, [sp, #0]
    22ea:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    22ee:	480b      	ldr	r0, [pc, #44]	; (231c <z_arm_fatal_error+0x50>)
    22f0:	f003 f9a0 	bl	5634 <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    22f4:	2145      	movs	r1, #69	; 0x45
    22f6:	69e2      	ldr	r2, [r4, #28]
    22f8:	4809      	ldr	r0, [pc, #36]	; (2320 <z_arm_fatal_error+0x54>)
    22fa:	f003 f99b 	bl	5634 <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    22fe:	2145      	movs	r1, #69	; 0x45
    2300:	69a2      	ldr	r2, [r4, #24]
    2302:	4808      	ldr	r0, [pc, #32]	; (2324 <z_arm_fatal_error+0x58>)
    2304:	f003 f996 	bl	5634 <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2308:	4621      	mov	r1, r4
    230a:	4628      	mov	r0, r5
}
    230c:	b003      	add	sp, #12
    230e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    2312:	f001 b9b3 	b.w	367c <z_fatal_error>
    2316:	bf00      	nop
    2318:	00006a97 	.word	0x00006a97
    231c:	00006acb 	.word	0x00006acb
    2320:	00006aff 	.word	0x00006aff
    2324:	00006b13 	.word	0x00006b13

00002328 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2328:	bf30      	wfi
    b z_SysNmiOnReset
    232a:	f7ff bffd 	b.w	2328 <z_SysNmiOnReset>
    232e:	bf00      	nop

00002330 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2330:	4a17      	ldr	r2, [pc, #92]	; (2390 <z_arm_prep_c+0x60>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    2332:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2334:	4b17      	ldr	r3, [pc, #92]	; (2394 <z_arm_prep_c+0x64>)
    2336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    233c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2340:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2348:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    234c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    2350:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2354:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    2358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
    235c:	4a0e      	ldr	r2, [pc, #56]	; (2398 <z_arm_prep_c+0x68>)
    235e:	6853      	ldr	r3, [r2, #4]
    2360:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    2364:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2366:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    236a:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    236e:	2300      	movs	r3, #0
    2370:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    2374:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    2378:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    237c:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2380:	f001 f9fa 	bl	3778 <z_bss_zero>
	z_data_copy();
    2384:	f002 f874 	bl	4470 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2388:	f000 faf4 	bl	2974 <z_arm_interrupt_init>
	z_cstart();
    238c:	f001 fa18 	bl	37c0 <z_cstart>
    2390:	00000000 	.word	0x00000000
    2394:	e000ed00 	.word	0xe000ed00
    2398:	e000ef30 	.word	0xe000ef30

0000239c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    239c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    239e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    23a0:	4a0b      	ldr	r2, [pc, #44]	; (23d0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    23a2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    23a4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    23a6:	bf1e      	ittt	ne
	movne	r1, #0
    23a8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    23aa:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    23ac:	f003 fdbb 	blne	5f26 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    23b0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    23b2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    23b6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    23ba:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    23be:	4905      	ldr	r1, [pc, #20]	; (23d4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    23c0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    23c2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    23c4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    23c6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    23ca:	4903      	ldr	r1, [pc, #12]	; (23d8 <_isr_wrapper+0x3c>)
	bx r1
    23cc:	4708      	bx	r1
    23ce:	0000      	.short	0x0000
	ldr r2, =_kernel
    23d0:	20000820 	.word	0x20000820
	ldr r1, =_sw_isr_table
    23d4:	000061dc 	.word	0x000061dc
	ldr r1, =z_arm_int_exit
    23d8:	000028c9 	.word	0x000028c9

000023dc <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    23dc:	2000      	movs	r0, #0
    msr CONTROL, r0
    23de:	f380 8814 	msr	CONTROL, r0
    isb
    23e2:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    23e6:	2000      	movs	r0, #0
    msr MSPLIM, r0
    23e8:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    23ec:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    23f0:	f003 fb5a 	bl	5aa8 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    23f4:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    23f6:	490e      	ldr	r1, [pc, #56]	; (2430 <__start+0x54>)
    str r0, [r1]
    23f8:	6008      	str	r0, [r1, #0]
    dsb
    23fa:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    23fe:	480d      	ldr	r0, [pc, #52]	; (2434 <__start+0x58>)
    msr msp, r0
    2400:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2404:	f000 fa90 	bl	2928 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2408:	2020      	movs	r0, #32
    msr BASEPRI, r0
    240a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    240e:	480a      	ldr	r0, [pc, #40]	; (2438 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2410:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2414:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2416:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    241a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    241e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2420:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2422:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2426:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    242a:	f7ff ff81 	bl	2330 <z_arm_prep_c>
    242e:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    2430:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2434:	20001888 	.word	0x20001888
    ldr r0, =z_interrupt_stacks
    2438:	200019c8 	.word	0x200019c8

0000243c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    243c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2440:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2444:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2446:	4672      	mov	r2, lr
	bl z_arm_fault
    2448:	f000 f95a 	bl	2700 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    244c:	bd01      	pop	{r0, pc}
    244e:	bf00      	nop

00002450 <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2450:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2452:	4c22      	ldr	r4, [pc, #136]	; (24dc <mem_manage_fault.isra.0+0x8c>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2454:	4606      	mov	r6, r0
    2456:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2458:	4821      	ldr	r0, [pc, #132]	; (24e0 <mem_manage_fault.isra.0+0x90>)
    245a:	2145      	movs	r1, #69	; 0x45
    245c:	f003 f8ea 	bl	5634 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2460:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2462:	06d0      	lsls	r0, r2, #27
    2464:	d503      	bpl.n	246e <mem_manage_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2466:	2145      	movs	r1, #69	; 0x45
    2468:	481e      	ldr	r0, [pc, #120]	; (24e4 <mem_manage_fault.isra.0+0x94>)
    246a:	f003 f8e3 	bl	5634 <printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    246e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2470:	0719      	lsls	r1, r3, #28
    2472:	d503      	bpl.n	247c <mem_manage_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    2474:	2145      	movs	r1, #69	; 0x45
    2476:	481c      	ldr	r0, [pc, #112]	; (24e8 <mem_manage_fault.isra.0+0x98>)
    2478:	f003 f8dc 	bl	5634 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    247c:	4c17      	ldr	r4, [pc, #92]	; (24dc <mem_manage_fault.isra.0+0x8c>)
    247e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2480:	079a      	lsls	r2, r3, #30
    2482:	d510      	bpl.n	24a6 <mem_manage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    2484:	2145      	movs	r1, #69	; 0x45
    2486:	4819      	ldr	r0, [pc, #100]	; (24ec <mem_manage_fault.isra.0+0x9c>)
    2488:	f003 f8d4 	bl	5634 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    248c:	6b62      	ldr	r2, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    248e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2490:	061b      	lsls	r3, r3, #24
    2492:	d508      	bpl.n	24a6 <mem_manage_fault.isra.0+0x56>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2494:	2145      	movs	r1, #69	; 0x45
    2496:	4816      	ldr	r0, [pc, #88]	; (24f0 <mem_manage_fault.isra.0+0xa0>)
    2498:	f003 f8cc 	bl	5634 <printk>
			if (from_hard_fault) {
    249c:	b11e      	cbz	r6, 24a6 <mem_manage_fault.isra.0+0x56>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    249e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    24a4:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    24a6:	4c0d      	ldr	r4, [pc, #52]	; (24dc <mem_manage_fault.isra.0+0x8c>)
    24a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    24aa:	07d0      	lsls	r0, r2, #31
    24ac:	d503      	bpl.n	24b6 <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    24ae:	2145      	movs	r1, #69	; 0x45
    24b0:	4810      	ldr	r0, [pc, #64]	; (24f4 <mem_manage_fault.isra.0+0xa4>)
    24b2:	f003 f8bf 	bl	5634 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    24b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24b8:	0699      	lsls	r1, r3, #26
    24ba:	d503      	bpl.n	24c4 <mem_manage_fault.isra.0+0x74>
		PR_FAULT_INFO(
    24bc:	2145      	movs	r1, #69	; 0x45
    24be:	480e      	ldr	r0, [pc, #56]	; (24f8 <mem_manage_fault.isra.0+0xa8>)
    24c0:	f003 f8b8 	bl	5634 <printk>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    24c4:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    24c6:	4b05      	ldr	r3, [pc, #20]	; (24dc <mem_manage_fault.isra.0+0x8c>)
    24c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24ca:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    24cc:	bf58      	it	pl
    24ce:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    24d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24d2:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    24d6:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    24d8:	7028      	strb	r0, [r5, #0]

	return reason;
}
    24da:	bd70      	pop	{r4, r5, r6, pc}
    24dc:	e000ed00 	.word	0xe000ed00
    24e0:	00006b46 	.word	0x00006b46
    24e4:	00006b61 	.word	0x00006b61
    24e8:	00006b99 	.word	0x00006b99
    24ec:	00006bb1 	.word	0x00006bb1
    24f0:	00006bce 	.word	0x00006bce
    24f4:	00006be9 	.word	0x00006be9
    24f8:	00006c0d 	.word	0x00006c0d

000024fc <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    24fc:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    24fe:	4c23      	ldr	r4, [pc, #140]	; (258c <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2500:	4606      	mov	r6, r0
    2502:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2504:	4822      	ldr	r0, [pc, #136]	; (2590 <bus_fault.isra.0+0x94>)
    2506:	2145      	movs	r1, #69	; 0x45
    2508:	f003 f894 	bl	5634 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    250c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    250e:	04d1      	lsls	r1, r2, #19
    2510:	d503      	bpl.n	251a <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    2512:	2145      	movs	r1, #69	; 0x45
    2514:	481f      	ldr	r0, [pc, #124]	; (2594 <bus_fault.isra.0+0x98>)
    2516:	f003 f88d 	bl	5634 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    251a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    251c:	051a      	lsls	r2, r3, #20
    251e:	d503      	bpl.n	2528 <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    2520:	2145      	movs	r1, #69	; 0x45
    2522:	481d      	ldr	r0, [pc, #116]	; (2598 <bus_fault.isra.0+0x9c>)
    2524:	f003 f886 	bl	5634 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2528:	4c18      	ldr	r4, [pc, #96]	; (258c <bus_fault.isra.0+0x90>)
    252a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    252c:	059b      	lsls	r3, r3, #22
    252e:	d510      	bpl.n	2552 <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    2530:	481a      	ldr	r0, [pc, #104]	; (259c <bus_fault.isra.0+0xa0>)
    2532:	2145      	movs	r1, #69	; 0x45
    2534:	f003 f87e 	bl	5634 <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2538:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    253a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    253c:	0418      	lsls	r0, r3, #16
    253e:	d508      	bpl.n	2552 <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2540:	2145      	movs	r1, #69	; 0x45
    2542:	4817      	ldr	r0, [pc, #92]	; (25a0 <bus_fault.isra.0+0xa4>)
    2544:	f003 f876 	bl	5634 <printk>
			if (from_hard_fault) {
    2548:	b11e      	cbz	r6, 2552 <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    254a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    254c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2550:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2552:	4c0e      	ldr	r4, [pc, #56]	; (258c <bus_fault.isra.0+0x90>)
    2554:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2556:	0559      	lsls	r1, r3, #21
    2558:	d503      	bpl.n	2562 <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    255a:	2145      	movs	r1, #69	; 0x45
    255c:	4811      	ldr	r0, [pc, #68]	; (25a4 <bus_fault.isra.0+0xa8>)
    255e:	f003 f869 	bl	5634 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2562:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2564:	05da      	lsls	r2, r3, #23
    2566:	d50b      	bpl.n	2580 <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    2568:	2145      	movs	r1, #69	; 0x45
    256a:	480f      	ldr	r0, [pc, #60]	; (25a8 <bus_fault.isra.0+0xac>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    256c:	f003 f862 	bl	5634 <printk>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    2570:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2572:	4a06      	ldr	r2, [pc, #24]	; (258c <bus_fault.isra.0+0x90>)
    2574:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2576:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    257a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    257c:	7028      	strb	r0, [r5, #0]

	return reason;
}
    257e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2580:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2582:	049b      	lsls	r3, r3, #18
    2584:	d5f4      	bpl.n	2570 <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2586:	2145      	movs	r1, #69	; 0x45
    2588:	4808      	ldr	r0, [pc, #32]	; (25ac <bus_fault.isra.0+0xb0>)
    258a:	e7ef      	b.n	256c <bus_fault.isra.0+0x70>
    258c:	e000ed00 	.word	0xe000ed00
    2590:	00006c41 	.word	0x00006c41
    2594:	00006c5c 	.word	0x00006c5c
    2598:	00006b99 	.word	0x00006b99
    259c:	00006c72 	.word	0x00006c72
    25a0:	00006c90 	.word	0x00006c90
    25a4:	00006caa 	.word	0x00006caa
    25a8:	00006cca 	.word	0x00006cca
    25ac:	00006c0d 	.word	0x00006c0d

000025b0 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    25b0:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    25b2:	4c21      	ldr	r4, [pc, #132]	; (2638 <usage_fault.isra.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    25b4:	2145      	movs	r1, #69	; 0x45
    25b6:	4821      	ldr	r0, [pc, #132]	; (263c <usage_fault.isra.0+0x8c>)
    25b8:	f003 f83c 	bl	5634 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    25bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    25be:	0195      	lsls	r5, r2, #6
    25c0:	d503      	bpl.n	25ca <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    25c2:	2145      	movs	r1, #69	; 0x45
    25c4:	481e      	ldr	r0, [pc, #120]	; (2640 <usage_fault.isra.0+0x90>)
    25c6:	f003 f835 	bl	5634 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    25ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    25cc:	01dc      	lsls	r4, r3, #7
    25ce:	d503      	bpl.n	25d8 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    25d0:	2145      	movs	r1, #69	; 0x45
    25d2:	481c      	ldr	r0, [pc, #112]	; (2644 <usage_fault.isra.0+0x94>)
    25d4:	f003 f82e 	bl	5634 <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    25d8:	4d17      	ldr	r5, [pc, #92]	; (2638 <usage_fault.isra.0+0x88>)
    25da:	6aac      	ldr	r4, [r5, #40]	; 0x28
    25dc:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    25e0:	d004      	beq.n	25ec <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    25e2:	2145      	movs	r1, #69	; 0x45
    25e4:	4818      	ldr	r0, [pc, #96]	; (2648 <usage_fault.isra.0+0x98>)
    25e6:	f003 f825 	bl	5634 <printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    25ea:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    25ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    25ee:	0318      	lsls	r0, r3, #12
    25f0:	d503      	bpl.n	25fa <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    25f2:	2145      	movs	r1, #69	; 0x45
    25f4:	4815      	ldr	r0, [pc, #84]	; (264c <usage_fault.isra.0+0x9c>)
    25f6:	f003 f81d 	bl	5634 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    25fa:	4d0f      	ldr	r5, [pc, #60]	; (2638 <usage_fault.isra.0+0x88>)
    25fc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    25fe:	0351      	lsls	r1, r2, #13
    2600:	d503      	bpl.n	260a <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2602:	2145      	movs	r1, #69	; 0x45
    2604:	4812      	ldr	r0, [pc, #72]	; (2650 <usage_fault.isra.0+0xa0>)
    2606:	f003 f815 	bl	5634 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    260a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    260c:	039a      	lsls	r2, r3, #14
    260e:	d503      	bpl.n	2618 <usage_fault.isra.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2610:	2145      	movs	r1, #69	; 0x45
    2612:	4810      	ldr	r0, [pc, #64]	; (2654 <usage_fault.isra.0+0xa4>)
    2614:	f003 f80e 	bl	5634 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2618:	4d07      	ldr	r5, [pc, #28]	; (2638 <usage_fault.isra.0+0x88>)
    261a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    261c:	03db      	lsls	r3, r3, #15
    261e:	d503      	bpl.n	2628 <usage_fault.isra.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2620:	2145      	movs	r1, #69	; 0x45
    2622:	480d      	ldr	r0, [pc, #52]	; (2658 <usage_fault.isra.0+0xa8>)
    2624:	f003 f806 	bl	5634 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2628:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    262a:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    262c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2630:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2634:	62ab      	str	r3, [r5, #40]	; 0x28
}
    2636:	bd38      	pop	{r3, r4, r5, pc}
    2638:	e000ed00 	.word	0xe000ed00
    263c:	00006ce7 	.word	0x00006ce7
    2640:	00006d04 	.word	0x00006d04
    2644:	00006d1c 	.word	0x00006d1c
    2648:	00006d3b 	.word	0x00006d3b
    264c:	00006d6a 	.word	0x00006d6a
    2650:	00006d8d 	.word	0x00006d8d
    2654:	00006db7 	.word	0x00006db7
    2658:	00006dd6 	.word	0x00006dd6

0000265c <secure_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void secure_fault(const z_arch_esf_t *esf)
    265c:	b510      	push	{r4, lr}
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    265e:	4c1e      	ldr	r4, [pc, #120]	; (26d8 <secure_fault.isra.0+0x7c>)
	PR_FAULT_INFO("***** SECURE FAULT *****");
    2660:	481e      	ldr	r0, [pc, #120]	; (26dc <secure_fault.isra.0+0x80>)
    2662:	2145      	movs	r1, #69	; 0x45
    2664:	f002 ffe6 	bl	5634 <printk>
	STORE_xFAR(sfar, SAU->SFAR);
    2668:	69a2      	ldr	r2, [r4, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    266a:	6963      	ldr	r3, [r4, #20]
    266c:	0658      	lsls	r0, r3, #25
    266e:	d503      	bpl.n	2678 <secure_fault.isra.0+0x1c>
		PR_EXC("  Address: 0x%x", sfar);
    2670:	2145      	movs	r1, #69	; 0x45
    2672:	481b      	ldr	r0, [pc, #108]	; (26e0 <secure_fault.isra.0+0x84>)
    2674:	f002 ffde 	bl	5634 <printk>
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    2678:	6963      	ldr	r3, [r4, #20]
    267a:	07d9      	lsls	r1, r3, #31
    267c:	d508      	bpl.n	2690 <secure_fault.isra.0+0x34>
		PR_FAULT_INFO("  Invalid entry point");
    267e:	2145      	movs	r1, #69	; 0x45
    2680:	4818      	ldr	r0, [pc, #96]	; (26e4 <secure_fault.isra.0+0x88>)
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state error");
    2682:	f002 ffd7 	bl	5634 <printk>
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    2686:	6963      	ldr	r3, [r4, #20]
    2688:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    268c:	6163      	str	r3, [r4, #20]
}
    268e:	bd10      	pop	{r4, pc}
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    2690:	6963      	ldr	r3, [r4, #20]
    2692:	079a      	lsls	r2, r3, #30
    2694:	d502      	bpl.n	269c <secure_fault.isra.0+0x40>
		PR_FAULT_INFO("  Invalid integrity signature");
    2696:	2145      	movs	r1, #69	; 0x45
    2698:	4813      	ldr	r0, [pc, #76]	; (26e8 <secure_fault.isra.0+0x8c>)
    269a:	e7f2      	b.n	2682 <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    269c:	6963      	ldr	r3, [r4, #20]
    269e:	075b      	lsls	r3, r3, #29
    26a0:	d502      	bpl.n	26a8 <secure_fault.isra.0+0x4c>
		PR_FAULT_INFO("  Invalid exception return");
    26a2:	2145      	movs	r1, #69	; 0x45
    26a4:	4811      	ldr	r0, [pc, #68]	; (26ec <secure_fault.isra.0+0x90>)
    26a6:	e7ec      	b.n	2682 <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    26a8:	6963      	ldr	r3, [r4, #20]
    26aa:	0718      	lsls	r0, r3, #28
    26ac:	d502      	bpl.n	26b4 <secure_fault.isra.0+0x58>
		PR_FAULT_INFO("  Attribution unit violation");
    26ae:	2145      	movs	r1, #69	; 0x45
    26b0:	480f      	ldr	r0, [pc, #60]	; (26f0 <secure_fault.isra.0+0x94>)
    26b2:	e7e6      	b.n	2682 <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    26b4:	6963      	ldr	r3, [r4, #20]
    26b6:	06d9      	lsls	r1, r3, #27
    26b8:	d502      	bpl.n	26c0 <secure_fault.isra.0+0x64>
		PR_FAULT_INFO("  Invalid transition");
    26ba:	2145      	movs	r1, #69	; 0x45
    26bc:	480d      	ldr	r0, [pc, #52]	; (26f4 <secure_fault.isra.0+0x98>)
    26be:	e7e0      	b.n	2682 <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    26c0:	6963      	ldr	r3, [r4, #20]
    26c2:	069a      	lsls	r2, r3, #26
    26c4:	d502      	bpl.n	26cc <secure_fault.isra.0+0x70>
		PR_FAULT_INFO("  Lazy state preservation");
    26c6:	2145      	movs	r1, #69	; 0x45
    26c8:	480b      	ldr	r0, [pc, #44]	; (26f8 <secure_fault.isra.0+0x9c>)
    26ca:	e7da      	b.n	2682 <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    26cc:	6963      	ldr	r3, [r4, #20]
    26ce:	061b      	lsls	r3, r3, #24
    26d0:	d5d9      	bpl.n	2686 <secure_fault.isra.0+0x2a>
		PR_FAULT_INFO("  Lazy state error");
    26d2:	2145      	movs	r1, #69	; 0x45
    26d4:	4809      	ldr	r0, [pc, #36]	; (26fc <secure_fault.isra.0+0xa0>)
    26d6:	e7d4      	b.n	2682 <secure_fault.isra.0+0x26>
    26d8:	e000edd0 	.word	0xe000edd0
    26dc:	00006e06 	.word	0x00006e06
    26e0:	00006e24 	.word	0x00006e24
    26e4:	00006e39 	.word	0x00006e39
    26e8:	00006e54 	.word	0x00006e54
    26ec:	00006e77 	.word	0x00006e77
    26f0:	00006e97 	.word	0x00006e97
    26f4:	00006eb9 	.word	0x00006eb9
    26f8:	00006ed3 	.word	0x00006ed3
    26fc:	00006ef2 	.word	0x00006ef2

00002700 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2704:	4b5c      	ldr	r3, [pc, #368]	; (2878 <z_arm_fault+0x178>)
{
    2706:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2708:	685c      	ldr	r4, [r3, #4]
    270a:	2600      	movs	r6, #0
{
    270c:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    270e:	f3c4 0708 	ubfx	r7, r4, #0, #9
    2712:	f386 8811 	msr	BASEPRI, r6
    2716:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    271a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    271e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2722:	d132      	bne.n	278a <z_arm_fault+0x8a>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    2724:	f012 0301 	ands.w	r3, r2, #1
    2728:	d02e      	beq.n	2788 <z_arm_fault+0x88>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    272a:	f012 0340 	ands.w	r3, r2, #64	; 0x40
    272e:	f002 0808 	and.w	r8, r2, #8
    2732:	f040 809c 	bne.w	286e <z_arm_fault+0x16e>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    2736:	0752      	lsls	r2, r2, #29
			secure_esf = (z_arch_esf_t *)psp;
    2738:	bf44      	itt	mi
    273a:	460d      	movmi	r5, r1
	*nested_exc = false;
    273c:	461e      	movmi	r6, r3
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    273e:	682a      	ldr	r2, [r5, #0]
    2740:	4b4e      	ldr	r3, [pc, #312]	; (287c <z_arm_fault+0x17c>)
			*nested_exc = true;
    2742:	bf58      	it	pl
    2744:	2601      	movpl	r6, #1
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    2746:	4413      	add	r3, r2
    2748:	2b01      	cmp	r3, #1
		sec_ret_addr = secure_esf->basic.pc;
    274a:	bf98      	it	ls
    274c:	6c2a      	ldrls	r2, [r5, #64]	; 0x40
	PR_FAULT_INFO("  S instruction address:  0x%x", sec_ret_addr);
    274e:	2145      	movs	r1, #69	; 0x45
    2750:	484b      	ldr	r0, [pc, #300]	; (2880 <z_arm_fault+0x180>)
    2752:	f002 ff6f 	bl	5634 <printk>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2756:	f1b8 0f00 	cmp.w	r8, #0
    275a:	d010      	beq.n	277e <z_arm_fault+0x7e>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    275c:	f3ef 8589 	mrs	r5, PSP_NS
	*recoverable = false;
    2760:	2300      	movs	r3, #0
    2762:	1efa      	subs	r2, r7, #3
    2764:	4698      	mov	r8, r3
    2766:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    276a:	4613      	mov	r3, r2
    276c:	2b09      	cmp	r3, #9
    276e:	d86c      	bhi.n	284a <z_arm_fault+0x14a>
    2770:	e8df f003 	tbb	[pc, r3]
    2774:	3b605c0d 	.word	0x3b605c0d
    2778:	6b6b6b64 	.word	0x6b6b6b64
    277c:	686b      	.short	0x686b
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    277e:	f3ef 8588 	mrs	r5, MSP_NS
  return(result);
    2782:	e7ed      	b.n	2760 <z_arm_fault+0x60>
			ptr_esf =  (z_arch_esf_t *)psp;
    2784:	460d      	mov	r5, r1
    2786:	e7eb      	b.n	2760 <z_arm_fault+0x60>
	*nested_exc = false;
    2788:	461e      	mov	r6, r3
		return NULL;
    278a:	4635      	mov	r5, r6
    278c:	e7e8      	b.n	2760 <z_arm_fault+0x60>
	PR_FAULT_INFO("***** HARD FAULT *****");
    278e:	2145      	movs	r1, #69	; 0x45
    2790:	483c      	ldr	r0, [pc, #240]	; (2884 <z_arm_fault+0x184>)
    2792:	f002 ff4f 	bl	5634 <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2796:	4b38      	ldr	r3, [pc, #224]	; (2878 <z_arm_fault+0x178>)
	*recoverable = false;
    2798:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    279c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    279e:	f014 0402 	ands.w	r4, r4, #2
    27a2:	d004      	beq.n	27ae <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
    27a4:	2145      	movs	r1, #69	; 0x45
    27a6:	4838      	ldr	r0, [pc, #224]	; (2888 <z_arm_fault+0x188>)
	PR_FAULT_INFO(
    27a8:	f002 ff44 	bl	5634 <printk>
    27ac:	e048      	b.n	2840 <z_arm_fault+0x140>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    27ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    27b0:	005b      	lsls	r3, r3, #1
    27b2:	d522      	bpl.n	27fa <z_arm_fault+0xfa>
		PR_EXC("  Fault escalation (see below)");
    27b4:	2145      	movs	r1, #69	; 0x45
    27b6:	4835      	ldr	r0, [pc, #212]	; (288c <z_arm_fault+0x18c>)
    27b8:	f002 ff3c 	bl	5634 <printk>
		if (SCB_MMFSR != 0) {
    27bc:	4b34      	ldr	r3, [pc, #208]	; (2890 <z_arm_fault+0x190>)
    27be:	781b      	ldrb	r3, [r3, #0]
    27c0:	b133      	cbz	r3, 27d0 <z_arm_fault+0xd0>
			reason = mem_manage_fault(esf, 1, recoverable);
    27c2:	2001      	movs	r0, #1
    27c4:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    27c8:	f7ff fe42 	bl	2450 <mem_manage_fault.isra.0>
    27cc:	4604      	mov	r4, r0
		break;
    27ce:	e014      	b.n	27fa <z_arm_fault+0xfa>
		} else if (SCB_BFSR != 0) {
    27d0:	4b30      	ldr	r3, [pc, #192]	; (2894 <z_arm_fault+0x194>)
    27d2:	781b      	ldrb	r3, [r3, #0]
    27d4:	b12b      	cbz	r3, 27e2 <z_arm_fault+0xe2>
			reason = bus_fault(esf, 1, recoverable);
    27d6:	2001      	movs	r0, #1
    27d8:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    27dc:	f7ff fe8e 	bl	24fc <bus_fault.isra.0>
    27e0:	e7f4      	b.n	27cc <z_arm_fault+0xcc>
		} else if (SCB_UFSR != 0) {
    27e2:	4b2d      	ldr	r3, [pc, #180]	; (2898 <z_arm_fault+0x198>)
    27e4:	881b      	ldrh	r3, [r3, #0]
    27e6:	b29b      	uxth	r3, r3
    27e8:	b113      	cbz	r3, 27f0 <z_arm_fault+0xf0>
		reason = usage_fault(esf);
    27ea:	f7ff fee1 	bl	25b0 <usage_fault.isra.0>
    27ee:	e7ed      	b.n	27cc <z_arm_fault+0xcc>
		} else if (SAU->SFSR != 0) {
    27f0:	4b2a      	ldr	r3, [pc, #168]	; (289c <z_arm_fault+0x19c>)
    27f2:	695b      	ldr	r3, [r3, #20]
    27f4:	b10b      	cbz	r3, 27fa <z_arm_fault+0xfa>
			secure_fault(esf);
    27f6:	f7ff ff31 	bl	265c <secure_fault.isra.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    27fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    27fe:	b993      	cbnz	r3, 2826 <z_arm_fault+0x126>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2800:	2220      	movs	r2, #32
    2802:	4629      	mov	r1, r5
    2804:	a802      	add	r0, sp, #8
    2806:	f003 fad5 	bl	5db4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    280a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    280c:	b356      	cbz	r6, 2864 <z_arm_fault+0x164>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    280e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2812:	b922      	cbnz	r2, 281e <z_arm_fault+0x11e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2814:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2818:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    281c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    281e:	4620      	mov	r0, r4
    2820:	a902      	add	r1, sp, #8
    2822:	f7ff fd53 	bl	22cc <z_arm_fatal_error>
}
    2826:	b00a      	add	sp, #40	; 0x28
    2828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    282c:	2000      	movs	r0, #0
    282e:	f10d 0107 	add.w	r1, sp, #7
    2832:	e7c9      	b.n	27c8 <z_arm_fault+0xc8>
		reason = bus_fault(esf, 0, recoverable);
    2834:	2000      	movs	r0, #0
    2836:	f10d 0107 	add.w	r1, sp, #7
    283a:	e7cf      	b.n	27dc <z_arm_fault+0xdc>
		secure_fault(esf);
    283c:	f7ff ff0e 	bl	265c <secure_fault.isra.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2840:	2400      	movs	r4, #0
}
    2842:	e7da      	b.n	27fa <z_arm_fault+0xfa>
	PR_FAULT_INFO(
    2844:	2145      	movs	r1, #69	; 0x45
    2846:	4816      	ldr	r0, [pc, #88]	; (28a0 <z_arm_fault+0x1a0>)
    2848:	e7ae      	b.n	27a8 <z_arm_fault+0xa8>
	PR_FAULT_INFO("***** %s %d) *****",
    284a:	4916      	ldr	r1, [pc, #88]	; (28a4 <z_arm_fault+0x1a4>)
    284c:	f414 7ff8 	tst.w	r4, #496	; 0x1f0
    2850:	4a15      	ldr	r2, [pc, #84]	; (28a8 <z_arm_fault+0x1a8>)
    2852:	4816      	ldr	r0, [pc, #88]	; (28ac <z_arm_fault+0x1ac>)
    2854:	bf08      	it	eq
    2856:	460a      	moveq	r2, r1
    2858:	f1a7 0310 	sub.w	r3, r7, #16
    285c:	2145      	movs	r1, #69	; 0x45
    285e:	f002 fee9 	bl	5634 <printk>
    2862:	e7ed      	b.n	2840 <z_arm_fault+0x140>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2864:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2868:	f023 0301 	bic.w	r3, r3, #1
    286c:	e7d6      	b.n	281c <z_arm_fault+0x11c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    286e:	f1b8 0f00 	cmp.w	r8, #0
    2872:	d187      	bne.n	2784 <z_arm_fault+0x84>
			*nested_exc = true;
    2874:	2601      	movs	r6, #1
    2876:	e773      	b.n	2760 <z_arm_fault+0x60>
    2878:	e000ed00 	.word	0xe000ed00
    287c:	0105eda6 	.word	0x0105eda6
    2880:	00006f38 	.word	0x00006f38
    2884:	00006f5c 	.word	0x00006f5c
    2888:	00006f78 	.word	0x00006f78
    288c:	00006f9e 	.word	0x00006f9e
    2890:	e000ed28 	.word	0xe000ed28
    2894:	e000ed29 	.word	0xe000ed29
    2898:	e000ed2a 	.word	0xe000ed2a
    289c:	e000edd0 	.word	0xe000edd0
    28a0:	00006fc2 	.word	0x00006fc2
    28a4:	00006f0a 	.word	0x00006f0a
    28a8:	00006f1f 	.word	0x00006f1f
    28ac:	00006ffd 	.word	0x00006ffd

000028b0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    28b0:	4b04      	ldr	r3, [pc, #16]	; (28c4 <z_arm_fault_init+0x14>)
    28b2:	695a      	ldr	r2, [r3, #20]
    28b4:	f042 0210 	orr.w	r2, r2, #16
    28b8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    28ba:	695a      	ldr	r2, [r3, #20]
    28bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    28c0:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    28c2:	4770      	bx	lr
    28c4:	e000ed00 	.word	0xe000ed00

000028c8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    28c8:	4b04      	ldr	r3, [pc, #16]	; (28dc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    28ca:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    28cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    28ce:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    28d0:	d003      	beq.n	28da <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    28d2:	4903      	ldr	r1, [pc, #12]	; (28e0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    28d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    28d8:	600a      	str	r2, [r1, #0]

000028da <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    28da:	4770      	bx	lr
	ldr r3, =_kernel
    28dc:	20000820 	.word	0x20000820
	ldr r1, =_SCS_ICSR
    28e0:	e000ed04 	.word	0xe000ed04

000028e4 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    28e4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    28e8:	4905      	ldr	r1, [pc, #20]	; (2900 <sys_arch_reboot+0x1c>)
    28ea:	4b06      	ldr	r3, [pc, #24]	; (2904 <sys_arch_reboot+0x20>)
    28ec:	68ca      	ldr	r2, [r1, #12]
    28ee:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    28f2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    28f4:	60cb      	str	r3, [r1, #12]
    28f6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    28fa:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    28fc:	e7fd      	b.n	28fa <sys_arch_reboot+0x16>
    28fe:	bf00      	nop
    2900:	e000ed00 	.word	0xe000ed00
    2904:	05fa0004 	.word	0x05fa0004

00002908 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    2908:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    290a:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    290c:	4a05      	ldr	r2, [pc, #20]	; (2924 <z_arm_clear_arm_mpu_config+0x1c>)
    290e:	6811      	ldr	r1, [r2, #0]
	int num_regions =
    2910:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
    2914:	428b      	cmp	r3, r1
    2916:	d100      	bne.n	291a <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    2918:	4770      	bx	lr
  mpu->RNR = rnr;
    291a:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    291c:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    291e:	3301      	adds	r3, #1
    2920:	e7f8      	b.n	2914 <z_arm_clear_arm_mpu_config+0xc>
    2922:	bf00      	nop
    2924:	e000ed90 	.word	0xe000ed90

00002928 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2928:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    292a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    292c:	2400      	movs	r4, #0
    292e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2932:	f7ff ffe9 	bl	2908 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2936:	4a0e      	ldr	r2, [pc, #56]	; (2970 <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
    2938:	4623      	mov	r3, r4
    293a:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
    293c:	f04f 34ff 	mov.w	r4, #4294967295
    2940:	f103 0020 	add.w	r0, r3, #32
    2944:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2946:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    2948:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    294c:	d1f8      	bne.n	2940 <z_arm_init_arch_hw_at_boot+0x18>
    294e:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2950:	f04f 30ff 	mov.w	r0, #4294967295
    2954:	f103 0260 	add.w	r2, r3, #96	; 0x60
    2958:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    295a:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    295c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2960:	d1f8      	bne.n	2954 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    2962:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2964:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2968:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    296c:	bd10      	pop	{r4, pc}
    296e:	bf00      	nop
    2970:	e000e100 	.word	0xe000e100

00002974 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2974:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2976:	2120      	movs	r1, #32
    2978:	4803      	ldr	r0, [pc, #12]	; (2988 <z_arm_interrupt_init+0x14>)
    297a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    297c:	3301      	adds	r3, #1
    297e:	2b41      	cmp	r3, #65	; 0x41
    2980:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2984:	d1f9      	bne.n	297a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2986:	4770      	bx	lr
    2988:	e000e100 	.word	0xe000e100

0000298c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    298c:	b508      	push	{r3, lr}
	if (_current == thread) {
    298e:	4b0e      	ldr	r3, [pc, #56]	; (29c8 <z_impl_k_thread_abort+0x3c>)
    2990:	689b      	ldr	r3, [r3, #8]
    2992:	4283      	cmp	r3, r0
    2994:	d107      	bne.n	29a6 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2996:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    299a:	b193      	cbz	r3, 29c2 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    299c:	4a0b      	ldr	r2, [pc, #44]	; (29cc <z_impl_k_thread_abort+0x40>)
    299e:	6853      	ldr	r3, [r2, #4]
    29a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    29a4:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    29a6:	f001 fa95 	bl	3ed4 <z_thread_single_abort>
	__asm__ volatile(
    29aa:	f04f 0320 	mov.w	r3, #32
    29ae:	f3ef 8011 	mrs	r0, BASEPRI
    29b2:	f383 8811 	msr	BASEPRI, r3
    29b6:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    29ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    29be:	f003 bad6 	b.w	5f6e <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    29c2:	f001 fd35 	bl	4430 <z_self_abort>
    29c6:	bf00      	nop
    29c8:	20000820 	.word	0x20000820
    29cc:	e000ed00 	.word	0xe000ed00

000029d0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    29d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    29d2:	4c09      	ldr	r4, [pc, #36]	; (29f8 <z_arm_configure_static_mpu_regions+0x28>)
    29d4:	4a09      	ldr	r2, [pc, #36]	; (29fc <z_arm_configure_static_mpu_regions+0x2c>)
    29d6:	4623      	mov	r3, r4
    29d8:	2101      	movs	r1, #1
    29da:	4809      	ldr	r0, [pc, #36]	; (2a00 <z_arm_configure_static_mpu_regions+0x30>)
    29dc:	f000 f940 	bl	2c60 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    29e0:	2300      	movs	r3, #0
    29e2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    29e4:	4b07      	ldr	r3, [pc, #28]	; (2a04 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    29e6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    29e8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    29ea:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    29ec:	9301      	str	r3, [sp, #4]
    29ee:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    29f0:	f000 f940 	bl	2c74 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    29f4:	b004      	add	sp, #16
    29f6:	bd10      	pop	{r4, pc}
    29f8:	20010000 	.word	0x20010000
    29fc:	20000000 	.word	0x20000000
    2a00:	000065c0 	.word	0x000065c0
    2a04:	20000160 	.word	0x20000160

00002a08 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    2a08:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2a0a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    2a0c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2a0e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    2a12:	f004 031f 	and.w	r3, r4, #31
    2a16:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2a18:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2a1a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2a1c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    2a20:	4904      	ldr	r1, [pc, #16]	; (2a34 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2a22:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    2a26:	f043 0301 	orr.w	r3, r3, #1
    2a2a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    2a2c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    2a2e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    2a30:	bd10      	pop	{r4, pc}
    2a32:	bf00      	nop
    2a34:	e000ed90 	.word	0xe000ed90

00002a38 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    2a38:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    2a3a:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    2a3c:	680c      	ldr	r4, [r1, #0]
{
    2a3e:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    2a40:	890a      	ldrh	r2, [r1, #8]
    2a42:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    2a44:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2a46:	3b01      	subs	r3, #1
    2a48:	f024 041f 	bic.w	r4, r4, #31
    2a4c:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    2a4e:	f002 021f 	and.w	r2, r2, #31
    2a52:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2a56:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    2a5a:	280f      	cmp	r0, #15
    2a5c:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    2a5e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2a62:	9303      	str	r3, [sp, #12]
    2a64:	d909      	bls.n	2a7a <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2a66:	4602      	mov	r2, r0
    2a68:	2145      	movs	r1, #69	; 0x45
    2a6a:	4806      	ldr	r0, [pc, #24]	; (2a84 <mpu_configure_region+0x4c>)
    2a6c:	f002 fde2 	bl	5634 <printk>
    2a70:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    2a74:	4620      	mov	r0, r4
    2a76:	b005      	add	sp, #20
    2a78:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    2a7a:	4669      	mov	r1, sp
    2a7c:	f7ff ffc4 	bl	2a08 <region_init>
	return region_allocate_and_init(index,
    2a80:	e7f8      	b.n	2a74 <mpu_configure_region+0x3c>
    2a82:	bf00      	nop
    2a84:	00007019 	.word	0x00007019

00002a88 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a8c:	4689      	mov	r9, r1
    2a8e:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2a90:	4606      	mov	r6, r0
    2a92:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    2a96:	4d52      	ldr	r5, [pc, #328]	; (2be0 <mpu_configure_regions_and_partition.constprop.0+0x158>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2a98:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    2a9a:	45c8      	cmp	r8, r9
    2a9c:	da23      	bge.n	2ae6 <mpu_configure_regions_and_partition.constprop.0+0x5e>
		if (regions[i].size == 0U) {
    2a9e:	6877      	ldr	r7, [r6, #4]
    2aa0:	2f00      	cmp	r7, #0
    2aa2:	d042      	beq.n	2b2a <mpu_configure_regions_and_partition.constprop.0+0xa2>
		&&
    2aa4:	2f1f      	cmp	r7, #31
    2aa6:	d917      	bls.n	2ad8 <mpu_configure_regions_and_partition.constprop.0+0x50>
		&&
    2aa8:	06fb      	lsls	r3, r7, #27
    2aaa:	d115      	bne.n	2ad8 <mpu_configure_regions_and_partition.constprop.0+0x50>
		((part->start &
    2aac:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    2ab0:	f01a 0f1f 	tst.w	sl, #31
    2ab4:	d110      	bne.n	2ad8 <mpu_configure_regions_and_partition.constprop.0+0x50>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2ab6:	4650      	mov	r0, sl
    2ab8:	f003 f92a 	bl	5d10 <arm_cmse_mpu_region_get>
    2abc:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2abe:	eb07 000a 	add.w	r0, r7, sl
    2ac2:	3801      	subs	r0, #1
    2ac4:	f003 f924 	bl	5d10 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2ac8:	4583      	cmp	fp, r0
    2aca:	d010      	beq.n	2aee <mpu_configure_regions_and_partition.constprop.0+0x66>
	return -EINVAL;
    2acc:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    2ad0:	465a      	mov	r2, fp
    2ad2:	2145      	movs	r1, #69	; 0x45
    2ad4:	4843      	ldr	r0, [pc, #268]	; (2be4 <mpu_configure_regions_and_partition.constprop.0+0x15c>)
    2ad6:	e002      	b.n	2ade <mpu_configure_regions_and_partition.constprop.0+0x56>
			LOG_ERR("Partition %u: sanity check failed.", i);
    2ad8:	4642      	mov	r2, r8
    2ada:	2145      	movs	r1, #69	; 0x45
    2adc:	4842      	ldr	r0, [pc, #264]	; (2be8 <mpu_configure_regions_and_partition.constprop.0+0x160>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2ade:	f002 fda9 	bl	5634 <printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    2ae2:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    2ae6:	4620      	mov	r0, r4
    2ae8:	b005      	add	sp, #20
    2aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    2aee:	f11b 0f16 	cmn.w	fp, #22
    2af2:	d0ed      	beq.n	2ad0 <mpu_configure_regions_and_partition.constprop.0+0x48>
			(u_reg_index > (reg_index - 1))) {
    2af4:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    2af6:	455b      	cmp	r3, fp
    2af8:	dbea      	blt.n	2ad0 <mpu_configure_regions_and_partition.constprop.0+0x48>
	MPU->RNR = index;
    2afa:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2afe:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    2b00:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2b04:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2b06:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    2b0a:	e9d6 3200 	ldrd	r3, r2, [r6]
    2b0e:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    2b10:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2b12:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    2b16:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    2b1a:	d11c      	bne.n	2b56 <mpu_configure_regions_and_partition.constprop.0+0xce>
    2b1c:	4557      	cmp	r7, sl
    2b1e:	d108      	bne.n	2b32 <mpu_configure_regions_and_partition.constprop.0+0xaa>
			mpu_configure_region(u_reg_index, &regions[i]);
    2b20:	4631      	mov	r1, r6
    2b22:	fa5f f08b 	uxtb.w	r0, fp
    2b26:	f7ff ff87 	bl	2a38 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    2b2a:	f108 0801 	add.w	r8, r8, #1
    2b2e:	360c      	adds	r6, #12
    2b30:	e7b3      	b.n	2a9a <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    2b32:	4631      	mov	r1, r6
	MPU->RNR = index;
    2b34:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2b38:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    2b3a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2b3e:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    2b42:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2b44:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    2b46:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    2b48:	f7ff ff76 	bl	2a38 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    2b4c:	f110 0f16 	cmn.w	r0, #22
    2b50:	d0c7      	beq.n	2ae2 <mpu_configure_regions_and_partition.constprop.0+0x5a>
			reg_index++;
    2b52:	1c44      	adds	r4, r0, #1
    2b54:	e7e9      	b.n	2b2a <mpu_configure_regions_and_partition.constprop.0+0xa2>
		} else if (reg_last == u_reg_last) {
    2b56:	3b01      	subs	r3, #1
    2b58:	4557      	cmp	r7, sl
    2b5a:	b2e0      	uxtb	r0, r4
    2b5c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    2b60:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
    2b64:	d106      	bne.n	2b74 <mpu_configure_regions_and_partition.constprop.0+0xec>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2b66:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    2b68:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2b6a:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    2b6e:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2b70:	612b      	str	r3, [r5, #16]
			reg_index =
    2b72:	e7e9      	b.n	2b48 <mpu_configure_regions_and_partition.constprop.0+0xc0>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2b74:	6929      	ldr	r1, [r5, #16]
    2b76:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    2b7a:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2b7c:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    2b7e:	4631      	mov	r1, r6
    2b80:	f7ff ff5a 	bl	2a38 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    2b84:	f110 0f16 	cmn.w	r0, #22
    2b88:	d0ab      	beq.n	2ae2 <mpu_configure_regions_and_partition.constprop.0+0x5a>
	MPU->RNR = index;
    2b8a:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    2b8e:	68ea      	ldr	r2, [r5, #12]
    2b90:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    2b94:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
    2b96:	f362 0304 	bfi	r3, r2, #0, #5
    2b9a:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2b9e:	692b      	ldr	r3, [r5, #16]
    2ba0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2ba4:	085b      	lsrs	r3, r3, #1
    2ba6:	f363 1247 	bfi	r2, r3, #5, #3
    2baa:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    2bae:	e9d6 3200 	ldrd	r3, r2, [r6]
    2bb2:	4413      	add	r3, r2
    2bb4:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    2bb6:	f023 031f 	bic.w	r3, r3, #31
    2bba:	443b      	add	r3, r7
			reg_index++;
    2bbc:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    2bbe:	eba3 0a0a 	sub.w	sl, r3, sl
    2bc2:	b2e0      	uxtb	r0, r4
    2bc4:	f02a 031f 	bic.w	r3, sl, #31
	if (index > (get_num_regions() - 1U)) {
    2bc8:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    2bca:	9303      	str	r3, [sp, #12]
    2bcc:	d903      	bls.n	2bd6 <mpu_configure_regions_and_partition.constprop.0+0x14e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2bce:	4602      	mov	r2, r0
    2bd0:	2145      	movs	r1, #69	; 0x45
    2bd2:	4806      	ldr	r0, [pc, #24]	; (2bec <mpu_configure_regions_and_partition.constprop.0+0x164>)
    2bd4:	e783      	b.n	2ade <mpu_configure_regions_and_partition.constprop.0+0x56>
	region_init(index, region_conf);
    2bd6:	4669      	mov	r1, sp
    2bd8:	f7ff ff16 	bl	2a08 <region_init>
    2bdc:	e7b9      	b.n	2b52 <mpu_configure_regions_and_partition.constprop.0+0xca>
    2bde:	bf00      	nop
    2be0:	e000ed90 	.word	0xe000ed90
    2be4:	0000706c 	.word	0x0000706c
    2be8:	00007044 	.word	0x00007044
    2bec:	00007019 	.word	0x00007019

00002bf0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2bf0:	2205      	movs	r2, #5
    2bf2:	4b03      	ldr	r3, [pc, #12]	; (2c00 <arm_core_mpu_enable+0x10>)
    2bf4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2bf6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2bfa:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2bfe:	4770      	bx	lr
    2c00:	e000ed90 	.word	0xe000ed90

00002c04 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2c04:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2c08:	2200      	movs	r2, #0
    2c0a:	4b01      	ldr	r3, [pc, #4]	; (2c10 <arm_core_mpu_disable+0xc>)
    2c0c:	605a      	str	r2, [r3, #4]
}
    2c0e:	4770      	bx	lr
    2c10:	e000ed90 	.word	0xe000ed90

00002c14 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    2c14:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2c16:	4c0e      	ldr	r4, [pc, #56]	; (2c50 <arm_mpu_init+0x3c>)
    2c18:	6825      	ldr	r5, [r4, #0]
    2c1a:	2d10      	cmp	r5, #16
    2c1c:	d814      	bhi.n	2c48 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2c1e:	f7ff fff1 	bl	2c04 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2c22:	2000      	movs	r0, #0
	MPU->MAIR0 =
    2c24:	4b0b      	ldr	r3, [pc, #44]	; (2c54 <arm_mpu_init+0x40>)
    2c26:	4a0c      	ldr	r2, [pc, #48]	; (2c58 <arm_mpu_init+0x44>)
    2c28:	631a      	str	r2, [r3, #48]	; 0x30
    2c2a:	4285      	cmp	r5, r0
    2c2c:	d105      	bne.n	2c3a <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2c2e:	4b0b      	ldr	r3, [pc, #44]	; (2c5c <arm_mpu_init+0x48>)
    2c30:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    2c32:	f7ff ffdd 	bl	2bf0 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    2c36:	2000      	movs	r0, #0
}
    2c38:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    2c3a:	6861      	ldr	r1, [r4, #4]
    2c3c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    2c40:	f7ff fee2 	bl	2a08 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2c44:	3001      	adds	r0, #1
    2c46:	e7f0      	b.n	2c2a <arm_mpu_init+0x16>
		return -1;
    2c48:	f04f 30ff 	mov.w	r0, #4294967295
    2c4c:	e7f4      	b.n	2c38 <arm_mpu_init+0x24>
    2c4e:	bf00      	nop
    2c50:	000065cc 	.word	0x000065cc
    2c54:	e000ed90 	.word	0xe000ed90
    2c58:	0044ffaa 	.word	0x0044ffaa
    2c5c:	20000880 	.word	0x20000880

00002c60 <arm_core_mpu_configure_static_mpu_regions>:
{
    2c60:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2c62:	4c03      	ldr	r4, [pc, #12]	; (2c70 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    2c64:	7822      	ldrb	r2, [r4, #0]
    2c66:	f7ff ff0f 	bl	2a88 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2c6a:	7020      	strb	r0, [r4, #0]
}
    2c6c:	bd10      	pop	{r4, pc}
    2c6e:	bf00      	nop
    2c70:	20000880 	.word	0x20000880

00002c74 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    2c74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c78:	4d26      	ldr	r5, [pc, #152]	; (2d14 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
    2c7a:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2c7c:	4606      	mov	r6, r0
    2c7e:	f04f 0800 	mov.w	r8, #0
    2c82:	46ab      	mov	fp, r5
	MPU->RNR = index;
    2c84:	4f24      	ldr	r7, [pc, #144]	; (2d18 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2c86:	45d0      	cmp	r8, sl
    2c88:	da1b      	bge.n	2cc2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    2c8a:	f8d6 9004 	ldr.w	r9, [r6, #4]
    2c8e:	f1b9 0f00 	cmp.w	r9, #0
    2c92:	d039      	beq.n	2d08 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    2c94:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2c96:	4608      	mov	r0, r1
    2c98:	9101      	str	r1, [sp, #4]
    2c9a:	f003 f839 	bl	5d10 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2c9e:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2ca0:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2ca2:	eb09 0001 	add.w	r0, r9, r1
    2ca6:	3801      	subs	r0, #1
    2ca8:	f003 f832 	bl	5d10 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2cac:	4284      	cmp	r4, r0
    2cae:	f04f 0214 	mov.w	r2, #20
    2cb2:	4b1a      	ldr	r3, [pc, #104]	; (2d1c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
    2cb4:	d008      	beq.n	2cc8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    2cb6:	f06f 0315 	mvn.w	r3, #21
    2cba:	fb02 f808 	mul.w	r8, r2, r8
    2cbe:	f84b 3008 	str.w	r3, [fp, r8]
}
    2cc2:	b003      	add	sp, #12
    2cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    2cc8:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    2ccc:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    2cce:	d0f8      	beq.n	2cc2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    2cd0:	7819      	ldrb	r1, [r3, #0]
    2cd2:	42a1      	cmp	r1, r4
    2cd4:	ddf5      	ble.n	2cc2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    2cd6:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    2cda:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    2cdc:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    2cde:	68fc      	ldr	r4, [r7, #12]
    2ce0:	f100 0108 	add.w	r1, r0, #8
    2ce4:	7b00      	ldrb	r0, [r0, #12]
    2ce6:	f364 0004 	bfi	r0, r4, #0, #5
    2cea:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2cec:	6938      	ldr	r0, [r7, #16]
    2cee:	790c      	ldrb	r4, [r1, #4]
    2cf0:	0840      	lsrs	r0, r0, #1
    2cf2:	f360 1447 	bfi	r4, r0, #5, #3
    2cf6:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    2cf8:	68f9      	ldr	r1, [r7, #12]
    2cfa:	f021 011f 	bic.w	r1, r1, #31
    2cfe:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    2d00:	6939      	ldr	r1, [r7, #16]
    2d02:	f021 011f 	bic.w	r1, r1, #31
    2d06:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2d08:	f108 0801 	add.w	r8, r8, #1
    2d0c:	3514      	adds	r5, #20
    2d0e:	360c      	adds	r6, #12
    2d10:	e7b9      	b.n	2c86 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    2d12:	bf00      	nop
    2d14:	20000800 	.word	0x20000800
    2d18:	e000ed90 	.word	0xe000ed90
    2d1c:	20000880 	.word	0x20000880

00002d20 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    2d20:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    2d22:	4b0c      	ldr	r3, [pc, #48]	; (2d54 <tz_nonsecure_state_setup+0x34>)
    2d24:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    2d26:	6803      	ldr	r3, [r0, #0]
    2d28:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    2d2c:	6843      	ldr	r3, [r0, #4]
    2d2e:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    2d32:	7b02      	ldrb	r2, [r0, #12]
    2d34:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    2d38:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    2d3c:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    2d40:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    2d42:	bf48      	it	mi
    2d44:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    2d48:	b109      	cbz	r1, 2d4e <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    2d4a:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    2d4e:	f383 8894 	msr	CONTROL_NS, r3
}
    2d52:	4770      	bx	lr
    2d54:	e002ed00 	.word	0xe002ed00

00002d58 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2d58:	4a08      	ldr	r2, [pc, #32]	; (2d7c <tz_nbanked_exception_target_state_set+0x24>)
    2d5a:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    2d5c:	b148      	cbz	r0, 2d72 <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    2d5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2d62:	041b      	lsls	r3, r3, #16
    2d64:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    2d66:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    2d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    2d6e:	60d3      	str	r3, [r2, #12]
}
    2d70:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2d72:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    2d74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2d78:	e7f5      	b.n	2d66 <tz_nbanked_exception_target_state_set+0xe>
    2d7a:	bf00      	nop
    2d7c:	e000ed00 	.word	0xe000ed00

00002d80 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2d80:	4a08      	ldr	r2, [pc, #32]	; (2da4 <tz_nonsecure_exception_prio_config+0x24>)
    2d82:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    2d84:	b140      	cbz	r0, 2d98 <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2d86:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    2d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    2d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    2d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    2d94:	60d3      	str	r3, [r2, #12]
}
    2d96:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    2d98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    2d9c:	041b      	lsls	r3, r3, #16
    2d9e:	0c1b      	lsrs	r3, r3, #16
    2da0:	e7f4      	b.n	2d8c <tz_nonsecure_exception_prio_config+0xc>
    2da2:	bf00      	nop
    2da4:	e000ed00 	.word	0xe000ed00

00002da8 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2da8:	4a08      	ldr	r2, [pc, #32]	; (2dcc <tz_nonsecure_system_reset_req_block+0x24>)
    2daa:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    2dac:	b140      	cbz	r0, 2dc0 <tz_nonsecure_system_reset_req_block+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2dae:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    2db0:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    2db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    2db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    2dbc:	60d3      	str	r3, [r2, #12]
}
    2dbe:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    2dc0:	f023 0308 	bic.w	r3, r3, #8
    2dc4:	041b      	lsls	r3, r3, #16
    2dc6:	0c1b      	lsrs	r3, r3, #16
    2dc8:	e7f4      	b.n	2db4 <tz_nonsecure_system_reset_req_block+0xc>
    2dca:	bf00      	nop
    2dcc:	e000ed00 	.word	0xe000ed00

00002dd0 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    2dd0:	4a03      	ldr	r2, [pc, #12]	; (2de0 <tz_nonsecure_fpu_access_enable+0x10>)
    2dd2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2dd6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2dda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    2dde:	4770      	bx	lr
    2de0:	e000ed00 	.word	0xe000ed00

00002de4 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
    2de4:	4b08      	ldr	r3, [pc, #32]	; (2e08 <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    2de6:	681a      	ldr	r2, [r3, #0]
    2de8:	b118      	cbz	r0, 2df2 <tz_sau_configure+0xe>
    2dea:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    2dee:	601a      	str	r2, [r3, #0]
		}
	}
}
    2df0:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    2df2:	f022 0201 	bic.w	r2, r2, #1
    2df6:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    2df8:	681a      	ldr	r2, [r3, #0]
		if (allns) {
    2dfa:	b111      	cbz	r1, 2e02 <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    2dfc:	f042 0202 	orr.w	r2, r2, #2
    2e00:	e7f5      	b.n	2dee <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    2e02:	f022 0202 	bic.w	r2, r2, #2
    2e06:	e7f2      	b.n	2dee <tz_sau_configure+0xa>
    2e08:	e000edd0 	.word	0xe000edd0

00002e0c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2e0c:	4b01      	ldr	r3, [pc, #4]	; (2e14 <__stdout_hook_install+0x8>)
    2e0e:	6018      	str	r0, [r3, #0]
}
    2e10:	4770      	bx	lr
    2e12:	bf00      	nop
    2e14:	20000024 	.word	0x20000024

00002e18 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2e18:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2e1a:	794b      	ldrb	r3, [r1, #5]
    2e1c:	2b01      	cmp	r3, #1
    2e1e:	d029      	beq.n	2e74 <uarte_nrfx_configure+0x5c>
    2e20:	2b03      	cmp	r3, #3
    2e22:	d124      	bne.n	2e6e <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2e24:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2e26:	798b      	ldrb	r3, [r1, #6]
    2e28:	2b03      	cmp	r3, #3
    2e2a:	d120      	bne.n	2e6e <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2e2c:	79cc      	ldrb	r4, [r1, #7]
    2e2e:	b124      	cbz	r4, 2e3a <uarte_nrfx_configure+0x22>
    2e30:	2c01      	cmp	r4, #1
    2e32:	d11c      	bne.n	2e6e <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    2e34:	6843      	ldr	r3, [r0, #4]
    2e36:	791b      	ldrb	r3, [r3, #4]
    2e38:	b1cb      	cbz	r3, 2e6e <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2e3a:	790a      	ldrb	r2, [r1, #4]
    2e3c:	b112      	cbz	r2, 2e44 <uarte_nrfx_configure+0x2c>
    2e3e:	2a02      	cmp	r2, #2
    2e40:	d115      	bne.n	2e6e <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2e42:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2e44:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2e46:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2e48:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2e4c:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2e4e:	d065      	beq.n	2f1c <uarte_nrfx_configure+0x104>
    2e50:	d82d      	bhi.n	2eae <uarte_nrfx_configure+0x96>
    2e52:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2e56:	d064      	beq.n	2f22 <uarte_nrfx_configure+0x10a>
    2e58:	d816      	bhi.n	2e88 <uarte_nrfx_configure+0x70>
    2e5a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2e5e:	d062      	beq.n	2f26 <uarte_nrfx_configure+0x10e>
    2e60:	d80a      	bhi.n	2e78 <uarte_nrfx_configure+0x60>
    2e62:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2e66:	d061      	beq.n	2f2c <uarte_nrfx_configure+0x114>
    2e68:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2e6c:	d061      	beq.n	2f32 <uarte_nrfx_configure+0x11a>
    2e6e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2e72:	e052      	b.n	2f1a <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
    2e74:	2600      	movs	r6, #0
    2e76:	e7d6      	b.n	2e26 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2e78:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2e7c:	d05c      	beq.n	2f38 <uarte_nrfx_configure+0x120>
    2e7e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2e82:	d1f4      	bne.n	2e6e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2e84:	4b37      	ldr	r3, [pc, #220]	; (2f64 <uarte_nrfx_configure+0x14c>)
    2e86:	e03c      	b.n	2f02 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    2e88:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2e8c:	d057      	beq.n	2f3e <uarte_nrfx_configure+0x126>
    2e8e:	d807      	bhi.n	2ea0 <uarte_nrfx_configure+0x88>
    2e90:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2e94:	d055      	beq.n	2f42 <uarte_nrfx_configure+0x12a>
    2e96:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2e9a:	d1e8      	bne.n	2e6e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2e9c:	4b32      	ldr	r3, [pc, #200]	; (2f68 <uarte_nrfx_configure+0x150>)
    2e9e:	e030      	b.n	2f02 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    2ea0:	f647 2712 	movw	r7, #31250	; 0x7a12
    2ea4:	42bb      	cmp	r3, r7
    2ea6:	d1e2      	bne.n	2e6e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2ea8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2eac:	e029      	b.n	2f02 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    2eae:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2eb2:	d048      	beq.n	2f46 <uarte_nrfx_configure+0x12e>
    2eb4:	d813      	bhi.n	2ede <uarte_nrfx_configure+0xc6>
    2eb6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2eba:	d047      	beq.n	2f4c <uarte_nrfx_configure+0x134>
    2ebc:	d809      	bhi.n	2ed2 <uarte_nrfx_configure+0xba>
    2ebe:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2ec2:	42bb      	cmp	r3, r7
    2ec4:	d044      	beq.n	2f50 <uarte_nrfx_configure+0x138>
    2ec6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2eca:	d1d0      	bne.n	2e6e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2ecc:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2ed0:	e017      	b.n	2f02 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    2ed2:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2ed6:	d1ca      	bne.n	2e6e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2ed8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2edc:	e011      	b.n	2f02 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    2ede:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2ee2:	d038      	beq.n	2f56 <uarte_nrfx_configure+0x13e>
    2ee4:	d808      	bhi.n	2ef8 <uarte_nrfx_configure+0xe0>
    2ee6:	4f21      	ldr	r7, [pc, #132]	; (2f6c <uarte_nrfx_configure+0x154>)
    2ee8:	42bb      	cmp	r3, r7
    2eea:	d037      	beq.n	2f5c <uarte_nrfx_configure+0x144>
    2eec:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2ef0:	d1bd      	bne.n	2e6e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2ef2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2ef6:	e004      	b.n	2f02 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    2ef8:	4f1d      	ldr	r7, [pc, #116]	; (2f70 <uarte_nrfx_configure+0x158>)
    2efa:	42bb      	cmp	r3, r7
    2efc:	d1b7      	bne.n	2e6e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2efe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2f02:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2f06:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
    2f08:	4334      	orrs	r4, r6
    2f0a:	4322      	orrs	r2, r4
    2f0c:	3304      	adds	r3, #4
    2f0e:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2f10:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2f14:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2f18:	2000      	movs	r0, #0
}
    2f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2f1c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2f20:	e7ef      	b.n	2f02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2f22:	4b14      	ldr	r3, [pc, #80]	; (2f74 <uarte_nrfx_configure+0x15c>)
    2f24:	e7ed      	b.n	2f02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2f26:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2f2a:	e7ea      	b.n	2f02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
    2f2c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2f30:	e7e7      	b.n	2f02 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    2f32:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2f36:	e7e4      	b.n	2f02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2f38:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2f3c:	e7e1      	b.n	2f02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2f3e:	4b0e      	ldr	r3, [pc, #56]	; (2f78 <uarte_nrfx_configure+0x160>)
    2f40:	e7df      	b.n	2f02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2f42:	4b0e      	ldr	r3, [pc, #56]	; (2f7c <uarte_nrfx_configure+0x164>)
    2f44:	e7dd      	b.n	2f02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2f46:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2f4a:	e7da      	b.n	2f02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2f4c:	4b0c      	ldr	r3, [pc, #48]	; (2f80 <uarte_nrfx_configure+0x168>)
    2f4e:	e7d8      	b.n	2f02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2f50:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2f54:	e7d5      	b.n	2f02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2f56:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2f5a:	e7d2      	b.n	2f02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2f5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2f60:	e7cf      	b.n	2f02 <uarte_nrfx_configure+0xea>
    2f62:	bf00      	nop
    2f64:	0013b000 	.word	0x0013b000
    2f68:	004ea000 	.word	0x004ea000
    2f6c:	0003d090 	.word	0x0003d090
    2f70:	000f4240 	.word	0x000f4240
    2f74:	00275000 	.word	0x00275000
    2f78:	0075c000 	.word	0x0075c000
    2f7c:	003af000 	.word	0x003af000
    2f80:	013a9000 	.word	0x013a9000

00002f84 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f88:	4606      	mov	r6, r0
    2f8a:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    2f8c:	68c7      	ldr	r7, [r0, #12]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2f8e:	f003 f89a 	bl	60c6 <k_is_in_isr>
    2f92:	b9b8      	cbnz	r0, 2fc4 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
    2f94:	4b28      	ldr	r3, [pc, #160]	; (3038 <uarte_nrfx_poll_out+0xb4>)
    2f96:	781b      	ldrb	r3, [r3, #0]
    2f98:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
    2f9c:	6872      	ldr	r2, [r6, #4]
    2f9e:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
    2fa0:	b193      	cbz	r3, 2fc8 <uarte_nrfx_poll_out+0x44>
    2fa2:	f04f 0320 	mov.w	r3, #32
    2fa6:	f3ef 8411 	mrs	r4, BASEPRI
    2faa:	f383 8811 	msr	BASEPRI, r3
    2fae:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    2fb2:	4630      	mov	r0, r6
    2fb4:	f002 ff7e 	bl	5eb4 <is_tx_ready>
    2fb8:	bb38      	cbnz	r0, 300a <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
    2fba:	f384 8811 	msr	BASEPRI, r4
    2fbe:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2fc2:	e7ee      	b.n	2fa2 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2fc4:	2301      	movs	r3, #1
    2fc6:	e7e9      	b.n	2f9c <uarte_nrfx_poll_out+0x18>
    2fc8:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2fca:	4630      	mov	r0, r6
    2fcc:	f002 ff72 	bl	5eb4 <is_tx_ready>
    2fd0:	b970      	cbnz	r0, 2ff0 <uarte_nrfx_poll_out+0x6c>
    2fd2:	2001      	movs	r0, #1
    2fd4:	f002 ff9a 	bl	5f0c <nrfx_busy_wait>
    2fd8:	3c01      	subs	r4, #1
    2fda:	d1f6      	bne.n	2fca <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
    2fdc:	2100      	movs	r1, #0
    2fde:	2021      	movs	r0, #33	; 0x21
    2fe0:	f001 f926 	bl	4230 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2fe4:	e7f0      	b.n	2fc8 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    2fe6:	f384 8811 	msr	BASEPRI, r4
    2fea:	f3bf 8f6f 	isb	sy
}
    2fee:	e7f5      	b.n	2fdc <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
    2ff0:	f04f 0320 	mov.w	r3, #32
    2ff4:	f3ef 8411 	mrs	r4, BASEPRI
    2ff8:	f383 8811 	msr	BASEPRI, r3
    2ffc:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3000:	4630      	mov	r0, r6
    3002:	f002 ff57 	bl	5eb4 <is_tx_ready>
    3006:	2800      	cmp	r0, #0
    3008:	d0ed      	beq.n	2fe6 <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    300a:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    300c:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
    300e:	f807 8f10 	strb.w	r8, [r7, #16]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3012:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3016:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    301a:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    301e:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
    3022:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
    3026:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    302a:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
    302c:	f384 8811 	msr	BASEPRI, r4
    3030:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
    3034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3038:	20000881 	.word	0x20000881

0000303c <uarte_instance_init.isra.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    303c:	f04f 0c00 	mov.w	ip, #0
	return config->uarte_regs;
    3040:	6843      	ldr	r3, [r0, #4]
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    3042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3046:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
    3048:	681c      	ldr	r4, [r3, #0]
static int uarte_instance_init(const struct device *dev,
    304a:	460f      	mov	r7, r1
    304c:	f8c4 c500 	str.w	ip, [r4, #1280]	; 0x500
    3050:	4605      	mov	r5, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
    3052:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(config->pseltxd, 1);
    3054:	6808      	ldr	r0, [r1, #0]

NRF_STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3056:	2101      	movs	r1, #1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    3058:	4b3e      	ldr	r3, [pc, #248]	; (3154 <uarte_instance_init.isra.0+0x118>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    305a:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    305e:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
    3060:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3062:	2103      	movs	r1, #3
    3064:	3280      	adds	r2, #128	; 0x80
    3066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    306a:	687a      	ldr	r2, [r7, #4]
    306c:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
    306e:	bf1e      	ittt	ne
    3070:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3074:	3180      	addne	r1, #128	; 0x80
    3076:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    307a:	68b9      	ldr	r1, [r7, #8]
    p_reg->PSEL.TXD = pseltxd;
    307c:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    3080:	1c48      	adds	r0, r1, #1
    3082:	bf18      	it	ne
    3084:	2000      	movne	r0, #0
    p_reg->PSEL.RXD = pselrxd;
    3086:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
    308a:	bf1e      	ittt	ne
    308c:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3090:	3280      	addne	r2, #128	; 0x80
    3092:	f843 0022 	strne.w	r0, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    3096:	68f8      	ldr	r0, [r7, #12]
    3098:	1c42      	adds	r2, r0, #1
    309a:	d00c      	beq.n	30b6 <uarte_instance_init.isra.0+0x7a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    309c:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
    30a0:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    30a4:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
    30a8:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    30ac:	f04f 0c03 	mov.w	ip, #3
    30b0:	3280      	adds	r2, #128	; 0x80
    30b2:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    30b6:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    30ba:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    30be:	68e9      	ldr	r1, [r5, #12]
    30c0:	4628      	mov	r0, r5
    30c2:	3104      	adds	r1, #4
    30c4:	f7ff fea8 	bl	2e18 <uarte_nrfx_configure>
	if (err) {
    30c8:	4680      	mov	r8, r0
    30ca:	b978      	cbnz	r0, 30ec <uarte_instance_init.isra.0+0xb0>

#ifdef CONFIG_PM_DEVICE
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
#endif

	if (get_dev_config(dev)->ppi_endtx) {
    30cc:	686b      	ldr	r3, [r5, #4]
    30ce:	799b      	ldrb	r3, [r3, #6]
    30d0:	b1e3      	cbz	r3, 310c <uarte_instance_init.isra.0+0xd0>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    30d2:	f106 0012 	add.w	r0, r6, #18
    30d6:	f000 fa4d 	bl	3574 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    30da:	4b1f      	ldr	r3, [pc, #124]	; (3158 <uarte_instance_init.isra.0+0x11c>)
    30dc:	4298      	cmp	r0, r3
    30de:	d008      	beq.n	30f2 <uarte_instance_init.isra.0+0xb6>
		LOG_ERR("Failed to allocate PPI Channel");
    30e0:	2145      	movs	r1, #69	; 0x45
    30e2:	481e      	ldr	r0, [pc, #120]	; (315c <uarte_instance_init.isra.0+0x120>)
    30e4:	f002 faa6 	bl	5634 <printk>
		return -EIO;
    30e8:	f06f 0804 	mvn.w	r8, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    30ec:	4640      	mov	r0, r8
    30ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    30f2:	7cb3      	ldrb	r3, [r6, #18]
    30f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    30f8:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    30fc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3100:	2301      	movs	r3, #1
    3102:	7cb2      	ldrb	r2, [r6, #18]
    3104:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    3106:	4a16      	ldr	r2, [pc, #88]	; (3160 <uarte_instance_init.isra.0+0x124>)
    3108:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    310c:	2308      	movs	r3, #8
    310e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    3112:	687b      	ldr	r3, [r7, #4]
    3114:	3301      	adds	r3, #1
    3116:	d00c      	beq.n	3132 <uarte_instance_init.isra.0+0xf6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3118:	2300      	movs	r3, #0
    311a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    311e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    3122:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3126:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    312a:	2301      	movs	r3, #1
    312c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3130:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
    3132:	686b      	ldr	r3, [r5, #4]
    3134:	799b      	ldrb	r3, [r3, #6]
    3136:	b91b      	cbnz	r3, 3140 <uarte_instance_init.isra.0+0x104>
    p_reg->INTENSET = mask;
    3138:	f44f 7380 	mov.w	r3, #256	; 0x100
    313c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    3140:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    3142:	3610      	adds	r6, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3144:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3148:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    314c:	2301      	movs	r3, #1
    314e:	60a3      	str	r3, [r4, #8]
    3150:	60e3      	str	r3, [r4, #12]
	return 0;
    3152:	e7cb      	b.n	30ec <uarte_instance_init.isra.0+0xb0>
    3154:	50842500 	.word	0x50842500
    3158:	0bad0000 	.word	0x0bad0000
    315c:	000070a3 	.word	0x000070a3
    3160:	50017000 	.word	0x50017000

00003164 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    3164:	b530      	push	{r4, r5, lr}
    3166:	b085      	sub	sp, #20
    3168:	466c      	mov	r4, sp
    316a:	4605      	mov	r5, r0
    316c:	4b08      	ldr	r3, [pc, #32]	; (3190 <uarte_0_init+0x2c>)
    316e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3170:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    3174:	2200      	movs	r2, #0
    3176:	2101      	movs	r1, #1
    3178:	2008      	movs	r0, #8
    317a:	f7ff f839 	bl	21f0 <z_arm_irq_priority_set>
    317e:	2008      	movs	r0, #8
    3180:	f7ff f818 	bl	21b4 <arch_irq_enable>
    3184:	4621      	mov	r1, r4
    3186:	4628      	mov	r0, r5
    3188:	f7ff ff58 	bl	303c <uarte_instance_init.isra.0>
    318c:	b005      	add	sp, #20
    318e:	bd30      	pop	{r4, r5, pc}
    3190:	0000642c 	.word	0x0000642c

00003194 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    3194:	b530      	push	{r4, r5, lr}
    3196:	b085      	sub	sp, #20
    3198:	466c      	mov	r4, sp
    319a:	4605      	mov	r5, r0
    319c:	4b08      	ldr	r3, [pc, #32]	; (31c0 <uarte_1_init+0x2c>)
    319e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    31a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    31a4:	2200      	movs	r2, #0
    31a6:	2101      	movs	r1, #1
    31a8:	2009      	movs	r0, #9
    31aa:	f7ff f821 	bl	21f0 <z_arm_irq_priority_set>
    31ae:	2009      	movs	r0, #9
    31b0:	f7ff f800 	bl	21b4 <arch_irq_enable>
    31b4:	4621      	mov	r1, r4
    31b6:	4628      	mov	r0, r5
    31b8:	f7ff ff40 	bl	303c <uarte_instance_init.isra.0>
    31bc:	b005      	add	sp, #20
    31be:	bd30      	pop	{r4, r5, pc}
    31c0:	0000643c 	.word	0x0000643c

000031c4 <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    31c4:	4803      	ldr	r0, [pc, #12]	; (31d4 <k_sys_fatal_error_handler+0x10>)
    31c6:	2145      	movs	r1, #69	; 0x45
{
    31c8:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
    31ca:	f002 fa33 	bl	5634 <printk>
	sys_arch_reboot(0);
    31ce:	2000      	movs	r0, #0
    31d0:	f7ff fb88 	bl	28e4 <sys_arch_reboot>

	CODE_UNREACHABLE;
    31d4:	000070de 	.word	0x000070de

000031d8 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
    31d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    31dc:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    31de:	4c21      	ldr	r4, [pc, #132]	; (3264 <check_ext_api_requests+0x8c>)
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
    31e0:	4e21      	ldr	r6, [pc, #132]	; (3268 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    31e2:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    31e6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3270 <check_ext_api_requests+0x98>
{
    31ea:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    31ec:	45a8      	cmp	r8, r5
    31ee:	d803      	bhi.n	31f8 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    31f0:	2000      	movs	r0, #0
    31f2:	b005      	add	sp, #20
    31f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
    31f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    31fa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    31fe:	681f      	ldr	r7, [r3, #0]
    3200:	ab01      	add	r3, sp, #4
    3202:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    3206:	220c      	movs	r2, #12
    3208:	4619      	mov	r1, r3
    320a:	4638      	mov	r0, r7
    320c:	f002 fdab 	bl	5d66 <memcmp>
    3210:	b990      	cbnz	r0, 3238 <check_ext_api_requests+0x60>
    3212:	b18f      	cbz	r7, 3238 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    3214:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
    3216:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    3218:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    321a:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    321c:	4291      	cmp	r1, r2
    321e:	d10b      	bne.n	3238 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    3220:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
    3222:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    3224:	4291      	cmp	r1, r2
    3226:	d807      	bhi.n	3238 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
    3228:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    322a:	4291      	cmp	r1, r2
    322c:	d904      	bls.n	3238 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
    322e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    3230:	695b      	ldr	r3, [r3, #20]
    3232:	ea32 0303 	bics.w	r3, r2, r3
    3236:	d00a      	beq.n	324e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    3238:	6a27      	ldr	r7, [r4, #32]
    323a:	b167      	cbz	r7, 3256 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    323c:	480b      	ldr	r0, [pc, #44]	; (326c <check_ext_api_requests+0x94>)
    323e:	f002 f9f9 	bl	5634 <printk>
			k_panic();
    3242:	4040      	eors	r0, r0
    3244:	f380 8811 	msr	BASEPRI, r0
    3248:	f04f 0004 	mov.w	r0, #4
    324c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    324e:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    3250:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    3252:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    3254:	e7ca      	b.n	31ec <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    3256:	4648      	mov	r0, r9
    3258:	f002 f9ec 	bl	5634 <printk>
			*ext_api_req->ext_api = NULL;
    325c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    325e:	601f      	str	r7, [r3, #0]
    3260:	e7f5      	b.n	324e <check_ext_api_requests+0x76>
    3262:	bf00      	nop
    3264:	0000023c 	.word	0x0000023c
    3268:	0000644c 	.word	0x0000644c
    326c:	00007100 	.word	0x00007100
    3270:	00007129 	.word	0x00007129

00003274 <nrf91_errata_14>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    3274:	4b05      	ldr	r3, [pc, #20]	; (328c <nrf91_errata_14+0x18>)
    3276:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    3278:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    327a:	681b      	ldr	r3, [r3, #0]
    327c:	2b09      	cmp	r3, #9
    327e:	d103      	bne.n	3288 <nrf91_errata_14+0x14>
            {
                switch(var2)
    3280:	1e43      	subs	r3, r0, #1
    3282:	4258      	negs	r0, r3
    3284:	4158      	adcs	r0, r3
    3286:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    3288:	2000      	movs	r0, #0
    #endif
}
    328a:	4770      	bx	lr
    328c:	00ff0134 	.word	0x00ff0134

00003290 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    3290:	4a4f      	ldr	r2, [pc, #316]	; (33d0 <SystemInit+0x140>)
{
    3292:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    3294:	6813      	ldr	r3, [r2, #0]
    3296:	f043 0302 	orr.w	r3, r3, #2
    329a:	6013      	str	r3, [r2, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    329c:	4b4d      	ldr	r3, [pc, #308]	; (33d4 <SystemInit+0x144>)
            if (var1 == 0x09)
    329e:	681b      	ldr	r3, [r3, #0]
    32a0:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    32a2:	bf01      	itttt	eq
    32a4:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    32a8:	2200      	moveq	r2, #0
    32aa:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    32ae:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    32b2:	f7ff ffdf 	bl	3274 <nrf91_errata_14>
    32b6:	b130      	cbz	r0, 32c6 <SystemInit+0x36>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    32b8:	2301      	movs	r3, #1
    32ba:	4a47      	ldr	r2, [pc, #284]	; (33d8 <SystemInit+0x148>)
    32bc:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    32be:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    32c2:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    32c6:	4b43      	ldr	r3, [pc, #268]	; (33d4 <SystemInit+0x144>)
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    32c8:	681b      	ldr	r3, [r3, #0]
    32ca:	2b09      	cmp	r3, #9
    32cc:	d107      	bne.n	32de <SystemInit+0x4e>
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    32ce:	4b43      	ldr	r3, [pc, #268]	; (33dc <SystemInit+0x14c>)
            {
                switch(var2)
    32d0:	681b      	ldr	r3, [r3, #0]
    32d2:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    32d4:	bf1e      	ittt	ne
    32d6:	2201      	movne	r2, #1
    32d8:	4b41      	ldrne	r3, [pc, #260]	; (33e0 <SystemInit+0x150>)
    32da:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    32de:	f7ff ffc9 	bl	3274 <nrf91_errata_14>
    32e2:	b110      	cbz	r0, 32ea <SystemInit+0x5a>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    32e4:	220e      	movs	r2, #14
    32e6:	4b3f      	ldr	r3, [pc, #252]	; (33e4 <SystemInit+0x154>)
    32e8:	601a      	str	r2, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    32ea:	4b3a      	ldr	r3, [pc, #232]	; (33d4 <SystemInit+0x144>)
            if (var1 == 0x09)
    32ec:	681b      	ldr	r3, [r3, #0]
    32ee:	2b09      	cmp	r3, #9
    32f0:	d104      	bne.n	32fc <SystemInit+0x6c>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    32f2:	2200      	movs	r2, #0
    32f4:	4b3c      	ldr	r3, [pc, #240]	; (33e8 <SystemInit+0x158>)
    32f6:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    32f8:	2201      	movs	r2, #1
    32fa:	605a      	str	r2, [r3, #4]
{
    32fc:	2200      	movs	r2, #0
    32fe:	00d3      	lsls	r3, r2, #3
    3300:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3304:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    3308:	3101      	adds	r1, #1
    330a:	d008      	beq.n	331e <SystemInit+0x8e>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    330c:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3310:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    3312:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3316:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    331a:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    331c:	d1ef      	bne.n	32fe <SystemInit+0x6e>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    331e:	4b33      	ldr	r3, [pc, #204]	; (33ec <SystemInit+0x15c>)
    3320:	69da      	ldr	r2, [r3, #28]
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    3322:	07d1      	lsls	r1, r2, #31
    3324:	d53b      	bpl.n	339e <SystemInit+0x10e>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3326:	4b32      	ldr	r3, [pc, #200]	; (33f0 <SystemInit+0x160>)
    3328:	4619      	mov	r1, r3
    332a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    332e:	2a01      	cmp	r2, #1
    3330:	d1fb      	bne.n	332a <SystemInit+0x9a>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    3332:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3336:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    333a:	2b01      	cmp	r3, #1
    333c:	d1fb      	bne.n	3336 <SystemInit+0xa6>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    333e:	4b2b      	ldr	r3, [pc, #172]	; (33ec <SystemInit+0x15c>)
    3340:	69da      	ldr	r2, [r3, #28]
          if (uicr_HFXOSRC_erased()){
    3342:	07d2      	lsls	r2, r2, #31
    3344:	d508      	bpl.n	3358 <SystemInit+0xc8>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    3346:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3348:	4929      	ldr	r1, [pc, #164]	; (33f0 <SystemInit+0x160>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    334a:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    334e:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3350:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    3354:	2a01      	cmp	r2, #1
    3356:	d1fb      	bne.n	3350 <SystemInit+0xc0>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    3358:	6a1a      	ldr	r2, [r3, #32]
    335a:	3201      	adds	r2, #1
    335c:	d10a      	bne.n	3374 <SystemInit+0xe4>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    335e:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    3360:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    3364:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    3368:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    336a:	4a21      	ldr	r2, [pc, #132]	; (33f0 <SystemInit+0x160>)
    336c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    3370:	2b01      	cmp	r3, #1
    3372:	d1fb      	bne.n	336c <SystemInit+0xdc>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    3374:	2200      	movs	r2, #0
    3376:	4b1e      	ldr	r3, [pc, #120]	; (33f0 <SystemInit+0x160>)
    3378:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    337c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3380:	2a01      	cmp	r2, #1
    3382:	d1fb      	bne.n	337c <SystemInit+0xec>
  __ASM volatile ("dsb 0xF":::"memory");
    3384:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3388:	491a      	ldr	r1, [pc, #104]	; (33f4 <SystemInit+0x164>)
    338a:	4b1b      	ldr	r3, [pc, #108]	; (33f8 <SystemInit+0x168>)
    338c:	68ca      	ldr	r2, [r1, #12]
    338e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3392:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3394:	60cb      	str	r3, [r1, #12]
    3396:	f3bf 8f4f 	dsb	sy
    __NOP();
    339a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    339c:	e7fd      	b.n	339a <SystemInit+0x10a>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    339e:	6a1b      	ldr	r3, [r3, #32]
    33a0:	3301      	adds	r3, #1
    33a2:	d0c0      	beq.n	3326 <SystemInit+0x96>
        SCB->NSACR |= (3UL << 10);
    33a4:	4b13      	ldr	r3, [pc, #76]	; (33f4 <SystemInit+0x164>)
    33a6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    33aa:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    33ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    33b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    33b6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    33ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    33be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    33c2:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
    33c6:	4b0d      	ldr	r3, [pc, #52]	; (33fc <SystemInit+0x16c>)
    33c8:	4a0d      	ldr	r2, [pc, #52]	; (3400 <SystemInit+0x170>)
    33ca:	601a      	str	r2, [r3, #0]
}
    33cc:	bd08      	pop	{r3, pc}
    33ce:	bf00      	nop
    33d0:	e000edd0 	.word	0xe000edd0
    33d4:	00ff0130 	.word	0x00ff0130
    33d8:	50004a38 	.word	0x50004a38
    33dc:	00ff0134 	.word	0x00ff0134
    33e0:	50004000 	.word	0x50004000
    33e4:	5003aee4 	.word	0x5003aee4
    33e8:	5000470c 	.word	0x5000470c
    33ec:	00ff8000 	.word	0x00ff8000
    33f0:	50039000 	.word	0x50039000
    33f4:	e000ed00 	.word	0xe000ed00
    33f8:	05fa0004 	.word	0x05fa0004
    33fc:	20000050 	.word	0x20000050
    3400:	03d09000 	.word	0x03d09000

00003404 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3404:	4b04      	ldr	r3, [pc, #16]	; (3418 <nrfx_clock_init+0x14>)
    3406:	791a      	ldrb	r2, [r3, #4]
    3408:	b922      	cbnz	r2, 3414 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    340a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    340c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    340e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    3410:	4802      	ldr	r0, [pc, #8]	; (341c <nrfx_clock_init+0x18>)
    3412:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3414:	4802      	ldr	r0, [pc, #8]	; (3420 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3416:	4770      	bx	lr
    3418:	20000814 	.word	0x20000814
    341c:	0bad0000 	.word	0x0bad0000
    3420:	0bad000c 	.word	0x0bad000c

00003424 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    3424:	b110      	cbz	r0, 342c <nrfx_clock_start+0x8>
    3426:	2801      	cmp	r0, #1
    3428:	d020      	beq.n	346c <nrfx_clock_start+0x48>
    342a:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    342c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    3430:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3434:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    3438:	03c9      	lsls	r1, r1, #15
    343a:	d511      	bpl.n	3460 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    343c:	f003 0303 	and.w	r3, r3, #3
    3440:	2b02      	cmp	r3, #2
    3442:	d10d      	bne.n	3460 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3444:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3448:	2200      	movs	r2, #0
    344a:	4b0d      	ldr	r3, [pc, #52]	; (3480 <nrfx_clock_start+0x5c>)
    344c:	601a      	str	r2, [r3, #0]
    344e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3450:	2202      	movs	r2, #2
    3452:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3456:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    345a:	2201      	movs	r2, #1
    345c:	609a      	str	r2, [r3, #8]
}
    345e:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    3460:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3464:	2201      	movs	r2, #1
    3466:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    346a:	e7ed      	b.n	3448 <nrfx_clock_start+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    346c:	2200      	movs	r2, #0
    346e:	4b05      	ldr	r3, [pc, #20]	; (3484 <nrfx_clock_start+0x60>)
    3470:	601a      	str	r2, [r3, #0]
    3472:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3474:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3478:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    347c:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    347e:	4770      	bx	lr
    3480:	50005104 	.word	0x50005104
    3484:	50005100 	.word	0x50005100

00003488 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    3488:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    348a:	b110      	cbz	r0, 3492 <nrfx_clock_stop+0xa>
    348c:	2801      	cmp	r0, #1
    348e:	d018      	beq.n	34c2 <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3490:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    3492:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3496:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3498:	2101      	movs	r1, #1
    349a:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    349e:	461c      	mov	r4, r3
    p_reg->INTENCLR = mask;
    34a0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34a4:	4a15      	ldr	r2, [pc, #84]	; (34fc <nrfx_clock_stop+0x74>)
    34a6:	6010      	str	r0, [r2, #0]
    34a8:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    34aa:	4a15      	ldr	r2, [pc, #84]	; (3500 <nrfx_clock_stop+0x78>)
    34ac:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    34ae:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    34b2:	03db      	lsls	r3, r3, #15
    34b4:	d5ec      	bpl.n	3490 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    34b6:	2001      	movs	r0, #1
    34b8:	f002 fd28 	bl	5f0c <nrfx_busy_wait>
    34bc:	3d01      	subs	r5, #1
    34be:	d1f6      	bne.n	34ae <nrfx_clock_stop+0x26>
    34c0:	e7e6      	b.n	3490 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    34c2:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34c6:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    34c8:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34cc:	4b0d      	ldr	r3, [pc, #52]	; (3504 <nrfx_clock_stop+0x7c>)
    p_reg->INTENCLR = mask;
    34ce:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34d2:	601a      	str	r2, [r3, #0]
    34d4:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    34d6:	4b0c      	ldr	r3, [pc, #48]	; (3508 <nrfx_clock_stop+0x80>)
    34d8:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    34da:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    34de:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    34e2:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    34e6:	03d2      	lsls	r2, r2, #15
    34e8:	d5d2      	bpl.n	3490 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    34ea:	2b00      	cmp	r3, #0
    34ec:	d0d0      	beq.n	3490 <nrfx_clock_stop+0x8>
    34ee:	2001      	movs	r0, #1
    34f0:	f002 fd0c 	bl	5f0c <nrfx_busy_wait>
    34f4:	3d01      	subs	r5, #1
    34f6:	d1f0      	bne.n	34da <nrfx_clock_stop+0x52>
    34f8:	e7ca      	b.n	3490 <nrfx_clock_stop+0x8>
    34fa:	bf00      	nop
    34fc:	50005104 	.word	0x50005104
    3500:	5000500c 	.word	0x5000500c
    3504:	50005100 	.word	0x50005100
    3508:	50005004 	.word	0x50005004

0000350c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    350c:	4b16      	ldr	r3, [pc, #88]	; (3568 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    350e:	b510      	push	{r4, lr}
    3510:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3512:	b152      	cbz	r2, 352a <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3514:	2000      	movs	r0, #0
    3516:	6018      	str	r0, [r3, #0]
    3518:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    351a:	2201      	movs	r2, #1
    351c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3520:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3524:	4b11      	ldr	r3, [pc, #68]	; (356c <nrfx_power_clock_irq_handler+0x60>)
    3526:	681b      	ldr	r3, [r3, #0]
    3528:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    352a:	4b11      	ldr	r3, [pc, #68]	; (3570 <nrfx_power_clock_irq_handler+0x64>)
    352c:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    352e:	b18a      	cbz	r2, 3554 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3530:	2200      	movs	r2, #0
    3532:	601a      	str	r2, [r3, #0]
    3534:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3536:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    353a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    353e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3542:	f002 0203 	and.w	r2, r2, #3
    3546:	2a01      	cmp	r2, #1
    3548:	f04f 0102 	mov.w	r1, #2
    354c:	d103      	bne.n	3556 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    354e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3552:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3554:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    3556:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    355a:	4b04      	ldr	r3, [pc, #16]	; (356c <nrfx_power_clock_irq_handler+0x60>)
    355c:	2001      	movs	r0, #1
}
    355e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3562:	681b      	ldr	r3, [r3, #0]
    3564:	4718      	bx	r3
    3566:	bf00      	nop
    3568:	50005100 	.word	0x50005100
    356c:	20000814 	.word	0x20000814
    3570:	50005104 	.word	0x50005104

00003574 <nrfx_dppi_channel_alloc>:
nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    3574:	4a0b      	ldr	r2, [pc, #44]	; (35a4 <nrfx_dppi_channel_alloc+0x30>)
{
    3576:	b570      	push	{r4, r5, r6, lr}
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    3578:	6816      	ldr	r6, [r2, #0]
    357a:	43f1      	mvns	r1, r6
    357c:	b289      	uxth	r1, r1
    uint8_t channel = 0;

    if (!remaining_channels)
    357e:	b171      	cbz	r1, 359e <nrfx_dppi_channel_alloc+0x2a>
    3580:	2500      	movs	r5, #0
    3582:	b2ec      	uxtb	r4, r5
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
    3584:	fa21 f304 	lsr.w	r3, r1, r4
    3588:	07db      	lsls	r3, r3, #31
    358a:	f105 0501 	add.w	r5, r5, #1
    358e:	d5f8      	bpl.n	3582 <nrfx_dppi_channel_alloc+0xe>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
    3590:	2301      	movs	r3, #1
    3592:	40a3      	lsls	r3, r4
    3594:	4333      	orrs	r3, r6
    *p_channel = channel;
    3596:	7004      	strb	r4, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
    3598:	4803      	ldr	r0, [pc, #12]	; (35a8 <nrfx_dppi_channel_alloc+0x34>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
    359a:	6013      	str	r3, [r2, #0]
}
    359c:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
    359e:	4803      	ldr	r0, [pc, #12]	; (35ac <nrfx_dppi_channel_alloc+0x38>)
    35a0:	e7fc      	b.n	359c <nrfx_dppi_channel_alloc+0x28>
    35a2:	bf00      	nop
    35a4:	2000081c 	.word	0x2000081c
    35a8:	0bad0000 	.word	0x0bad0000
    35ac:	0bad0002 	.word	0x0bad0002

000035b0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    35b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    35b2:	4b10      	ldr	r3, [pc, #64]	; (35f4 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    35b4:	4f10      	ldr	r7, [pc, #64]	; (35f8 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    35b6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    35ba:	3001      	adds	r0, #1
    35bc:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    35c0:	42ae      	cmp	r6, r5
    35c2:	d800      	bhi.n	35c6 <z_sys_init_run_level+0x16>
		}
	}
}
    35c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    35c6:	e9d5 3400 	ldrd	r3, r4, [r5]
    35ca:	4620      	mov	r0, r4
    35cc:	4798      	blx	r3
    35ce:	b170      	cbz	r0, 35ee <z_sys_init_run_level+0x3e>
    35d0:	b16c      	cbz	r4, 35ee <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
    35d2:	2301      	movs	r3, #1
				(dev - __device_start));
    35d4:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    35d6:	4a09      	ldr	r2, [pc, #36]	; (35fc <z_sys_init_run_level+0x4c>)
    35d8:	1124      	asrs	r4, r4, #4
    35da:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    35dc:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    35e0:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
    35e4:	fa03 f404 	lsl.w	r4, r3, r4
    35e8:	4304      	orrs	r4, r0
    35ea:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    35ee:	3508      	adds	r5, #8
    35f0:	e7e6      	b.n	35c0 <z_sys_init_run_level+0x10>
    35f2:	bf00      	nop
    35f4:	00006618 	.word	0x00006618
    35f8:	200000bc 	.word	0x200000bc
    35fc:	2000010c 	.word	0x2000010c

00003600 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    3600:	4b08      	ldr	r3, [pc, #32]	; (3624 <z_device_ready+0x24>)
    3602:	1ac0      	subs	r0, r0, r3
    3604:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    3606:	4b08      	ldr	r3, [pc, #32]	; (3628 <z_device_ready+0x28>)
    3608:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    360a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    360e:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    3610:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
    3614:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    3618:	4210      	tst	r0, r2
}
    361a:	bf0c      	ite	eq
    361c:	4618      	moveq	r0, r3
    361e:	2000      	movne	r0, #0
    3620:	4770      	bx	lr
    3622:	bf00      	nop
    3624:	200000bc 	.word	0x200000bc
    3628:	2000010c 	.word	0x2000010c

0000362c <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
    362c:	4911      	ldr	r1, [pc, #68]	; (3674 <z_impl_device_get_binding+0x48>)
{
    362e:	b570      	push	{r4, r5, r6, lr}
    3630:	4605      	mov	r5, r0
    3632:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
    3634:	4c10      	ldr	r4, [pc, #64]	; (3678 <z_impl_device_get_binding+0x4c>)
    3636:	428c      	cmp	r4, r1
    3638:	d104      	bne.n	3644 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
    363a:	4c0f      	ldr	r4, [pc, #60]	; (3678 <z_impl_device_get_binding+0x4c>)
    363c:	42b4      	cmp	r4, r6
    363e:	d10a      	bne.n	3656 <z_impl_device_get_binding+0x2a>
	return NULL;
    3640:	2400      	movs	r4, #0
    3642:	e014      	b.n	366e <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
    3644:	4620      	mov	r0, r4
    3646:	f7ff ffdb 	bl	3600 <z_device_ready>
    364a:	b110      	cbz	r0, 3652 <z_impl_device_get_binding+0x26>
    364c:	6823      	ldr	r3, [r4, #0]
    364e:	42ab      	cmp	r3, r5
    3650:	d00d      	beq.n	366e <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
    3652:	3410      	adds	r4, #16
    3654:	e7ef      	b.n	3636 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    3656:	4620      	mov	r0, r4
    3658:	f7ff ffd2 	bl	3600 <z_device_ready>
    365c:	b908      	cbnz	r0, 3662 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
    365e:	3410      	adds	r4, #16
    3660:	e7ec      	b.n	363c <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    3662:	4628      	mov	r0, r5
    3664:	6821      	ldr	r1, [r4, #0]
    3666:	f002 fb72 	bl	5d4e <strcmp>
    366a:	2800      	cmp	r0, #0
    366c:	d1f7      	bne.n	365e <z_impl_device_get_binding+0x32>
}
    366e:	4620      	mov	r0, r4
    3670:	bd70      	pop	{r4, r5, r6, pc}
    3672:	bf00      	nop
    3674:	2000010c 	.word	0x2000010c
    3678:	200000bc 	.word	0x200000bc

0000367c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    367c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    367e:	4605      	mov	r5, r0
    3680:	460e      	mov	r6, r1
	__asm__ volatile(
    3682:	f04f 0320 	mov.w	r3, #32
    3686:	f3ef 8711 	mrs	r7, BASEPRI
    368a:	f383 8811 	msr	BASEPRI, r3
    368e:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    3692:	f000 fdef 	bl	4274 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    3696:	2200      	movs	r2, #0
    3698:	2d04      	cmp	r5, #4
    369a:	bf98      	it	ls
    369c:	4b18      	ldrls	r3, [pc, #96]	; (3700 <z_fatal_error+0x84>)
    369e:	4604      	mov	r4, r0
	switch (reason) {
    36a0:	bf94      	ite	ls
    36a2:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
    36a6:	4b17      	ldrhi	r3, [pc, #92]	; (3704 <z_fatal_error+0x88>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    36a8:	9200      	str	r2, [sp, #0]
    36aa:	2145      	movs	r1, #69	; 0x45
    36ac:	462a      	mov	r2, r5
    36ae:	4816      	ldr	r0, [pc, #88]	; (3708 <z_fatal_error+0x8c>)
    36b0:	f001 ffc0 	bl	5634 <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    36b4:	b13e      	cbz	r6, 36c6 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    36b6:	69f3      	ldr	r3, [r6, #28]
    36b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    36bc:	b11b      	cbz	r3, 36c6 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
    36be:	2145      	movs	r1, #69	; 0x45
    36c0:	4812      	ldr	r0, [pc, #72]	; (370c <z_fatal_error+0x90>)
    36c2:	f001 ffb7 	bl	5634 <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
    36c6:	b12c      	cbz	r4, 36d4 <z_fatal_error+0x58>
    36c8:	4620      	mov	r0, r4
    36ca:	f002 fd06 	bl	60da <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    36ce:	b108      	cbz	r0, 36d4 <z_fatal_error+0x58>
    36d0:	7803      	ldrb	r3, [r0, #0]
    36d2:	b903      	cbnz	r3, 36d6 <z_fatal_error+0x5a>
		thread_name = "unknown";
    36d4:	480e      	ldr	r0, [pc, #56]	; (3710 <z_fatal_error+0x94>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    36d6:	4603      	mov	r3, r0
    36d8:	4622      	mov	r2, r4
    36da:	2145      	movs	r1, #69	; 0x45
    36dc:	480d      	ldr	r0, [pc, #52]	; (3714 <z_fatal_error+0x98>)
    36de:	f001 ffa9 	bl	5634 <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    36e2:	4631      	mov	r1, r6
    36e4:	4628      	mov	r0, r5
    36e6:	f7ff fd6d 	bl	31c4 <k_sys_fatal_error_handler>
	__asm__ volatile(
    36ea:	f387 8811 	msr	BASEPRI, r7
    36ee:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    36f2:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    36f4:	b003      	add	sp, #12
    36f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    36fa:	f7ff b947 	b.w	298c <z_impl_k_thread_abort>
    36fe:	bf00      	nop
    3700:	00006630 	.word	0x00006630
    3704:	00007167 	.word	0x00007167
    3708:	0000717d 	.word	0x0000717d
    370c:	000071aa 	.word	0x000071aa
    3710:	00007175 	.word	0x00007175
    3714:	000071d0 	.word	0x000071d0

00003718 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
    3718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    371a:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
    371c:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
    371e:	4e15      	ldr	r6, [pc, #84]	; (3774 <idle+0x5c>)
	__asm__ volatile(
    3720:	f04f 0220 	mov.w	r2, #32
    3724:	f3ef 8311 	mrs	r3, BASEPRI
    3728:	f382 8811 	msr	BASEPRI, r2
    372c:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
    3730:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
    3732:	b188      	cbz	r0, 3758 <idle+0x40>
			cpu->pending_abort = NULL;
    3734:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
    3736:	f383 8811 	msr	BASEPRI, r3
    373a:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
    373e:	f000 fbc9 	bl	3ed4 <z_thread_single_abort>
	__asm__ volatile(
    3742:	f04f 0320 	mov.w	r3, #32
    3746:	f3ef 8011 	mrs	r0, BASEPRI
    374a:	f383 8811 	msr	BASEPRI, r3
    374e:	f3bf 8f6f 	isb	sy
    3752:	f002 fc0c 	bl	5f6e <z_reschedule_irqlock>
			continue;
    3756:	e7e3      	b.n	3720 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
    3758:	f002 fcd7 	bl	610a <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    375c:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
    375e:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3760:	2802      	cmp	r0, #2
    3762:	bfd8      	it	le
    3764:	4608      	movle	r0, r1
    3766:	f002 fce0 	bl	612a <z_set_timeout_expiry>
		_kernel.idle = ticks;
    376a:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
    376c:	f7fe fd96 	bl	229c <arch_cpu_idle>
}
    3770:	e7d6      	b.n	3720 <idle+0x8>
    3772:	bf00      	nop
    3774:	20000820 	.word	0x20000820

00003778 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3778:	4802      	ldr	r0, [pc, #8]	; (3784 <z_bss_zero+0xc>)
    377a:	4a03      	ldr	r2, [pc, #12]	; (3788 <z_bss_zero+0x10>)
    377c:	2100      	movs	r1, #0
    377e:	1a12      	subs	r2, r2, r0
    3780:	f002 bb43 	b.w	5e0a <memset>
    3784:	20000160 	.word	0x20000160
    3788:	20000884 	.word	0x20000884

0000378c <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
    378c:	2201      	movs	r2, #1
{
    378e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3790:	4b09      	ldr	r3, [pc, #36]	; (37b8 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3792:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3794:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3796:	f7ff ff0b 	bl	35b0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    379a:	f000 fe5d 	bl	4458 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    379e:	2003      	movs	r0, #3
    37a0:	f7ff ff06 	bl	35b0 <z_sys_init_run_level>

	z_init_static_threads();
    37a4:	f000 fde6 	bl	4374 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    37a8:	f001 ff1e 	bl	55e8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    37ac:	4a03      	ldr	r2, [pc, #12]	; (37bc <bg_thread_main+0x30>)
    37ae:	7b13      	ldrb	r3, [r2, #12]
    37b0:	f023 0301 	bic.w	r3, r3, #1
    37b4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    37b6:	bd08      	pop	{r3, pc}
    37b8:	20000881 	.word	0x20000881
    37bc:	200001e0 	.word	0x200001e0

000037c0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    37c0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    37c4:	4b37      	ldr	r3, [pc, #220]	; (38a4 <z_cstart+0xe4>)
    37c6:	b0a7      	sub	sp, #156	; 0x9c
	uint32_t msp =
    37c8:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    37cc:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    37d0:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    37d4:	2400      	movs	r4, #0
    37d6:	23e0      	movs	r3, #224	; 0xe0
    37d8:	4d33      	ldr	r5, [pc, #204]	; (38a8 <z_cstart+0xe8>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    37da:	f04f 0b01 	mov.w	fp, #1
    37de:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    37e2:	77ec      	strb	r4, [r5, #31]
    37e4:	762c      	strb	r4, [r5, #24]
    37e6:	766c      	strb	r4, [r5, #25]
    37e8:	76ac      	strb	r4, [r5, #26]
    37ea:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    37ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    37ee:	4e2f      	ldr	r6, [pc, #188]	; (38ac <z_cstart+0xec>)
    37f0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    37f4:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    37f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    37f8:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 38c8 <z_cstart+0x108>
    37fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    3800:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    3802:	63ac      	str	r4, [r5, #56]	; 0x38

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3804:	f7ff f854 	bl	28b0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3808:	f7fe fd42 	bl	2290 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    380c:	f04f 33ff 	mov.w	r3, #4294967295
    3810:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3812:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    3814:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    3818:	4d25      	ldr	r5, [pc, #148]	; (38b0 <z_cstart+0xf0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    381a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    381e:	ab06      	add	r3, sp, #24
    3820:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3822:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    3824:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    3828:	f7ff fec2 	bl	35b0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    382c:	2001      	movs	r0, #1
    382e:	f7ff febf 	bl	35b0 <z_sys_init_run_level>
	z_sched_init();
    3832:	f000 fca3 	bl	417c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3836:	4b1f      	ldr	r3, [pc, #124]	; (38b4 <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
    3838:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    383a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    383e:	491e      	ldr	r1, [pc, #120]	; (38b8 <z_cstart+0xf8>)
    3840:	9305      	str	r3, [sp, #20]
    3842:	4630      	mov	r0, r6
    3844:	4653      	mov	r3, sl
    3846:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    384a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    384e:	9400      	str	r4, [sp, #0]
    3850:	f000 fd60 	bl	4314 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3854:	7b73      	ldrb	r3, [r6, #13]
    3856:	4680      	mov	r8, r0
    3858:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    385c:	4630      	mov	r0, r6
    385e:	7373      	strb	r3, [r6, #13]
    3860:	f002 fbb1 	bl	5fc6 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    3864:	230f      	movs	r3, #15
    3866:	4f15      	ldr	r7, [pc, #84]	; (38bc <z_cstart+0xfc>)
    3868:	f44f 72a0 	mov.w	r2, #320	; 0x140
    386c:	e9cd 4302 	strd	r4, r3, [sp, #8]
    3870:	4913      	ldr	r1, [pc, #76]	; (38c0 <z_cstart+0x100>)
    3872:	4b14      	ldr	r3, [pc, #80]	; (38c4 <z_cstart+0x104>)
    3874:	4638      	mov	r0, r7
    3876:	e9cd b404 	strd	fp, r4, [sp, #16]
    387a:	e9cd 5400 	strd	r5, r4, [sp]
    387e:	f000 fd49 	bl	4314 <z_setup_new_thread>
    3882:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3884:	4652      	mov	r2, sl
    3886:	f023 0304 	bic.w	r3, r3, #4
    388a:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    388c:	f105 031c 	add.w	r3, r5, #28
    3890:	4641      	mov	r1, r8
    3892:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
    3894:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3898:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
    389a:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
    389c:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    38a0:	f7fe fcd8 	bl	2254 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    38a4:	200019c8 	.word	0x200019c8
    38a8:	e000ed00 	.word	0xe000ed00
    38ac:	200001e0 	.word	0x200001e0
    38b0:	20000820 	.word	0x20000820
    38b4:	00007237 	.word	0x00007237
    38b8:	20000888 	.word	0x20000888
    38bc:	20000160 	.word	0x20000160
    38c0:	20001888 	.word	0x20001888
    38c4:	00003719 	.word	0x00003719
    38c8:	0000378d 	.word	0x0000378d

000038cc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    38cc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    38ce:	4b0e      	ldr	r3, [pc, #56]	; (3908 <init_mem_slab_module+0x3c>)
    38d0:	4c0e      	ldr	r4, [pc, #56]	; (390c <init_mem_slab_module+0x40>)
    38d2:	42a3      	cmp	r3, r4
    38d4:	d301      	bcc.n	38da <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    38d6:	2000      	movs	r0, #0
	return rc;
}
    38d8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    38da:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    38de:	ea41 0200 	orr.w	r2, r1, r0
    38e2:	f012 0203 	ands.w	r2, r2, #3
    38e6:	d10b      	bne.n	3900 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    38e8:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    38ea:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    38ec:	42aa      	cmp	r2, r5
    38ee:	d101      	bne.n	38f4 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    38f0:	331c      	adds	r3, #28
    38f2:	e7ee      	b.n	38d2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    38f4:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    38f6:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    38f8:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    38fa:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    38fc:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    38fe:	e7f5      	b.n	38ec <init_mem_slab_module+0x20>
		return -EINVAL;
    3900:	f06f 0015 	mvn.w	r0, #21
	return rc;
    3904:	e7e8      	b.n	38d8 <init_mem_slab_module+0xc>
    3906:	bf00      	nop
    3908:	20000110 	.word	0x20000110
    390c:	20000110 	.word	0x20000110

00003910 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3910:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    3912:	460c      	mov	r4, r1
    3914:	4616      	mov	r6, r2
    3916:	461f      	mov	r7, r3
    3918:	f04f 0320 	mov.w	r3, #32
    391c:	f3ef 8111 	mrs	r1, BASEPRI
    3920:	f383 8811 	msr	BASEPRI, r3
    3924:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    3928:	6943      	ldr	r3, [r0, #20]
    392a:	b15b      	cbz	r3, 3944 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    392c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    392e:	681b      	ldr	r3, [r3, #0]
    3930:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    3932:	6983      	ldr	r3, [r0, #24]
    3934:	3301      	adds	r3, #1
    3936:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3938:	2000      	movs	r0, #0
	__asm__ volatile(
    393a:	f381 8811 	msr	BASEPRI, r1
    393e:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    3942:	e011      	b.n	3968 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3944:	ea56 0207 	orrs.w	r2, r6, r7
    3948:	d103      	bne.n	3952 <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
    394a:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    394e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    3950:	e7f3      	b.n	393a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    3952:	4602      	mov	r2, r0
    3954:	e9cd 6700 	strd	r6, r7, [sp]
    3958:	4804      	ldr	r0, [pc, #16]	; (396c <k_mem_slab_alloc+0x5c>)
    395a:	f000 fb7d 	bl	4058 <z_pend_curr>
		if (result == 0) {
    395e:	b918      	cbnz	r0, 3968 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    3960:	4b03      	ldr	r3, [pc, #12]	; (3970 <k_mem_slab_alloc+0x60>)
    3962:	689b      	ldr	r3, [r3, #8]
    3964:	695b      	ldr	r3, [r3, #20]
    3966:	6023      	str	r3, [r4, #0]
}
    3968:	b002      	add	sp, #8
    396a:	bdd0      	pop	{r4, r6, r7, pc}
    396c:	20000882 	.word	0x20000882
    3970:	20000820 	.word	0x20000820

00003974 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    3974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3976:	4604      	mov	r4, r0
    3978:	460d      	mov	r5, r1
	__asm__ volatile(
    397a:	f04f 0320 	mov.w	r3, #32
    397e:	f3ef 8611 	mrs	r6, BASEPRI
    3982:	f383 8811 	msr	BASEPRI, r3
    3986:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
    398a:	6947      	ldr	r7, [r0, #20]
    398c:	b96f      	cbnz	r7, 39aa <k_mem_slab_free+0x36>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    398e:	f002 fb75 	bl	607c <z_unpend_first_thread>

		if (pending_thread != NULL) {
    3992:	b150      	cbz	r0, 39aa <k_mem_slab_free+0x36>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    3994:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3996:	67c7      	str	r7, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    3998:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    399a:	f002 fb14 	bl	5fc6 <z_ready_thread>
			z_reschedule(&lock, key);
    399e:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
    39a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
    39a4:	4807      	ldr	r0, [pc, #28]	; (39c4 <k_mem_slab_free+0x50>)
    39a6:	f000 b90f 	b.w	3bc8 <z_reschedule>
	**(char ***) mem = slab->free_list;
    39aa:	682b      	ldr	r3, [r5, #0]
    39ac:	6962      	ldr	r2, [r4, #20]
    39ae:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    39b0:	682b      	ldr	r3, [r5, #0]
    39b2:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    39b4:	69a3      	ldr	r3, [r4, #24]
    39b6:	3b01      	subs	r3, #1
    39b8:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    39ba:	f386 8811 	msr	BASEPRI, r6
    39be:	f3bf 8f6f 	isb	sy
}
    39c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39c4:	20000882 	.word	0x20000882

000039c8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    39c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    39cc:	4604      	mov	r4, r0
    39ce:	4616      	mov	r6, r2
    39d0:	461f      	mov	r7, r3
	__asm__ volatile(
    39d2:	f04f 0320 	mov.w	r3, #32
    39d6:	f3ef 8811 	mrs	r8, BASEPRI
    39da:	f383 8811 	msr	BASEPRI, r3
    39de:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    39e2:	68c3      	ldr	r3, [r0, #12]
    39e4:	4a32      	ldr	r2, [pc, #200]	; (3ab0 <z_impl_k_mutex_lock+0xe8>)
    39e6:	b16b      	cbz	r3, 3a04 <z_impl_k_mutex_lock+0x3c>
    39e8:	6880      	ldr	r0, [r0, #8]
    39ea:	6891      	ldr	r1, [r2, #8]
    39ec:	4288      	cmp	r0, r1
    39ee:	d019      	beq.n	3a24 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    39f0:	ea56 0307 	orrs.w	r3, r6, r7
    39f4:	d118      	bne.n	3a28 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    39f6:	f388 8811 	msr	BASEPRI, r8
    39fa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    39fe:	f06f 000f 	mvn.w	r0, #15
    3a02:	e00c      	b.n	3a1e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    3a04:	6891      	ldr	r1, [r2, #8]
    3a06:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    3a0a:	3301      	adds	r3, #1
    3a0c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    3a0e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3a10:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    3a12:	60a3      	str	r3, [r4, #8]
    3a14:	f388 8811 	msr	BASEPRI, r8
    3a18:	f3bf 8f6f 	isb	sy
		return 0;
    3a1c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    3a1e:	b002      	add	sp, #8
    3a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    3a24:	6921      	ldr	r1, [r4, #16]
    3a26:	e7f0      	b.n	3a0a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3a28:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3a2c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3a30:	4299      	cmp	r1, r3
    3a32:	bfa8      	it	ge
    3a34:	4619      	movge	r1, r3
    3a36:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3a3a:	428b      	cmp	r3, r1
    3a3c:	dd2c      	ble.n	3a98 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
    3a3e:	f000 fb59 	bl	40f4 <z_set_prio>
    3a42:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3a44:	4622      	mov	r2, r4
    3a46:	4641      	mov	r1, r8
    3a48:	e9cd 6700 	strd	r6, r7, [sp]
    3a4c:	4819      	ldr	r0, [pc, #100]	; (3ab4 <z_impl_k_mutex_lock+0xec>)
    3a4e:	f000 fb03 	bl	4058 <z_pend_curr>
	if (got_mutex == 0) {
    3a52:	2800      	cmp	r0, #0
    3a54:	d0e3      	beq.n	3a1e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    3a56:	f04f 0320 	mov.w	r3, #32
    3a5a:	f3ef 8611 	mrs	r6, BASEPRI
    3a5e:	f383 8811 	msr	BASEPRI, r3
    3a62:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3a66:	6823      	ldr	r3, [r4, #0]
    3a68:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3a6a:	42a3      	cmp	r3, r4
    3a6c:	d007      	beq.n	3a7e <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3a6e:	b133      	cbz	r3, 3a7e <z_impl_k_mutex_lock+0xb6>
    3a70:	f993 300e 	ldrsb.w	r3, [r3, #14]
    3a74:	4299      	cmp	r1, r3
    3a76:	bfa8      	it	ge
    3a78:	4619      	movge	r1, r3
    3a7a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    3a7e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    3a80:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3a84:	4299      	cmp	r1, r3
    3a86:	d109      	bne.n	3a9c <z_impl_k_mutex_lock+0xd4>
	if (resched) {
    3a88:	b16d      	cbz	r5, 3aa6 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    3a8a:	4631      	mov	r1, r6
    3a8c:	4809      	ldr	r0, [pc, #36]	; (3ab4 <z_impl_k_mutex_lock+0xec>)
    3a8e:	f000 f89b 	bl	3bc8 <z_reschedule>
	return -EAGAIN;
    3a92:	f06f 000a 	mvn.w	r0, #10
    3a96:	e7c2      	b.n	3a1e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    3a98:	2500      	movs	r5, #0
    3a9a:	e7d3      	b.n	3a44 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    3a9c:	f000 fb2a 	bl	40f4 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    3aa0:	2800      	cmp	r0, #0
    3aa2:	d1f2      	bne.n	3a8a <z_impl_k_mutex_lock+0xc2>
    3aa4:	e7f0      	b.n	3a88 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
    3aa6:	f386 8811 	msr	BASEPRI, r6
    3aaa:	f3bf 8f6f 	isb	sy
    3aae:	e7f0      	b.n	3a92 <z_impl_k_mutex_lock+0xca>
    3ab0:	20000820 	.word	0x20000820
    3ab4:	20000882 	.word	0x20000882

00003ab8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    3ab8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
    3aba:	6883      	ldr	r3, [r0, #8]
{
    3abc:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    3abe:	2b00      	cmp	r3, #0
    3ac0:	d036      	beq.n	3b30 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    3ac2:	4a1e      	ldr	r2, [pc, #120]	; (3b3c <z_impl_k_mutex_unlock+0x84>)
    3ac4:	6892      	ldr	r2, [r2, #8]
    3ac6:	4293      	cmp	r3, r2
    3ac8:	d135      	bne.n	3b36 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    3aca:	7bda      	ldrb	r2, [r3, #15]
    3acc:	3a01      	subs	r2, #1
    3ace:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    3ad0:	68c3      	ldr	r3, [r0, #12]
    3ad2:	2b01      	cmp	r3, #1
    3ad4:	d005      	beq.n	3ae2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    3ad6:	3b01      	subs	r3, #1
    3ad8:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    3ada:	f000 f8d9 	bl	3c90 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    3ade:	2000      	movs	r0, #0
}
    3ae0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    3ae2:	f04f 0320 	mov.w	r3, #32
    3ae6:	f3ef 8511 	mrs	r5, BASEPRI
    3aea:	f383 8811 	msr	BASEPRI, r3
    3aee:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3af2:	6901      	ldr	r1, [r0, #16]
    3af4:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    3af6:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3afa:	4299      	cmp	r1, r3
    3afc:	d001      	beq.n	3b02 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    3afe:	f000 faf9 	bl	40f4 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    3b02:	4620      	mov	r0, r4
    3b04:	f002 faba 	bl	607c <z_unpend_first_thread>
	mutex->owner = new_owner;
    3b08:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    3b0a:	b158      	cbz	r0, 3b24 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    3b0c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3b10:	6122      	str	r2, [r4, #16]
    3b12:	2200      	movs	r2, #0
    3b14:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    3b16:	f002 fa56 	bl	5fc6 <z_ready_thread>
		z_reschedule(&lock, key);
    3b1a:	4629      	mov	r1, r5
    3b1c:	4808      	ldr	r0, [pc, #32]	; (3b40 <z_impl_k_mutex_unlock+0x88>)
    3b1e:	f000 f853 	bl	3bc8 <z_reschedule>
    3b22:	e7da      	b.n	3ada <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    3b24:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3b26:	f385 8811 	msr	BASEPRI, r5
    3b2a:	f3bf 8f6f 	isb	sy
    3b2e:	e7d4      	b.n	3ada <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    3b30:	f06f 0015 	mvn.w	r0, #21
    3b34:	e7d4      	b.n	3ae0 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    3b36:	f04f 30ff 	mov.w	r0, #4294967295
    3b3a:	e7d1      	b.n	3ae0 <z_impl_k_mutex_unlock+0x28>
    3b3c:	20000820 	.word	0x20000820
    3b40:	20000882 	.word	0x20000882

00003b44 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    3b44:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    3b46:	4c08      	ldr	r4, [pc, #32]	; (3b68 <z_reset_time_slice+0x24>)
    3b48:	6823      	ldr	r3, [r4, #0]
    3b4a:	b15b      	cbz	r3, 3b64 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    3b4c:	f7fd ffa0 	bl	1a90 <z_clock_elapsed>
    3b50:	6822      	ldr	r2, [r4, #0]
    3b52:	4906      	ldr	r1, [pc, #24]	; (3b6c <z_reset_time_slice+0x28>)
    3b54:	4410      	add	r0, r2
    3b56:	6148      	str	r0, [r1, #20]
		z_set_timeout_expiry(slice_time, false);
	}
}
    3b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    3b5c:	2100      	movs	r1, #0
    3b5e:	4610      	mov	r0, r2
    3b60:	f002 bae3 	b.w	612a <z_set_timeout_expiry>
}
    3b64:	bd10      	pop	{r4, pc}
    3b66:	bf00      	nop
    3b68:	2000085c 	.word	0x2000085c
    3b6c:	20000820 	.word	0x20000820

00003b70 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    3b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b72:	460c      	mov	r4, r1
	__asm__ volatile(
    3b74:	f04f 0320 	mov.w	r3, #32
    3b78:	f3ef 8511 	mrs	r5, BASEPRI
    3b7c:	f383 8811 	msr	BASEPRI, r3
    3b80:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    3b84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3b88:	f240 36e7 	movw	r6, #999	; 0x3e7
    3b8c:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    3b8e:	2200      	movs	r2, #0
    3b90:	fbe1 6700 	umlal	r6, r7, r1, r0
    3b94:	4b09      	ldr	r3, [pc, #36]	; (3bbc <k_sched_time_slice_set+0x4c>)
    3b96:	4630      	mov	r0, r6
    3b98:	615a      	str	r2, [r3, #20]
    3b9a:	4639      	mov	r1, r7
    3b9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3ba0:	2300      	movs	r3, #0
    3ba2:	f7fc fb4b 	bl	23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    3ba6:	4b06      	ldr	r3, [pc, #24]	; (3bc0 <k_sched_time_slice_set+0x50>)
    3ba8:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    3baa:	4b06      	ldr	r3, [pc, #24]	; (3bc4 <k_sched_time_slice_set+0x54>)
    3bac:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    3bae:	f7ff ffc9 	bl	3b44 <z_reset_time_slice>
	__asm__ volatile(
    3bb2:	f385 8811 	msr	BASEPRI, r5
    3bb6:	f3bf 8f6f 	isb	sy
	}
}
    3bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3bbc:	20000820 	.word	0x20000820
    3bc0:	2000085c 	.word	0x2000085c
    3bc4:	20000858 	.word	0x20000858

00003bc8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3bc8:	b949      	cbnz	r1, 3bde <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3bca:	f3ef 8005 	mrs	r0, IPSR
    3bce:	b930      	cbnz	r0, 3bde <z_reschedule+0x16>
	return _kernel.ready_q.cache;
    3bd0:	4b05      	ldr	r3, [pc, #20]	; (3be8 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    3bd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3bd4:	689b      	ldr	r3, [r3, #8]
    3bd6:	429a      	cmp	r2, r3
    3bd8:	d001      	beq.n	3bde <z_reschedule+0x16>
	ret = arch_swap(key);
    3bda:	f7fe ba95 	b.w	2108 <arch_swap>
    3bde:	f381 8811 	msr	BASEPRI, r1
    3be2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    3be6:	4770      	bx	lr
    3be8:	20000820 	.word	0x20000820

00003bec <k_sched_lock>:
	__asm__ volatile(
    3bec:	f04f 0320 	mov.w	r3, #32
    3bf0:	f3ef 8111 	mrs	r1, BASEPRI
    3bf4:	f383 8811 	msr	BASEPRI, r3
    3bf8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    3bfc:	4b04      	ldr	r3, [pc, #16]	; (3c10 <k_sched_lock+0x24>)
    3bfe:	689a      	ldr	r2, [r3, #8]
    3c00:	7bd3      	ldrb	r3, [r2, #15]
    3c02:	3b01      	subs	r3, #1
    3c04:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3c06:	f381 8811 	msr	BASEPRI, r1
    3c0a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    3c0e:	4770      	bx	lr
    3c10:	20000820 	.word	0x20000820

00003c14 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    3c14:	4b09      	ldr	r3, [pc, #36]	; (3c3c <z_priq_dumb_remove+0x28>)
    3c16:	f103 022c 	add.w	r2, r3, #44	; 0x2c
    3c1a:	4282      	cmp	r2, r0
    3c1c:	d105      	bne.n	3c2a <z_priq_dumb_remove+0x16>
    3c1e:	689b      	ldr	r3, [r3, #8]
    3c20:	428b      	cmp	r3, r1
    3c22:	d102      	bne.n	3c2a <z_priq_dumb_remove+0x16>
    3c24:	7b4b      	ldrb	r3, [r1, #13]
    3c26:	06db      	lsls	r3, r3, #27
    3c28:	d106      	bne.n	3c38 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    3c2a:	e9d1 3200 	ldrd	r3, r2, [r1]
    3c2e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    3c30:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3c32:	2300      	movs	r3, #0
	node->prev = NULL;
    3c34:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    3c38:	4770      	bx	lr
    3c3a:	bf00      	nop
    3c3c:	20000820 	.word	0x20000820

00003c40 <update_cache>:
{
    3c40:	b538      	push	{r3, r4, r5, lr}
    3c42:	4c12      	ldr	r4, [pc, #72]	; (3c8c <update_cache+0x4c>)
    3c44:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
    3c46:	6923      	ldr	r3, [r4, #16]
    3c48:	68a2      	ldr	r2, [r4, #8]
    3c4a:	b10b      	cbz	r3, 3c50 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
    3c4c:	68e5      	ldr	r5, [r4, #12]
    3c4e:	e00c      	b.n	3c6a <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
    3c50:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    3c54:	f002 f9ad 	bl	5fb2 <z_priq_dumb_best>
    3c58:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    3c5a:	7b53      	ldrb	r3, [r2, #13]
    3c5c:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
    3c5e:	bf44      	itt	mi
    3c60:	f043 0308 	orrmi.w	r3, r3, #8
    3c64:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
    3c66:	2d00      	cmp	r5, #0
    3c68:	d0f0      	beq.n	3c4c <update_cache+0xc>
	if (preempt_ok != 0) {
    3c6a:	b949      	cbnz	r1, 3c80 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
    3c6c:	7b53      	ldrb	r3, [r2, #13]
    3c6e:	06db      	lsls	r3, r3, #27
    3c70:	d106      	bne.n	3c80 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3c72:	69ab      	ldr	r3, [r5, #24]
    3c74:	b923      	cbnz	r3, 3c80 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
    3c76:	89d3      	ldrh	r3, [r2, #14]
    3c78:	2b7f      	cmp	r3, #127	; 0x7f
    3c7a:	d901      	bls.n	3c80 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
    3c7c:	62a2      	str	r2, [r4, #40]	; 0x28
}
    3c7e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    3c80:	4295      	cmp	r5, r2
    3c82:	d001      	beq.n	3c88 <update_cache+0x48>
			z_reset_time_slice();
    3c84:	f7ff ff5e 	bl	3b44 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    3c88:	62a5      	str	r5, [r4, #40]	; 0x28
}
    3c8a:	e7f8      	b.n	3c7e <update_cache+0x3e>
    3c8c:	20000820 	.word	0x20000820

00003c90 <k_sched_unlock>:
{
    3c90:	b510      	push	{r4, lr}
	__asm__ volatile(
    3c92:	f04f 0320 	mov.w	r3, #32
    3c96:	f3ef 8411 	mrs	r4, BASEPRI
    3c9a:	f383 8811 	msr	BASEPRI, r3
    3c9e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    3ca2:	4b08      	ldr	r3, [pc, #32]	; (3cc4 <k_sched_unlock+0x34>)
		update_cache(0);
    3ca4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    3ca6:	689a      	ldr	r2, [r3, #8]
    3ca8:	7bd3      	ldrb	r3, [r2, #15]
    3caa:	3301      	adds	r3, #1
    3cac:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3cae:	f7ff ffc7 	bl	3c40 <update_cache>
	__asm__ volatile(
    3cb2:	f384 8811 	msr	BASEPRI, r4
    3cb6:	f3bf 8f6f 	isb	sy
}
    3cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    3cbe:	f002 b962 	b.w	5f86 <z_reschedule_unlocked>
    3cc2:	bf00      	nop
    3cc4:	20000820 	.word	0x20000820

00003cc8 <ready_thread>:
{
    3cc8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3cca:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    3cce:	7b43      	ldrb	r3, [r0, #13]
    3cd0:	2a00      	cmp	r2, #0
    3cd2:	db2c      	blt.n	3d2e <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3cd4:	06db      	lsls	r3, r3, #27
    3cd6:	d12a      	bne.n	3d2e <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    3cd8:	6983      	ldr	r3, [r0, #24]
    3cda:	bb43      	cbnz	r3, 3d2e <ready_thread+0x66>
	return list->head == list;
    3cdc:	4a15      	ldr	r2, [pc, #84]	; (3d34 <ready_thread+0x6c>)
    3cde:	4611      	mov	r1, r2
    3ce0:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ce4:	428c      	cmp	r4, r1
    3ce6:	bf18      	it	ne
    3ce8:	4623      	movne	r3, r4
    3cea:	2b00      	cmp	r3, #0
    3cec:	bf38      	it	cc
    3cee:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3cf0:	6b14      	ldr	r4, [r2, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3cf2:	b1b3      	cbz	r3, 3d22 <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
    3cf4:	f990 600e 	ldrsb.w	r6, [r0, #14]
    3cf8:	f993 500e 	ldrsb.w	r5, [r3, #14]
    3cfc:	42ae      	cmp	r6, r5
    3cfe:	db03      	blt.n	3d08 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
    3d00:	42a3      	cmp	r3, r4
    3d02:	d00e      	beq.n	3d22 <ready_thread+0x5a>
    3d04:	681b      	ldr	r3, [r3, #0]
    3d06:	e7f4      	b.n	3cf2 <ready_thread+0x2a>
	node->prev = successor->prev;
    3d08:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3d0a:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    3d0e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3d10:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    3d12:	7b43      	ldrb	r3, [r0, #13]
    3d14:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3d18:	7343      	strb	r3, [r0, #13]
}
    3d1a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    3d1c:	2000      	movs	r0, #0
    3d1e:	f7ff bf8f 	b.w	3c40 <update_cache>
	node->prev = list->tail;
    3d22:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    3d26:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3d28:	6018      	str	r0, [r3, #0]
	list->tail = node;
    3d2a:	6310      	str	r0, [r2, #48]	; 0x30
}
    3d2c:	e7f1      	b.n	3d12 <ready_thread+0x4a>
}
    3d2e:	bc70      	pop	{r4, r5, r6}
    3d30:	4770      	bx	lr
    3d32:	bf00      	nop
    3d34:	20000820 	.word	0x20000820

00003d38 <z_sched_start>:
{
    3d38:	b510      	push	{r4, lr}
	__asm__ volatile(
    3d3a:	f04f 0220 	mov.w	r2, #32
    3d3e:	f3ef 8411 	mrs	r4, BASEPRI
    3d42:	f382 8811 	msr	BASEPRI, r2
    3d46:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    3d4a:	7b42      	ldrb	r2, [r0, #13]
    3d4c:	0751      	lsls	r1, r2, #29
    3d4e:	d404      	bmi.n	3d5a <z_sched_start+0x22>
	__asm__ volatile(
    3d50:	f384 8811 	msr	BASEPRI, r4
    3d54:	f3bf 8f6f 	isb	sy
}
    3d58:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3d5a:	f022 0204 	bic.w	r2, r2, #4
    3d5e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    3d60:	f7ff ffb2 	bl	3cc8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3d64:	4621      	mov	r1, r4
}
    3d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    3d6a:	4801      	ldr	r0, [pc, #4]	; (3d70 <z_sched_start+0x38>)
    3d6c:	f7ff bf2c 	b.w	3bc8 <z_reschedule>
    3d70:	20000882 	.word	0x20000882

00003d74 <move_thread_to_end_of_prio_q>:
{
    3d74:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    3d76:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    3d7a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3d7c:	2b00      	cmp	r3, #0
    3d7e:	da02      	bge.n	3d86 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    3d80:	4817      	ldr	r0, [pc, #92]	; (3de0 <move_thread_to_end_of_prio_q+0x6c>)
    3d82:	f7ff ff47 	bl	3c14 <z_priq_dumb_remove>
	return list->head == list;
    3d86:	4a17      	ldr	r2, [pc, #92]	; (3de4 <move_thread_to_end_of_prio_q+0x70>)
    3d88:	4610      	mov	r0, r2
    3d8a:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3d8e:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3d90:	4283      	cmp	r3, r0
    3d92:	bf08      	it	eq
    3d94:	2300      	moveq	r3, #0
    3d96:	2b00      	cmp	r3, #0
    3d98:	bf38      	it	cc
    3d9a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3d9c:	b1d3      	cbz	r3, 3dd4 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
    3d9e:	f991 600e 	ldrsb.w	r6, [r1, #14]
    3da2:	f993 500e 	ldrsb.w	r5, [r3, #14]
    3da6:	42ae      	cmp	r6, r5
    3da8:	db03      	blt.n	3db2 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    3daa:	42a3      	cmp	r3, r4
    3dac:	d012      	beq.n	3dd4 <move_thread_to_end_of_prio_q+0x60>
    3dae:	681b      	ldr	r3, [r3, #0]
    3db0:	e7f4      	b.n	3d9c <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
    3db2:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    3db4:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    3db8:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    3dba:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    3dbc:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
    3dbe:	6890      	ldr	r0, [r2, #8]
    3dc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3dc4:	734b      	strb	r3, [r1, #13]
    3dc6:	1a43      	subs	r3, r0, r1
    3dc8:	4258      	negs	r0, r3
    3dca:	4158      	adcs	r0, r3
}
    3dcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    3dd0:	f7ff bf36 	b.w	3c40 <update_cache>
	node->prev = list->tail;
    3dd4:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
    3dd8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3dda:	6019      	str	r1, [r3, #0]
	list->tail = node;
    3ddc:	6311      	str	r1, [r2, #48]	; 0x30
}
    3dde:	e7ed      	b.n	3dbc <move_thread_to_end_of_prio_q+0x48>
    3de0:	2000084c 	.word	0x2000084c
    3de4:	20000820 	.word	0x20000820

00003de8 <z_time_slice>:
{
    3de8:	4601      	mov	r1, r0
    3dea:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    3dec:	f04f 0320 	mov.w	r3, #32
    3df0:	f3ef 8411 	mrs	r4, BASEPRI
    3df4:	f383 8811 	msr	BASEPRI, r3
    3df8:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    3dfc:	4b16      	ldr	r3, [pc, #88]	; (3e58 <z_time_slice+0x70>)
    3dfe:	4a17      	ldr	r2, [pc, #92]	; (3e5c <z_time_slice+0x74>)
    3e00:	6898      	ldr	r0, [r3, #8]
    3e02:	6815      	ldr	r5, [r2, #0]
    3e04:	42a8      	cmp	r0, r5
    3e06:	461d      	mov	r5, r3
    3e08:	d106      	bne.n	3e18 <z_time_slice+0x30>
			z_reset_time_slice();
    3e0a:	f7ff fe9b 	bl	3b44 <z_reset_time_slice>
	__asm__ volatile(
    3e0e:	f384 8811 	msr	BASEPRI, r4
    3e12:	f3bf 8f6f 	isb	sy
}
    3e16:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    3e18:	2600      	movs	r6, #0
    3e1a:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    3e1c:	4a10      	ldr	r2, [pc, #64]	; (3e60 <z_time_slice+0x78>)
    3e1e:	6812      	ldr	r2, [r2, #0]
    3e20:	b1ba      	cbz	r2, 3e52 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    3e22:	89c2      	ldrh	r2, [r0, #14]
    3e24:	2a7f      	cmp	r2, #127	; 0x7f
    3e26:	d814      	bhi.n	3e52 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    3e28:	7b42      	ldrb	r2, [r0, #13]
    3e2a:	06d2      	lsls	r2, r2, #27
    3e2c:	d111      	bne.n	3e52 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3e2e:	4a0d      	ldr	r2, [pc, #52]	; (3e64 <z_time_slice+0x7c>)
    3e30:	f990 600e 	ldrsb.w	r6, [r0, #14]
    3e34:	6812      	ldr	r2, [r2, #0]
    3e36:	4296      	cmp	r6, r2
    3e38:	db0b      	blt.n	3e52 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    3e3a:	4a0b      	ldr	r2, [pc, #44]	; (3e68 <z_time_slice+0x80>)
    3e3c:	4290      	cmp	r0, r2
    3e3e:	d008      	beq.n	3e52 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    3e40:	695a      	ldr	r2, [r3, #20]
    3e42:	428a      	cmp	r2, r1
    3e44:	dc02      	bgt.n	3e4c <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    3e46:	f7ff ff95 	bl	3d74 <move_thread_to_end_of_prio_q>
    3e4a:	e7de      	b.n	3e0a <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    3e4c:	1a52      	subs	r2, r2, r1
    3e4e:	615a      	str	r2, [r3, #20]
    3e50:	e7dd      	b.n	3e0e <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    3e52:	2300      	movs	r3, #0
    3e54:	616b      	str	r3, [r5, #20]
    3e56:	e7da      	b.n	3e0e <z_time_slice+0x26>
    3e58:	20000820 	.word	0x20000820
    3e5c:	20000854 	.word	0x20000854
    3e60:	2000085c 	.word	0x2000085c
    3e64:	20000858 	.word	0x20000858
    3e68:	20000160 	.word	0x20000160

00003e6c <z_impl_k_thread_suspend>:
{
    3e6c:	b570      	push	{r4, r5, r6, lr}
    3e6e:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3e70:	3018      	adds	r0, #24
    3e72:	f002 f934 	bl	60de <z_abort_timeout>
	__asm__ volatile(
    3e76:	f04f 0320 	mov.w	r3, #32
    3e7a:	f3ef 8611 	mrs	r6, BASEPRI
    3e7e:	f383 8811 	msr	BASEPRI, r3
    3e82:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    3e86:	f994 300d 	ldrsb.w	r3, [r4, #13]
    3e8a:	2b00      	cmp	r3, #0
    3e8c:	da07      	bge.n	3e9e <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    3e8e:	4621      	mov	r1, r4
    3e90:	480e      	ldr	r0, [pc, #56]	; (3ecc <z_impl_k_thread_suspend+0x60>)
    3e92:	f7ff febf 	bl	3c14 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    3e96:	7b63      	ldrb	r3, [r4, #13]
    3e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3e9c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    3e9e:	4d0c      	ldr	r5, [pc, #48]	; (3ed0 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3ea0:	7b63      	ldrb	r3, [r4, #13]
    3ea2:	68a8      	ldr	r0, [r5, #8]
    3ea4:	f043 0310 	orr.w	r3, r3, #16
    3ea8:	7363      	strb	r3, [r4, #13]
    3eaa:	1b03      	subs	r3, r0, r4
    3eac:	4258      	negs	r0, r3
    3eae:	4158      	adcs	r0, r3
    3eb0:	f7ff fec6 	bl	3c40 <update_cache>
	__asm__ volatile(
    3eb4:	f386 8811 	msr	BASEPRI, r6
    3eb8:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    3ebc:	68ab      	ldr	r3, [r5, #8]
    3ebe:	42a3      	cmp	r3, r4
    3ec0:	d103      	bne.n	3eca <z_impl_k_thread_suspend+0x5e>
}
    3ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    3ec6:	f002 b85e 	b.w	5f86 <z_reschedule_unlocked>
}
    3eca:	bd70      	pop	{r4, r5, r6, pc}
    3ecc:	2000084c 	.word	0x2000084c
    3ed0:	20000820 	.word	0x20000820

00003ed4 <z_thread_single_abort>:
{
    3ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ed8:	4604      	mov	r4, r0
	__asm__ volatile(
    3eda:	f04f 0320 	mov.w	r3, #32
    3ede:	f3ef 8211 	mrs	r2, BASEPRI
    3ee2:	f383 8811 	msr	BASEPRI, r3
    3ee6:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
    3eea:	7b43      	ldrb	r3, [r0, #13]
    3eec:	f013 0f28 	tst.w	r3, #40	; 0x28
    3ef0:	d005      	beq.n	3efe <z_thread_single_abort+0x2a>
	__asm__ volatile(
    3ef2:	f382 8811 	msr	BASEPRI, r2
    3ef6:	f3bf 8f6f 	isb	sy
}
    3efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
    3efe:	f043 0320 	orr.w	r3, r3, #32
    3f02:	7343      	strb	r3, [r0, #13]
    3f04:	f382 8811 	msr	BASEPRI, r2
    3f08:	f3bf 8f6f 	isb	sy
    3f0c:	3018      	adds	r0, #24
    3f0e:	f002 f8e6 	bl	60de <z_abort_timeout>
	__asm__ volatile(
    3f12:	f04f 0320 	mov.w	r3, #32
    3f16:	f3ef 8611 	mrs	r6, BASEPRI
    3f1a:	f383 8811 	msr	BASEPRI, r3
    3f1e:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3f22:	7b63      	ldrb	r3, [r4, #13]
    3f24:	06d8      	lsls	r0, r3, #27
    3f26:	d116      	bne.n	3f56 <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
    3f28:	69a2      	ldr	r2, [r4, #24]
    3f2a:	b9a2      	cbnz	r2, 3f56 <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
    3f2c:	0619      	lsls	r1, r3, #24
    3f2e:	d507      	bpl.n	3f40 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
    3f30:	4621      	mov	r1, r4
    3f32:	4826      	ldr	r0, [pc, #152]	; (3fcc <z_thread_single_abort+0xf8>)
    3f34:	f7ff fe6e 	bl	3c14 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    3f38:	7b63      	ldrb	r3, [r4, #13]
    3f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3f3e:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    3f40:	4b23      	ldr	r3, [pc, #140]	; (3fd0 <z_thread_single_abort+0xfc>)
    3f42:	6898      	ldr	r0, [r3, #8]
    3f44:	1b02      	subs	r2, r0, r4
    3f46:	4250      	negs	r0, r2
    3f48:	4150      	adcs	r0, r2
    3f4a:	f7ff fe79 	bl	3c40 <update_cache>
			waiter->base.pended_on = NULL;
    3f4e:	2700      	movs	r7, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    3f50:	f104 0830 	add.w	r8, r4, #48	; 0x30
    3f54:	e01d      	b.n	3f92 <z_thread_single_abort+0xbe>
			if (z_is_thread_pending(thread)) {
    3f56:	079b      	lsls	r3, r3, #30
    3f58:	d5f9      	bpl.n	3f4e <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
    3f5a:	4621      	mov	r1, r4
    3f5c:	68a0      	ldr	r0, [r4, #8]
    3f5e:	f7ff fe59 	bl	3c14 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3f62:	7b63      	ldrb	r3, [r4, #13]
    3f64:	f023 0302 	bic.w	r3, r3, #2
    3f68:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    3f6a:	2300      	movs	r3, #0
    3f6c:	60a3      	str	r3, [r4, #8]
    3f6e:	e7ee      	b.n	3f4e <z_thread_single_abort+0x7a>
    3f70:	f105 0018 	add.w	r0, r5, #24
    3f74:	f002 f8b3 	bl	60de <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    3f78:	68a8      	ldr	r0, [r5, #8]
    3f7a:	4629      	mov	r1, r5
    3f7c:	f7ff fe4a 	bl	3c14 <z_priq_dumb_remove>
    3f80:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
    3f82:	4628      	mov	r0, r5
    3f84:	f023 0302 	bic.w	r3, r3, #2
    3f88:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    3f8a:	60af      	str	r7, [r5, #8]
    3f8c:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
    3f8e:	f7ff fe9b 	bl	3cc8 <ready_thread>
	return list->head == list;
    3f92:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3f94:	4545      	cmp	r5, r8
    3f96:	d001      	beq.n	3f9c <z_thread_single_abort+0xc8>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    3f98:	2d00      	cmp	r5, #0
    3f9a:	d1e9      	bne.n	3f70 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
    3f9c:	4b0c      	ldr	r3, [pc, #48]	; (3fd0 <z_thread_single_abort+0xfc>)
    3f9e:	689a      	ldr	r2, [r3, #8]
    3fa0:	4b0c      	ldr	r3, [pc, #48]	; (3fd4 <z_thread_single_abort+0x100>)
    3fa2:	429a      	cmp	r2, r3
    3fa4:	d102      	bne.n	3fac <z_thread_single_abort+0xd8>
			update_cache(1);
    3fa6:	2001      	movs	r0, #1
    3fa8:	f7ff fe4a 	bl	3c40 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
    3fac:	7b63      	ldrb	r3, [r4, #13]
    3fae:	f043 0308 	orr.w	r3, r3, #8
    3fb2:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
    3fb4:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
    3fb6:	f386 8811 	msr	BASEPRI, r6
    3fba:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d09b      	beq.n	3efa <z_thread_single_abort+0x26>
		fn_abort(thread);
    3fc2:	4620      	mov	r0, r4
}
    3fc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
    3fc8:	4718      	bx	r3
    3fca:	bf00      	nop
    3fcc:	2000084c 	.word	0x2000084c
    3fd0:	20000820 	.word	0x20000820
    3fd4:	20000160 	.word	0x20000160

00003fd8 <unready_thread>:
{
    3fd8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    3fda:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    3fde:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3fe0:	2b00      	cmp	r3, #0
    3fe2:	da06      	bge.n	3ff2 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    3fe4:	4807      	ldr	r0, [pc, #28]	; (4004 <unready_thread+0x2c>)
    3fe6:	f7ff fe15 	bl	3c14 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    3fea:	7b4b      	ldrb	r3, [r1, #13]
    3fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3ff0:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    3ff2:	4b05      	ldr	r3, [pc, #20]	; (4008 <unready_thread+0x30>)
    3ff4:	6898      	ldr	r0, [r3, #8]
    3ff6:	1a43      	subs	r3, r0, r1
    3ff8:	4258      	negs	r0, r3
    3ffa:	4158      	adcs	r0, r3
}
    3ffc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    4000:	f7ff be1e 	b.w	3c40 <update_cache>
    4004:	2000084c 	.word	0x2000084c
    4008:	20000820 	.word	0x20000820

0000400c <pend>:
{
    400c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4010:	4606      	mov	r6, r0
    4012:	4614      	mov	r4, r2
    4014:	461d      	mov	r5, r3
	__asm__ volatile(
    4016:	f04f 0320 	mov.w	r3, #32
    401a:	f3ef 8711 	mrs	r7, BASEPRI
    401e:	f383 8811 	msr	BASEPRI, r3
    4022:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    4026:	f001 fffe 	bl	6026 <add_to_waitq_locked>
	__asm__ volatile(
    402a:	f387 8811 	msr	BASEPRI, r7
    402e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4032:	1c6b      	adds	r3, r5, #1
    4034:	bf08      	it	eq
    4036:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    403a:	d008      	beq.n	404e <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    403c:	4622      	mov	r2, r4
    403e:	462b      	mov	r3, r5
    4040:	f106 0018 	add.w	r0, r6, #24
    4044:	4903      	ldr	r1, [pc, #12]	; (4054 <pend+0x48>)
}
    4046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    404a:	f000 ba7b 	b.w	4544 <z_add_timeout>
    404e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4052:	bf00      	nop
    4054:	00005fe7 	.word	0x00005fe7

00004058 <z_pend_curr>:
{
    4058:	b510      	push	{r4, lr}
    405a:	460c      	mov	r4, r1
	pending_current = _current;
    405c:	4b06      	ldr	r3, [pc, #24]	; (4078 <z_pend_curr+0x20>)
{
    405e:	4611      	mov	r1, r2
	pending_current = _current;
    4060:	6898      	ldr	r0, [r3, #8]
    4062:	4b06      	ldr	r3, [pc, #24]	; (407c <z_pend_curr+0x24>)
    4064:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    4066:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    406a:	f7ff ffcf 	bl	400c <pend>
    406e:	4620      	mov	r0, r4
}
    4070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4074:	f7fe b848 	b.w	2108 <arch_swap>
    4078:	20000820 	.word	0x20000820
    407c:	20000854 	.word	0x20000854

00004080 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
    4080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4082:	4605      	mov	r5, r0
    4084:	9101      	str	r1, [sp, #4]
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + z_tick_get_32();
    4086:	f002 f86b 	bl	6160 <z_tick_get_32>
    408a:	4604      	mov	r4, r0
	__asm__ volatile(
    408c:	f04f 0220 	mov.w	r2, #32
    4090:	f3ef 8711 	mrs	r7, BASEPRI
    4094:	f382 8811 	msr	BASEPRI, r2
    4098:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    409c:	4e12      	ldr	r6, [pc, #72]	; (40e8 <z_tick_sleep.part.0+0x68>)
    409e:	4a13      	ldr	r2, [pc, #76]	; (40ec <z_tick_sleep.part.0+0x6c>)
    40a0:	68b0      	ldr	r0, [r6, #8]
    40a2:	6010      	str	r0, [r2, #0]
#endif
	unready_thread(_current);
    40a4:	f7ff ff98 	bl	3fd8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    40a8:	68b0      	ldr	r0, [r6, #8]
    40aa:	4911      	ldr	r1, [pc, #68]	; (40f0 <z_tick_sleep.part.0+0x70>)
    40ac:	462a      	mov	r2, r5
    40ae:	9b01      	ldr	r3, [sp, #4]
    40b0:	3018      	adds	r0, #24
    40b2:	f000 fa47 	bl	4544 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    40b6:	68b2      	ldr	r2, [r6, #8]
    40b8:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
    40ba:	7b53      	ldrb	r3, [r2, #13]
    40bc:	f043 0310 	orr.w	r3, r3, #16
    40c0:	7353      	strb	r3, [r2, #13]
    40c2:	f7fe f821 	bl	2108 <arch_swap>
	expected_wakeup_ticks = ticks + z_tick_get_32();
    40c6:	1960      	adds	r0, r4, r5

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
    40c8:	4604      	mov	r4, r0
    40ca:	f002 f849 	bl	6160 <z_tick_get_32>
    40ce:	2500      	movs	r5, #0
    40d0:	1a24      	subs	r4, r4, r0
    40d2:	f165 0500 	sbc.w	r5, r5, #0
    40d6:	2c00      	cmp	r4, #0
    40d8:	f175 0300 	sbcs.w	r3, r5, #0
    40dc:	bfb8      	it	lt
    40de:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
    40e0:	4620      	mov	r0, r4
    40e2:	b003      	add	sp, #12
    40e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40e6:	bf00      	nop
    40e8:	20000820 	.word	0x20000820
    40ec:	20000854 	.word	0x20000854
    40f0:	00005fe7 	.word	0x00005fe7

000040f4 <z_set_prio>:
{
    40f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40f8:	4604      	mov	r4, r0
    40fa:	f04f 0320 	mov.w	r3, #32
    40fe:	f3ef 8811 	mrs	r8, BASEPRI
    4102:	f383 8811 	msr	BASEPRI, r3
    4106:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    410a:	7b43      	ldrb	r3, [r0, #13]
    410c:	b24e      	sxtb	r6, r1
    410e:	06db      	lsls	r3, r3, #27
    4110:	d12e      	bne.n	4170 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
    4112:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    4114:	bb65      	cbnz	r5, 4170 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    4116:	4f18      	ldr	r7, [pc, #96]	; (4178 <z_set_prio+0x84>)
    4118:	4621      	mov	r1, r4
    411a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    411e:	f7ff fd79 	bl	3c14 <z_priq_dumb_remove>
	return list->head == list;
    4122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4126:	4283      	cmp	r3, r0
    4128:	bf18      	it	ne
    412a:	461d      	movne	r5, r3
    412c:	2d00      	cmp	r5, #0
    412e:	bf38      	it	cc
    4130:	2500      	movcc	r5, #0
				thread->base.prio = prio;
    4132:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4134:	b1b5      	cbz	r5, 4164 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
    4136:	f995 100e 	ldrsb.w	r1, [r5, #14]
    413a:	42b1      	cmp	r1, r6
    413c:	dc03      	bgt.n	4146 <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
    413e:	42aa      	cmp	r2, r5
    4140:	d010      	beq.n	4164 <z_set_prio+0x70>
    4142:	682d      	ldr	r5, [r5, #0]
    4144:	e7f6      	b.n	4134 <z_set_prio+0x40>
	node->prev = successor->prev;
    4146:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
    4148:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
    414c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    414e:	606c      	str	r4, [r5, #4]
			update_cache(1);
    4150:	2001      	movs	r0, #1
    4152:	f7ff fd75 	bl	3c40 <update_cache>
    4156:	2001      	movs	r0, #1
	__asm__ volatile(
    4158:	f388 8811 	msr	BASEPRI, r8
    415c:	f3bf 8f6f 	isb	sy
}
    4160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
    4164:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
    4168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    416a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    416c:	633c      	str	r4, [r7, #48]	; 0x30
}
    416e:	e7ef      	b.n	4150 <z_set_prio+0x5c>
			thread->base.prio = prio;
    4170:	2000      	movs	r0, #0
    4172:	73a6      	strb	r6, [r4, #14]
    4174:	e7f0      	b.n	4158 <z_set_prio+0x64>
    4176:	bf00      	nop
    4178:	20000820 	.word	0x20000820

0000417c <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    417c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    417e:	4b04      	ldr	r3, [pc, #16]	; (4190 <z_sched_init+0x14>)
    4180:	4608      	mov	r0, r1
    4182:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
    4186:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
    418a:	f7ff bcf1 	b.w	3b70 <k_sched_time_slice_set>
    418e:	bf00      	nop
    4190:	20000820 	.word	0x20000820

00004194 <z_impl_k_yield>:
{
    4194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    4196:	4c24      	ldr	r4, [pc, #144]	; (4228 <z_impl_k_yield+0x94>)
    4198:	4b24      	ldr	r3, [pc, #144]	; (422c <z_impl_k_yield+0x98>)
    419a:	68a2      	ldr	r2, [r4, #8]
    419c:	429a      	cmp	r2, r3
    419e:	d030      	beq.n	4202 <z_impl_k_yield+0x6e>
	__asm__ volatile(
    41a0:	f04f 0320 	mov.w	r3, #32
    41a4:	f3ef 8511 	mrs	r5, BASEPRI
    41a8:	f383 8811 	msr	BASEPRI, r3
    41ac:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    41b0:	68a1      	ldr	r1, [r4, #8]
    41b2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    41b6:	f7ff fd2d 	bl	3c14 <z_priq_dumb_remove>
	return list->head == list;
    41ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
    41bc:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    41be:	4283      	cmp	r3, r0
    41c0:	bf08      	it	eq
    41c2:	2300      	moveq	r3, #0
    41c4:	2b00      	cmp	r3, #0
    41c6:	bf38      	it	cc
    41c8:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    41ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    41cc:	b32b      	cbz	r3, 421a <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
    41ce:	f992 700e 	ldrsb.w	r7, [r2, #14]
    41d2:	f993 600e 	ldrsb.w	r6, [r3, #14]
    41d6:	42b7      	cmp	r7, r6
    41d8:	db03      	blt.n	41e2 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
    41da:	428b      	cmp	r3, r1
    41dc:	d01d      	beq.n	421a <z_impl_k_yield+0x86>
    41de:	681b      	ldr	r3, [r3, #0]
    41e0:	e7f4      	b.n	41cc <z_impl_k_yield+0x38>
	node->prev = successor->prev;
    41e2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    41e4:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    41e8:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    41ea:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
    41ec:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
    41ee:	2001      	movs	r0, #1
    41f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    41f4:	7353      	strb	r3, [r2, #13]
    41f6:	f7ff fd23 	bl	3c40 <update_cache>
	__asm__ volatile(
    41fa:	f385 8811 	msr	BASEPRI, r5
    41fe:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    4202:	f04f 0320 	mov.w	r3, #32
    4206:	f3ef 8011 	mrs	r0, BASEPRI
    420a:	f383 8811 	msr	BASEPRI, r3
    420e:	f3bf 8f6f 	isb	sy
}
    4212:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4216:	f7fd bf77 	b.w	2108 <arch_swap>
	node->prev = list->tail;
    421a:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
    421e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4220:	601a      	str	r2, [r3, #0]
	list->tail = node;
    4222:	6322      	str	r2, [r4, #48]	; 0x30
}
    4224:	e7e2      	b.n	41ec <z_impl_k_yield+0x58>
    4226:	bf00      	nop
    4228:	20000820 	.word	0x20000820
    422c:	20000160 	.word	0x20000160

00004230 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4230:	f1b1 3fff 	cmp.w	r1, #4294967295
    4234:	bf08      	it	eq
    4236:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    423a:	b508      	push	{r3, lr}
    423c:	4602      	mov	r2, r0
    423e:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4240:	d106      	bne.n	4250 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
    4242:	4b0b      	ldr	r3, [pc, #44]	; (4270 <z_impl_k_sleep+0x40>)
    4244:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4246:	f7ff fe11 	bl	3e6c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    424a:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    424e:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
    4250:	4313      	orrs	r3, r2
    4252:	d10a      	bne.n	426a <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
    4254:	f7ff ff9e 	bl	4194 <z_impl_k_yield>
		return 0;
    4258:	2000      	movs	r0, #0
		} else {
			return (t * to_hz + off) / from_hz;
    425a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    425e:	fb80 2303 	smull	r2, r3, r0, r3
    4262:	0bd0      	lsrs	r0, r2, #15
    4264:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    4268:	e7f1      	b.n	424e <z_impl_k_sleep+0x1e>
    426a:	f7ff ff09 	bl	4080 <z_tick_sleep.part.0>
    426e:	e7f4      	b.n	425a <z_impl_k_sleep+0x2a>
    4270:	20000820 	.word	0x20000820

00004274 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4274:	4b01      	ldr	r3, [pc, #4]	; (427c <z_impl_k_current_get+0x8>)
    4276:	6898      	ldr	r0, [r3, #8]
    4278:	4770      	bx	lr
    427a:	bf00      	nop
    427c:	20000820 	.word	0x20000820

00004280 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4280:	b538      	push	{r3, r4, r5, lr}
    4282:	4604      	mov	r4, r0
    4284:	f04f 0320 	mov.w	r3, #32
    4288:	f3ef 8511 	mrs	r5, BASEPRI
    428c:	f383 8811 	msr	BASEPRI, r3
    4290:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    4294:	f001 fef2 	bl	607c <z_unpend_first_thread>

	if (thread != NULL) {
    4298:	b148      	cbz	r0, 42ae <z_impl_k_sem_give+0x2e>
    429a:	2200      	movs	r2, #0
    429c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    429e:	f001 fe92 	bl	5fc6 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    42a2:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    42a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    42a8:	4804      	ldr	r0, [pc, #16]	; (42bc <z_impl_k_sem_give+0x3c>)
    42aa:	f7ff bc8d 	b.w	3bc8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    42ae:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    42b2:	429a      	cmp	r2, r3
    42b4:	bf18      	it	ne
    42b6:	3301      	addne	r3, #1
    42b8:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    42ba:	e7f2      	b.n	42a2 <z_impl_k_sem_give+0x22>
    42bc:	20000882 	.word	0x20000882

000042c0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    42c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    42c2:	4614      	mov	r4, r2
    42c4:	461d      	mov	r5, r3
    42c6:	f04f 0320 	mov.w	r3, #32
    42ca:	f3ef 8111 	mrs	r1, BASEPRI
    42ce:	f383 8811 	msr	BASEPRI, r3
    42d2:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    42d6:	6883      	ldr	r3, [r0, #8]
    42d8:	b143      	cbz	r3, 42ec <z_impl_k_sem_take+0x2c>
		sem->count--;
    42da:	3b01      	subs	r3, #1
    42dc:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    42de:	f381 8811 	msr	BASEPRI, r1
    42e2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    42e6:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    42e8:	b003      	add	sp, #12
    42ea:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    42ec:	ea54 0305 	orrs.w	r3, r4, r5
    42f0:	d106      	bne.n	4300 <z_impl_k_sem_take+0x40>
    42f2:	f381 8811 	msr	BASEPRI, r1
    42f6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    42fa:	f06f 000f 	mvn.w	r0, #15
    42fe:	e7f3      	b.n	42e8 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    4300:	4602      	mov	r2, r0
    4302:	e9cd 4500 	strd	r4, r5, [sp]
    4306:	4802      	ldr	r0, [pc, #8]	; (4310 <z_impl_k_sem_take+0x50>)
    4308:	f7ff fea6 	bl	4058 <z_pend_curr>
	return ret;
    430c:	e7ec      	b.n	42e8 <z_impl_k_sem_take+0x28>
    430e:	bf00      	nop
    4310:	20000882 	.word	0x20000882

00004314 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4314:	e92d 41b0 	stmdb	sp!, {r4, r5, r7, r8, lr}
	sys_dlist_init(&w->waitq);
    4318:	f100 0530 	add.w	r5, r0, #48	; 0x30
    431c:	b085      	sub	sp, #20
	list->tail = (sys_dnode_t *)list;
    431e:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
    4322:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
    4324:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
    4326:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    4328:	2504      	movs	r5, #4
    432a:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
    432c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    432e:	3207      	adds	r2, #7
	thread_base->prio = priority;
    4330:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
    4332:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4334:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
    4338:	e9c0 121a 	strd	r1, r2, [r0, #104]	; 0x68
	stack_ptr = (char *)stack + stack_obj_size;
    433c:	eb01 0802 	add.w	r8, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	node->prev = NULL;
    4342:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->sched_locked = 0U;
    4346:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    4348:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    434a:	9202      	str	r2, [sp, #8]
    434c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    434e:	9201      	str	r2, [sp, #4]
    4350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4352:	9200      	str	r2, [sp, #0]
    4354:	4642      	mov	r2, r8
    4356:	f7fd ff61 	bl	221c <arch_new_thread>
	if (!_current) {
    435a:	4b05      	ldr	r3, [pc, #20]	; (4370 <z_setup_new_thread+0x5c>)
	new_thread->fn_abort = NULL;
    435c:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
    4360:	689b      	ldr	r3, [r3, #8]
    4362:	b103      	cbz	r3, 4366 <z_setup_new_thread+0x52>
	new_thread->resource_pool = _current->resource_pool;
    4364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
    4366:	4640      	mov	r0, r8
    4368:	6763      	str	r3, [r4, #116]	; 0x74
    436a:	b005      	add	sp, #20
    436c:	e8bd 81b0 	ldmia.w	sp!, {r4, r5, r7, r8, pc}
    4370:	20000820 	.word	0x20000820

00004374 <z_init_static_threads>:
{
    4374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    4378:	4e2a      	ldr	r6, [pc, #168]	; (4424 <z_init_static_threads+0xb0>)
    437a:	4d2b      	ldr	r5, [pc, #172]	; (4428 <z_init_static_threads+0xb4>)
    437c:	46b0      	mov	r8, r6
{
    437e:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    4380:	42b5      	cmp	r5, r6
    4382:	f105 0430 	add.w	r4, r5, #48	; 0x30
    4386:	d310      	bcc.n	43aa <z_init_static_threads+0x36>
	k_sched_lock();
    4388:	f7ff fc30 	bl	3bec <k_sched_lock>
    438c:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    4390:	f240 36e7 	movw	r6, #999	; 0x3e7
    4394:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    4396:	4c24      	ldr	r4, [pc, #144]	; (4428 <z_init_static_threads+0xb4>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    4398:	f8df a090 	ldr.w	sl, [pc, #144]	; 442c <z_init_static_threads+0xb8>
    439c:	4544      	cmp	r4, r8
    439e:	d321      	bcc.n	43e4 <z_init_static_threads+0x70>
}
    43a0:	b006      	add	sp, #24
    43a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    43a6:	f7ff bc73 	b.w	3c90 <k_sched_unlock>
		z_setup_new_thread(
    43aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
    43ae:	9305      	str	r3, [sp, #20]
    43b0:	f854 3c10 	ldr.w	r3, [r4, #-16]
    43b4:	9304      	str	r3, [sp, #16]
    43b6:	f854 3c14 	ldr.w	r3, [r4, #-20]
    43ba:	9303      	str	r3, [sp, #12]
    43bc:	f854 3c18 	ldr.w	r3, [r4, #-24]
    43c0:	9302      	str	r3, [sp, #8]
    43c2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    43c6:	9301      	str	r3, [sp, #4]
    43c8:	f854 3c20 	ldr.w	r3, [r4, #-32]
    43cc:	9300      	str	r3, [sp, #0]
    43ce:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    43d2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    43d6:	f7ff ff9d 	bl	4314 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    43da:	f854 3c30 	ldr.w	r3, [r4, #-48]
    43de:	65dd      	str	r5, [r3, #92]	; 0x5c
    43e0:	4625      	mov	r5, r4
    43e2:	e7cd      	b.n	4380 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    43e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    43e6:	1c5a      	adds	r2, r3, #1
    43e8:	d00d      	beq.n	4406 <z_init_static_threads+0x92>
    43ea:	4630      	mov	r0, r6
    43ec:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
    43ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    43f2:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    43f6:	42b9      	cmp	r1, r7
    43f8:	bf08      	it	eq
    43fa:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    43fc:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    43fe:	d104      	bne.n	440a <z_init_static_threads+0x96>
	z_sched_start(thread);
    4400:	4628      	mov	r0, r5
    4402:	f7ff fc99 	bl	3d38 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4406:	3430      	adds	r4, #48	; 0x30
    4408:	e7c8      	b.n	439c <z_init_static_threads+0x28>
    440a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    440e:	2300      	movs	r3, #0
    4410:	f7fb ff14 	bl	23c <__aeabi_uldivmod>
    4414:	4602      	mov	r2, r0
    4416:	460b      	mov	r3, r1
    4418:	f105 0018 	add.w	r0, r5, #24
    441c:	4651      	mov	r1, sl
    441e:	f000 f891 	bl	4544 <z_add_timeout>
    4422:	e7f0      	b.n	4406 <z_init_static_threads+0x92>
    4424:	20000110 	.word	0x20000110
    4428:	20000110 	.word	0x20000110
    442c:	00005fe7 	.word	0x00005fe7

00004430 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
    4430:	b508      	push	{r3, lr}
	__asm__ volatile(
    4432:	f04f 0320 	mov.w	r3, #32
    4436:	f3ef 8411 	mrs	r4, BASEPRI
    443a:	f383 8811 	msr	BASEPRI, r3
    443e:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
    4442:	4b04      	ldr	r3, [pc, #16]	; (4454 <z_self_abort+0x24>)
    4444:	6898      	ldr	r0, [r3, #8]
    4446:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
    4448:	f7ff fd10 	bl	3e6c <z_impl_k_thread_suspend>
    444c:	4620      	mov	r0, r4
    444e:	f7fd fe5b 	bl	2108 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4452:	bf00      	nop
    4454:	20000820 	.word	0x20000820

00004458 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    4458:	4a02      	ldr	r2, [pc, #8]	; (4464 <boot_banner+0xc>)
    445a:	4903      	ldr	r1, [pc, #12]	; (4468 <boot_banner+0x10>)
    445c:	4803      	ldr	r0, [pc, #12]	; (446c <boot_banner+0x14>)
    445e:	f001 b8e9 	b.w	5634 <printk>
    4462:	bf00      	nop
    4464:	000067a5 	.word	0x000067a5
    4468:	0000723f 	.word	0x0000723f
    446c:	0000724c 	.word	0x0000724c

00004470 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    4470:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    4472:	4806      	ldr	r0, [pc, #24]	; (448c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    4474:	4a06      	ldr	r2, [pc, #24]	; (4490 <z_data_copy+0x20>)
    4476:	4907      	ldr	r1, [pc, #28]	; (4494 <z_data_copy+0x24>)
    4478:	1a12      	subs	r2, r2, r0
    447a:	f001 fc9b 	bl	5db4 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    447e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    4482:	4a05      	ldr	r2, [pc, #20]	; (4498 <z_data_copy+0x28>)
    4484:	4905      	ldr	r1, [pc, #20]	; (449c <z_data_copy+0x2c>)
    4486:	4806      	ldr	r0, [pc, #24]	; (44a0 <z_data_copy+0x30>)
    4488:	f001 bc94 	b.w	5db4 <memcpy>
    448c:	20000000 	.word	0x20000000
    4490:	20000160 	.word	0x20000160
    4494:	00007278 	.word	0x00007278
    4498:	00000000 	.word	0x00000000
    449c:	00007278 	.word	0x00007278
    44a0:	20000000 	.word	0x20000000

000044a4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
    44a4:	4b03      	ldr	r3, [pc, #12]	; (44b4 <elapsed+0x10>)
    44a6:	681b      	ldr	r3, [r3, #0]
    44a8:	b90b      	cbnz	r3, 44ae <elapsed+0xa>
    44aa:	f7fd baf1 	b.w	1a90 <z_clock_elapsed>
}
    44ae:	2000      	movs	r0, #0
    44b0:	4770      	bx	lr
    44b2:	bf00      	nop
    44b4:	20000860 	.word	0x20000860

000044b8 <remove_timeout>:
{
    44b8:	b530      	push	{r4, r5, lr}
    44ba:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    44bc:	b168      	cbz	r0, 44da <remove_timeout+0x22>
    44be:	4a0a      	ldr	r2, [pc, #40]	; (44e8 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    44c0:	6852      	ldr	r2, [r2, #4]
    44c2:	4290      	cmp	r0, r2
    44c4:	d009      	beq.n	44da <remove_timeout+0x22>
	if (next(t) != NULL) {
    44c6:	b143      	cbz	r3, 44da <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    44c8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    44cc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    44d0:	1912      	adds	r2, r2, r4
    44d2:	eb45 0101 	adc.w	r1, r5, r1
    44d6:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
    44da:	6842      	ldr	r2, [r0, #4]
    44dc:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    44de:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    44e0:	2300      	movs	r3, #0
	node->prev = NULL;
    44e2:	e9c0 3300 	strd	r3, r3, [r0]
}
    44e6:	bd30      	pop	{r4, r5, pc}
    44e8:	20000054 	.word	0x20000054

000044ec <next_timeout>:
	return list->head == list;
    44ec:	4b13      	ldr	r3, [pc, #76]	; (453c <next_timeout+0x50>)

static int32_t next_timeout(void)
{
    44ee:	b510      	push	{r4, lr}
    44f0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    44f2:	429c      	cmp	r4, r3
    44f4:	bf08      	it	eq
    44f6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    44f8:	f7ff ffd4 	bl	44a4 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    44fc:	b1cc      	cbz	r4, 4532 <next_timeout+0x46>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    44fe:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    4502:	1a12      	subs	r2, r2, r0
    4504:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    4508:	2a01      	cmp	r2, #1
    450a:	f173 0100 	sbcs.w	r1, r3, #0
    450e:	db13      	blt.n	4538 <next_timeout+0x4c>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4510:	4610      	mov	r0, r2
    4512:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4516:	4619      	mov	r1, r3
    4518:	2300      	movs	r3, #0
    451a:	4282      	cmp	r2, r0
    451c:	eb73 0401 	sbcs.w	r4, r3, r1
    4520:	da00      	bge.n	4524 <next_timeout+0x38>
    4522:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4524:	4b06      	ldr	r3, [pc, #24]	; (4540 <next_timeout+0x54>)
    4526:	695b      	ldr	r3, [r3, #20]
    4528:	b113      	cbz	r3, 4530 <next_timeout+0x44>
    452a:	4298      	cmp	r0, r3
    452c:	bfa8      	it	ge
    452e:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    4530:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    4532:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4536:	e7f5      	b.n	4524 <next_timeout+0x38>
    4538:	2000      	movs	r0, #0
    453a:	e7f3      	b.n	4524 <next_timeout+0x38>
    453c:	20000054 	.word	0x20000054
    4540:	20000820 	.word	0x20000820

00004544 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    4544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4548:	9101      	str	r1, [sp, #4]
    454a:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    454c:	1c4b      	adds	r3, r1, #1
    454e:	bf08      	it	eq
    4550:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    4554:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4556:	d070      	beq.n	463a <z_add_timeout+0xf6>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    4558:	f06f 0301 	mvn.w	r3, #1
    455c:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
    4560:	1c54      	adds	r4, r2, #1
    4562:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    4566:	ebb3 0804 	subs.w	r8, r3, r4
    456a:	eb6b 0905 	sbc.w	r9, fp, r5
    456e:	f1b8 0f00 	cmp.w	r8, #0
    4572:	f179 0300 	sbcs.w	r3, r9, #0
    4576:	db0f      	blt.n	4598 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    4578:	f7ff ff94 	bl	44a4 <elapsed>
    457c:	f06f 0301 	mvn.w	r3, #1
    4580:	4a34      	ldr	r2, [pc, #208]	; (4654 <z_add_timeout+0x110>)
    4582:	e9d2 1c00 	ldrd	r1, ip, [r2]
    4586:	1a5b      	subs	r3, r3, r1
    4588:	eb6b 020c 	sbc.w	r2, fp, ip
    458c:	1b1e      	subs	r6, r3, r4
    458e:	eb62 0705 	sbc.w	r7, r2, r5
    4592:	1a34      	subs	r4, r6, r0
    4594:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4598:	9b01      	ldr	r3, [sp, #4]
    459a:	f8ca 3008 	str.w	r3, [sl, #8]
    459e:	f04f 0320 	mov.w	r3, #32
    45a2:	f3ef 8611 	mrs	r6, BASEPRI
    45a6:	f383 8811 	msr	BASEPRI, r3
    45aa:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    45ae:	f7ff ff79 	bl	44a4 <elapsed>
	ticks = MAX(1, ticks);
    45b2:	2c01      	cmp	r4, #1
    45b4:	f175 0300 	sbcs.w	r3, r5, #0
    45b8:	bfbc      	itt	lt
    45ba:	2401      	movlt	r4, #1
    45bc:	2500      	movlt	r5, #0
	return list->head == list;
    45be:	4b26      	ldr	r3, [pc, #152]	; (4658 <z_add_timeout+0x114>)
		to->dticks = ticks + elapsed();
    45c0:	1824      	adds	r4, r4, r0
    45c2:	681a      	ldr	r2, [r3, #0]
    45c4:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    45c8:	429a      	cmp	r2, r3
    45ca:	e9ca 4504 	strd	r4, r5, [sl, #16]
    45ce:	d001      	beq.n	45d4 <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    45d0:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    45d2:	b952      	cbnz	r2, 45ea <z_add_timeout+0xa6>
	node->prev = list->tail;
    45d4:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    45d6:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
    45da:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    45de:	685a      	ldr	r2, [r3, #4]
    45e0:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    45e4:	f8c3 a004 	str.w	sl, [r3, #4]
}
    45e8:	e014      	b.n	4614 <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
    45ea:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
    45ee:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    45f2:	4544      	cmp	r4, r8
    45f4:	eb75 0109 	sbcs.w	r1, r5, r9
    45f8:	da22      	bge.n	4640 <z_add_timeout+0xfc>
				t->dticks -= to->dticks;
    45fa:	ebb8 0004 	subs.w	r0, r8, r4
    45fe:	eb69 0105 	sbc.w	r1, r9, r5
    4602:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
    4606:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    4608:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    460c:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    4610:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    4614:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4616:	429a      	cmp	r2, r3
    4618:	d00b      	beq.n	4632 <z_add_timeout+0xee>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    461a:	4592      	cmp	sl, r2
    461c:	d109      	bne.n	4632 <z_add_timeout+0xee>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    461e:	f7ff ff65 	bl	44ec <next_timeout>

			if (next_time == 0 ||
    4622:	b118      	cbz	r0, 462c <z_add_timeout+0xe8>
			    _current_cpu->slice_ticks != next_time) {
    4624:	4b0d      	ldr	r3, [pc, #52]	; (465c <z_add_timeout+0x118>)
			if (next_time == 0 ||
    4626:	695b      	ldr	r3, [r3, #20]
    4628:	4283      	cmp	r3, r0
    462a:	d002      	beq.n	4632 <z_add_timeout+0xee>
				z_clock_set_timeout(next_time, false);
    462c:	2100      	movs	r1, #0
    462e:	f7fd f9fd 	bl	1a2c <z_clock_set_timeout>
	__asm__ volatile(
    4632:	f386 8811 	msr	BASEPRI, r6
    4636:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    463a:	b003      	add	sp, #12
    463c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    4640:	ebb4 0008 	subs.w	r0, r4, r8
    4644:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
    4648:	42ba      	cmp	r2, r7
    464a:	e9ca 0104 	strd	r0, r1, [sl, #16]
    464e:	d0c1      	beq.n	45d4 <z_add_timeout+0x90>
    4650:	6812      	ldr	r2, [r2, #0]
    4652:	e7be      	b.n	45d2 <z_add_timeout+0x8e>
    4654:	20000260 	.word	0x20000260
    4658:	20000054 	.word	0x20000054
    465c:	20000820 	.word	0x20000820

00004660 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    4660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4664:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    4666:	f7ff fbbf 	bl	3de8 <z_time_slice>
	__asm__ volatile(
    466a:	f04f 0320 	mov.w	r3, #32
    466e:	f3ef 8411 	mrs	r4, BASEPRI
    4672:	f383 8811 	msr	BASEPRI, r3
    4676:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    467a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 472c <z_clock_announce+0xcc>
    467e:	4d2a      	ldr	r5, [pc, #168]	; (4728 <z_clock_announce+0xc8>)
    4680:	4651      	mov	r1, sl
	return list->head == list;
    4682:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 4730 <z_clock_announce+0xd0>
    4686:	602e      	str	r6, [r5, #0]
    4688:	f8d5 c000 	ldr.w	ip, [r5]
    468c:	f8db 0000 	ldr.w	r0, [fp]
    4690:	4662      	mov	r2, ip
    4692:	e9da 8900 	ldrd	r8, r9, [sl]
    4696:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4698:	4558      	cmp	r0, fp
    469a:	e9cd 2300 	strd	r2, r3, [sp]
    469e:	d00d      	beq.n	46bc <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    46a0:	b160      	cbz	r0, 46bc <z_clock_announce+0x5c>
    46a2:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    46a6:	45b4      	cmp	ip, r6
    46a8:	41bb      	sbcs	r3, r7
    46aa:	da1d      	bge.n	46e8 <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    46ac:	9b00      	ldr	r3, [sp, #0]
    46ae:	ebb6 0c03 	subs.w	ip, r6, r3
    46b2:	9b01      	ldr	r3, [sp, #4]
    46b4:	eb67 0603 	sbc.w	r6, r7, r3
    46b8:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    46bc:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
    46be:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
    46c0:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
    46c2:	eb13 0208 	adds.w	r2, r3, r8
    46c6:	9b01      	ldr	r3, [sp, #4]
    46c8:	eb43 0309 	adc.w	r3, r3, r9
    46cc:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
    46d0:	f7ff ff0c 	bl	44ec <next_timeout>
    46d4:	4631      	mov	r1, r6
    46d6:	f7fd f9a9 	bl	1a2c <z_clock_set_timeout>
	__asm__ volatile(
    46da:	f384 8811 	msr	BASEPRI, r4
    46de:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    46e2:	b003      	add	sp, #12
    46e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
    46e8:	2200      	movs	r2, #0
    46ea:	2300      	movs	r3, #0
		curr_tick += dt;
    46ec:	eb18 0806 	adds.w	r8, r8, r6
    46f0:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    46f4:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    46f8:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    46fc:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    4700:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    4702:	f7ff fed9 	bl	44b8 <remove_timeout>
    4706:	f384 8811 	msr	BASEPRI, r4
    470a:	f3bf 8f6f 	isb	sy
		t->fn(t);
    470e:	6883      	ldr	r3, [r0, #8]
    4710:	4798      	blx	r3
	__asm__ volatile(
    4712:	f04f 0320 	mov.w	r3, #32
    4716:	f3ef 8411 	mrs	r4, BASEPRI
    471a:	f383 8811 	msr	BASEPRI, r3
    471e:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    4722:	4902      	ldr	r1, [pc, #8]	; (472c <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    4724:	e7b0      	b.n	4688 <z_clock_announce+0x28>
    4726:	bf00      	nop
    4728:	20000860 	.word	0x20000860
    472c:	20000260 	.word	0x20000260
    4730:	20000054 	.word	0x20000054

00004734 <z_tick_get>:

int64_t z_tick_get(void)
{
    4734:	b510      	push	{r4, lr}
    4736:	f04f 0320 	mov.w	r3, #32
    473a:	f3ef 8411 	mrs	r4, BASEPRI
    473e:	f383 8811 	msr	BASEPRI, r3
    4742:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    4746:	f7fd f9a3 	bl	1a90 <z_clock_elapsed>
    474a:	4b06      	ldr	r3, [pc, #24]	; (4764 <z_tick_get+0x30>)
    474c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4750:	1812      	adds	r2, r2, r0
    4752:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    4756:	f384 8811 	msr	BASEPRI, r4
    475a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    475e:	4610      	mov	r0, r2
    4760:	4619      	mov	r1, r3
    4762:	bd10      	pop	{r4, pc}
    4764:	20000260 	.word	0x20000260

00004768 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    4768:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    476a:	4c06      	ldr	r4, [pc, #24]	; (4784 <statics_init+0x1c>)
    476c:	4d06      	ldr	r5, [pc, #24]	; (4788 <statics_init+0x20>)
    476e:	42ac      	cmp	r4, r5
    4770:	d301      	bcc.n	4776 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    4772:	2000      	movs	r0, #0
    4774:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    4776:	4620      	mov	r0, r4
    4778:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    477c:	f001 fcf4 	bl	6168 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    4780:	3414      	adds	r4, #20
    4782:	e7f4      	b.n	476e <statics_init+0x6>
    4784:	20000110 	.word	0x20000110
    4788:	20000110 	.word	0x20000110

0000478c <CC_PalMemCopyPlat>:
    478c:	f001 bafb 	b.w	5d86 <memmove>

00004790 <CC_PalMemSetZeroPlat>:
    4790:	460a      	mov	r2, r1
    4792:	2100      	movs	r1, #0
    4794:	f001 bb39 	b.w	5e0a <memset>

00004798 <CC_PalInit>:
    4798:	b510      	push	{r4, lr}
    479a:	4811      	ldr	r0, [pc, #68]	; (47e0 <CC_PalInit+0x48>)
    479c:	f000 f848 	bl	4830 <CC_PalMutexCreate>
    47a0:	b100      	cbz	r0, 47a4 <CC_PalInit+0xc>
    47a2:	bd10      	pop	{r4, pc}
    47a4:	480f      	ldr	r0, [pc, #60]	; (47e4 <CC_PalInit+0x4c>)
    47a6:	f000 f843 	bl	4830 <CC_PalMutexCreate>
    47aa:	2800      	cmp	r0, #0
    47ac:	d1f9      	bne.n	47a2 <CC_PalInit+0xa>
    47ae:	4c0e      	ldr	r4, [pc, #56]	; (47e8 <CC_PalInit+0x50>)
    47b0:	4620      	mov	r0, r4
    47b2:	f000 f83d 	bl	4830 <CC_PalMutexCreate>
    47b6:	2800      	cmp	r0, #0
    47b8:	d1f3      	bne.n	47a2 <CC_PalInit+0xa>
    47ba:	4b0c      	ldr	r3, [pc, #48]	; (47ec <CC_PalInit+0x54>)
    47bc:	480c      	ldr	r0, [pc, #48]	; (47f0 <CC_PalInit+0x58>)
    47be:	601c      	str	r4, [r3, #0]
    47c0:	f000 f836 	bl	4830 <CC_PalMutexCreate>
    47c4:	4601      	mov	r1, r0
    47c6:	2800      	cmp	r0, #0
    47c8:	d1eb      	bne.n	47a2 <CC_PalInit+0xa>
    47ca:	f000 f82d 	bl	4828 <CC_PalDmaInit>
    47ce:	4604      	mov	r4, r0
    47d0:	b108      	cbz	r0, 47d6 <CC_PalInit+0x3e>
    47d2:	4620      	mov	r0, r4
    47d4:	bd10      	pop	{r4, pc}
    47d6:	f000 f851 	bl	487c <CC_PalPowerSaveModeInit>
    47da:	4620      	mov	r0, r4
    47dc:	e7fa      	b.n	47d4 <CC_PalInit+0x3c>
    47de:	bf00      	nop
    47e0:	20000068 	.word	0x20000068
    47e4:	2000005c 	.word	0x2000005c
    47e8:	20000064 	.word	0x20000064
    47ec:	2000006c 	.word	0x2000006c
    47f0:	20000060 	.word	0x20000060

000047f4 <CC_PalTerminate>:
    47f4:	b508      	push	{r3, lr}
    47f6:	4808      	ldr	r0, [pc, #32]	; (4818 <CC_PalTerminate+0x24>)
    47f8:	f000 f824 	bl	4844 <CC_PalMutexDestroy>
    47fc:	4807      	ldr	r0, [pc, #28]	; (481c <CC_PalTerminate+0x28>)
    47fe:	f000 f821 	bl	4844 <CC_PalMutexDestroy>
    4802:	4807      	ldr	r0, [pc, #28]	; (4820 <CC_PalTerminate+0x2c>)
    4804:	f000 f81e 	bl	4844 <CC_PalMutexDestroy>
    4808:	4806      	ldr	r0, [pc, #24]	; (4824 <CC_PalTerminate+0x30>)
    480a:	f000 f81b 	bl	4844 <CC_PalMutexDestroy>
    480e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4812:	f000 b80b 	b.w	482c <CC_PalDmaTerminate>
    4816:	bf00      	nop
    4818:	20000068 	.word	0x20000068
    481c:	2000005c 	.word	0x2000005c
    4820:	20000064 	.word	0x20000064
    4824:	20000060 	.word	0x20000060

00004828 <CC_PalDmaInit>:
    4828:	2000      	movs	r0, #0
    482a:	4770      	bx	lr

0000482c <CC_PalDmaTerminate>:
    482c:	4770      	bx	lr
    482e:	bf00      	nop

00004830 <CC_PalMutexCreate>:
    4830:	b508      	push	{r3, lr}
    4832:	4b03      	ldr	r3, [pc, #12]	; (4840 <CC_PalMutexCreate+0x10>)
    4834:	6802      	ldr	r2, [r0, #0]
    4836:	681b      	ldr	r3, [r3, #0]
    4838:	6810      	ldr	r0, [r2, #0]
    483a:	4798      	blx	r3
    483c:	2000      	movs	r0, #0
    483e:	bd08      	pop	{r3, pc}
    4840:	20000080 	.word	0x20000080

00004844 <CC_PalMutexDestroy>:
    4844:	b508      	push	{r3, lr}
    4846:	4b03      	ldr	r3, [pc, #12]	; (4854 <CC_PalMutexDestroy+0x10>)
    4848:	6802      	ldr	r2, [r0, #0]
    484a:	685b      	ldr	r3, [r3, #4]
    484c:	6810      	ldr	r0, [r2, #0]
    484e:	4798      	blx	r3
    4850:	2000      	movs	r0, #0
    4852:	bd08      	pop	{r3, pc}
    4854:	20000080 	.word	0x20000080

00004858 <CC_PalMutexLock>:
    4858:	4b02      	ldr	r3, [pc, #8]	; (4864 <CC_PalMutexLock+0xc>)
    485a:	6802      	ldr	r2, [r0, #0]
    485c:	689b      	ldr	r3, [r3, #8]
    485e:	6810      	ldr	r0, [r2, #0]
    4860:	4718      	bx	r3
    4862:	bf00      	nop
    4864:	20000080 	.word	0x20000080

00004868 <CC_PalMutexUnlock>:
    4868:	b508      	push	{r3, lr}
    486a:	4b03      	ldr	r3, [pc, #12]	; (4878 <CC_PalMutexUnlock+0x10>)
    486c:	6802      	ldr	r2, [r0, #0]
    486e:	68db      	ldr	r3, [r3, #12]
    4870:	6810      	ldr	r0, [r2, #0]
    4872:	4798      	blx	r3
    4874:	2000      	movs	r0, #0
    4876:	bd08      	pop	{r3, pc}
    4878:	20000080 	.word	0x20000080

0000487c <CC_PalPowerSaveModeInit>:
    487c:	b570      	push	{r4, r5, r6, lr}
    487e:	4c09      	ldr	r4, [pc, #36]	; (48a4 <CC_PalPowerSaveModeInit+0x28>)
    4880:	4d09      	ldr	r5, [pc, #36]	; (48a8 <CC_PalPowerSaveModeInit+0x2c>)
    4882:	6920      	ldr	r0, [r4, #16]
    4884:	68ab      	ldr	r3, [r5, #8]
    4886:	4798      	blx	r3
    4888:	b118      	cbz	r0, 4892 <CC_PalPowerSaveModeInit+0x16>
    488a:	4b08      	ldr	r3, [pc, #32]	; (48ac <CC_PalPowerSaveModeInit+0x30>)
    488c:	4808      	ldr	r0, [pc, #32]	; (48b0 <CC_PalPowerSaveModeInit+0x34>)
    488e:	685b      	ldr	r3, [r3, #4]
    4890:	4798      	blx	r3
    4892:	2100      	movs	r1, #0
    4894:	4a07      	ldr	r2, [pc, #28]	; (48b4 <CC_PalPowerSaveModeInit+0x38>)
    4896:	68eb      	ldr	r3, [r5, #12]
    4898:	6011      	str	r1, [r2, #0]
    489a:	6920      	ldr	r0, [r4, #16]
    489c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    48a0:	4718      	bx	r3
    48a2:	bf00      	nop
    48a4:	20000090 	.word	0x20000090
    48a8:	20000080 	.word	0x20000080
    48ac:	20000070 	.word	0x20000070
    48b0:	00006644 	.word	0x00006644
    48b4:	20000864 	.word	0x20000864

000048b8 <CC_PalPowerSaveModeSelect>:
    48b8:	b570      	push	{r4, r5, r6, lr}
    48ba:	4d1a      	ldr	r5, [pc, #104]	; (4924 <CC_PalPowerSaveModeSelect+0x6c>)
    48bc:	4e1a      	ldr	r6, [pc, #104]	; (4928 <CC_PalPowerSaveModeSelect+0x70>)
    48be:	4604      	mov	r4, r0
    48c0:	68b2      	ldr	r2, [r6, #8]
    48c2:	6928      	ldr	r0, [r5, #16]
    48c4:	4790      	blx	r2
    48c6:	b9f0      	cbnz	r0, 4906 <CC_PalPowerSaveModeSelect+0x4e>
    48c8:	b15c      	cbz	r4, 48e2 <CC_PalPowerSaveModeSelect+0x2a>
    48ca:	4c18      	ldr	r4, [pc, #96]	; (492c <CC_PalPowerSaveModeSelect+0x74>)
    48cc:	6823      	ldr	r3, [r4, #0]
    48ce:	b1ab      	cbz	r3, 48fc <CC_PalPowerSaveModeSelect+0x44>
    48d0:	2b01      	cmp	r3, #1
    48d2:	d01a      	beq.n	490a <CC_PalPowerSaveModeSelect+0x52>
    48d4:	3b01      	subs	r3, #1
    48d6:	6023      	str	r3, [r4, #0]
    48d8:	6928      	ldr	r0, [r5, #16]
    48da:	68f3      	ldr	r3, [r6, #12]
    48dc:	4798      	blx	r3
    48de:	2000      	movs	r0, #0
    48e0:	bd70      	pop	{r4, r5, r6, pc}
    48e2:	4c12      	ldr	r4, [pc, #72]	; (492c <CC_PalPowerSaveModeSelect+0x74>)
    48e4:	6821      	ldr	r1, [r4, #0]
    48e6:	b939      	cbnz	r1, 48f8 <CC_PalPowerSaveModeSelect+0x40>
    48e8:	2001      	movs	r0, #1
    48ea:	4b11      	ldr	r3, [pc, #68]	; (4930 <CC_PalPowerSaveModeSelect+0x78>)
    48ec:	4a11      	ldr	r2, [pc, #68]	; (4934 <CC_PalPowerSaveModeSelect+0x7c>)
    48ee:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    48f2:	6813      	ldr	r3, [r2, #0]
    48f4:	2b00      	cmp	r3, #0
    48f6:	d1fc      	bne.n	48f2 <CC_PalPowerSaveModeSelect+0x3a>
    48f8:	3101      	adds	r1, #1
    48fa:	6021      	str	r1, [r4, #0]
    48fc:	68f3      	ldr	r3, [r6, #12]
    48fe:	6928      	ldr	r0, [r5, #16]
    4900:	4798      	blx	r3
    4902:	2000      	movs	r0, #0
    4904:	bd70      	pop	{r4, r5, r6, pc}
    4906:	480c      	ldr	r0, [pc, #48]	; (4938 <CC_PalPowerSaveModeSelect+0x80>)
    4908:	bd70      	pop	{r4, r5, r6, pc}
    490a:	4a0a      	ldr	r2, [pc, #40]	; (4934 <CC_PalPowerSaveModeSelect+0x7c>)
    490c:	6813      	ldr	r3, [r2, #0]
    490e:	2b00      	cmp	r3, #0
    4910:	d1fc      	bne.n	490c <CC_PalPowerSaveModeSelect+0x54>
    4912:	4a07      	ldr	r2, [pc, #28]	; (4930 <CC_PalPowerSaveModeSelect+0x78>)
    4914:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    4918:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    491c:	f000 f820 	bl	4960 <CC_HalMaskInterrupt>
    4920:	6823      	ldr	r3, [r4, #0]
    4922:	e7d7      	b.n	48d4 <CC_PalPowerSaveModeSelect+0x1c>
    4924:	20000090 	.word	0x20000090
    4928:	20000080 	.word	0x20000080
    492c:	20000864 	.word	0x20000864
    4930:	50840000 	.word	0x50840000
    4934:	50841910 	.word	0x50841910
    4938:	ffff8fe9 	.word	0xffff8fe9

0000493c <CC_HalInit>:
    493c:	2000      	movs	r0, #0
    493e:	4770      	bx	lr

00004940 <CC_HalTerminate>:
    4940:	2000      	movs	r0, #0
    4942:	4770      	bx	lr

00004944 <CC_HalClearInterruptBit>:
    4944:	0543      	lsls	r3, r0, #21
    4946:	d503      	bpl.n	4950 <CC_HalClearInterruptBit+0xc>
    4948:	f04f 32ff 	mov.w	r2, #4294967295
    494c:	4b02      	ldr	r3, [pc, #8]	; (4958 <CC_HalClearInterruptBit+0x14>)
    494e:	601a      	str	r2, [r3, #0]
    4950:	4b02      	ldr	r3, [pc, #8]	; (495c <CC_HalClearInterruptBit+0x18>)
    4952:	6018      	str	r0, [r3, #0]
    4954:	4770      	bx	lr
    4956:	bf00      	nop
    4958:	50841108 	.word	0x50841108
    495c:	50841a08 	.word	0x50841a08

00004960 <CC_HalMaskInterrupt>:
    4960:	4b01      	ldr	r3, [pc, #4]	; (4968 <CC_HalMaskInterrupt+0x8>)
    4962:	6018      	str	r0, [r3, #0]
    4964:	4770      	bx	lr
    4966:	bf00      	nop
    4968:	50841a04 	.word	0x50841a04

0000496c <CC_HalWaitInterruptRND>:
    496c:	b108      	cbz	r0, 4972 <CC_HalWaitInterruptRND+0x6>
    496e:	f000 b803 	b.w	4978 <CC_PalWaitInterruptRND>
    4972:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    4976:	4770      	bx	lr

00004978 <CC_PalWaitInterruptRND>:
    4978:	4602      	mov	r2, r0
    497a:	4807      	ldr	r0, [pc, #28]	; (4998 <CC_PalWaitInterruptRND+0x20>)
    497c:	6803      	ldr	r3, [r0, #0]
    497e:	4213      	tst	r3, r2
    4980:	d0fc      	beq.n	497c <CC_PalWaitInterruptRND+0x4>
    4982:	b121      	cbz	r1, 498e <CC_PalWaitInterruptRND+0x16>
    4984:	4b05      	ldr	r3, [pc, #20]	; (499c <CC_PalWaitInterruptRND+0x24>)
    4986:	4806      	ldr	r0, [pc, #24]	; (49a0 <CC_PalWaitInterruptRND+0x28>)
    4988:	681b      	ldr	r3, [r3, #0]
    498a:	600b      	str	r3, [r1, #0]
    498c:	6003      	str	r3, [r0, #0]
    498e:	4b05      	ldr	r3, [pc, #20]	; (49a4 <CC_PalWaitInterruptRND+0x2c>)
    4990:	2000      	movs	r0, #0
    4992:	601a      	str	r2, [r3, #0]
    4994:	4770      	bx	lr
    4996:	bf00      	nop
    4998:	50841a00 	.word	0x50841a00
    499c:	50841104 	.word	0x50841104
    49a0:	50841108 	.word	0x50841108
    49a4:	50841a08 	.word	0x50841a08

000049a8 <mbedtls_platform_setup>:
    49a8:	f000 b89e 	b.w	4ae8 <nrf_cc3xx_platform_init>

000049ac <mbedtls_platform_zeroize>:
    49ac:	b138      	cbz	r0, 49be <mbedtls_platform_zeroize+0x12>
    49ae:	b131      	cbz	r1, 49be <mbedtls_platform_zeroize+0x12>
    49b0:	2200      	movs	r2, #0
    49b2:	4401      	add	r1, r0
    49b4:	4603      	mov	r3, r0
    49b6:	3001      	adds	r0, #1
    49b8:	4281      	cmp	r1, r0
    49ba:	701a      	strb	r2, [r3, #0]
    49bc:	d1fa      	bne.n	49b4 <mbedtls_platform_zeroize+0x8>
    49be:	4770      	bx	lr

000049c0 <mbedtls_hardware_poll>:
    49c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49c4:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
    49c8:	460e      	mov	r6, r1
    49ca:	9205      	str	r2, [sp, #20]
    49cc:	2100      	movs	r1, #0
    49ce:	4614      	mov	r4, r2
    49d0:	a812      	add	r0, sp, #72	; 0x48
    49d2:	f44f 7208 	mov.w	r2, #544	; 0x220
    49d6:	461d      	mov	r5, r3
    49d8:	f001 fa17 	bl	5e0a <memset>
    49dc:	2100      	movs	r1, #0
    49de:	2228      	movs	r2, #40	; 0x28
    49e0:	a808      	add	r0, sp, #32
    49e2:	9106      	str	r1, [sp, #24]
    49e4:	f001 fa11 	bl	5e0a <memset>
    49e8:	2e00      	cmp	r6, #0
    49ea:	d03c      	beq.n	4a66 <mbedtls_hardware_poll+0xa6>
    49ec:	2d00      	cmp	r5, #0
    49ee:	d03a      	beq.n	4a66 <mbedtls_hardware_poll+0xa6>
    49f0:	2c00      	cmp	r4, #0
    49f2:	d038      	beq.n	4a66 <mbedtls_hardware_poll+0xa6>
    49f4:	2104      	movs	r1, #4
    49f6:	a806      	add	r0, sp, #24
    49f8:	f7ff feca 	bl	4790 <CC_PalMemSetZeroPlat>
    49fc:	a808      	add	r0, sp, #32
    49fe:	2128      	movs	r1, #40	; 0x28
    4a00:	f7ff fec6 	bl	4790 <CC_PalMemSetZeroPlat>
    4a04:	a808      	add	r0, sp, #32
    4a06:	f000 f831 	bl	4a6c <RNG_PLAT_SetUserRngParameters>
    4a0a:	b178      	cbz	r0, 4a2c <mbedtls_hardware_poll+0x6c>
    4a0c:	f04f 37ff 	mov.w	r7, #4294967295
    4a10:	f44f 7108 	mov.w	r1, #544	; 0x220
    4a14:	a812      	add	r0, sp, #72	; 0x48
    4a16:	f7ff ffc9 	bl	49ac <mbedtls_platform_zeroize>
    4a1a:	2104      	movs	r1, #4
    4a1c:	a806      	add	r0, sp, #24
    4a1e:	f7ff ffc5 	bl	49ac <mbedtls_platform_zeroize>
    4a22:	4638      	mov	r0, r7
    4a24:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
    4a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a2c:	ab12      	add	r3, sp, #72	; 0x48
    4a2e:	f10d 081c 	add.w	r8, sp, #28
    4a32:	4602      	mov	r2, r0
    4a34:	e9cd 5301 	strd	r5, r3, [sp, #4]
    4a38:	9003      	str	r0, [sp, #12]
    4a3a:	ab05      	add	r3, sp, #20
    4a3c:	a908      	add	r1, sp, #32
    4a3e:	f8cd 8000 	str.w	r8, [sp]
    4a42:	a806      	add	r0, sp, #24
    4a44:	f000 fd2a 	bl	549c <LLF_RND_GetTrngSource>
    4a48:	2800      	cmp	r0, #0
    4a4a:	d1df      	bne.n	4a0c <mbedtls_hardware_poll+0x4c>
    4a4c:	682b      	ldr	r3, [r5, #0]
    4a4e:	42a3      	cmp	r3, r4
    4a50:	d3dc      	bcc.n	4a0c <mbedtls_hardware_poll+0x4c>
    4a52:	f8d8 1000 	ldr.w	r1, [r8]
    4a56:	4607      	mov	r7, r0
    4a58:	4622      	mov	r2, r4
    4a5a:	4630      	mov	r0, r6
    4a5c:	3108      	adds	r1, #8
    4a5e:	f7ff fe95 	bl	478c <CC_PalMemCopyPlat>
    4a62:	602c      	str	r4, [r5, #0]
    4a64:	e7d4      	b.n	4a10 <mbedtls_hardware_poll+0x50>
    4a66:	f04f 37ff 	mov.w	r7, #4294967295
    4a6a:	e7da      	b.n	4a22 <mbedtls_hardware_poll+0x62>

00004a6c <RNG_PLAT_SetUserRngParameters>:
    4a6c:	231c      	movs	r3, #28
    4a6e:	b530      	push	{r4, r5, lr}
    4a70:	b083      	sub	sp, #12
    4a72:	a901      	add	r1, sp, #4
    4a74:	4604      	mov	r4, r0
    4a76:	9301      	str	r3, [sp, #4]
    4a78:	f000 f9e4 	bl	4e44 <CC_PalTrngParamGet>
    4a7c:	4605      	mov	r5, r0
    4a7e:	b938      	cbnz	r0, 4a90 <RNG_PLAT_SetUserRngParameters+0x24>
    4a80:	9b01      	ldr	r3, [sp, #4]
    4a82:	2b1c      	cmp	r3, #28
    4a84:	d007      	beq.n	4a96 <RNG_PLAT_SetUserRngParameters+0x2a>
    4a86:	4d16      	ldr	r5, [pc, #88]	; (4ae0 <RNG_PLAT_SetUserRngParameters+0x74>)
    4a88:	4620      	mov	r0, r4
    4a8a:	211c      	movs	r1, #28
    4a8c:	f7ff fe80 	bl	4790 <CC_PalMemSetZeroPlat>
    4a90:	4628      	mov	r0, r5
    4a92:	b003      	add	sp, #12
    4a94:	bd30      	pop	{r4, r5, pc}
    4a96:	2101      	movs	r1, #1
    4a98:	e9d4 3200 	ldrd	r3, r2, [r4]
    4a9c:	3b00      	subs	r3, #0
    4a9e:	bf18      	it	ne
    4aa0:	2301      	movne	r3, #1
    4aa2:	61e1      	str	r1, [r4, #28]
    4aa4:	b10a      	cbz	r2, 4aaa <RNG_PLAT_SetUserRngParameters+0x3e>
    4aa6:	f043 0302 	orr.w	r3, r3, #2
    4aaa:	68a2      	ldr	r2, [r4, #8]
    4aac:	b932      	cbnz	r2, 4abc <RNG_PLAT_SetUserRngParameters+0x50>
    4aae:	68e2      	ldr	r2, [r4, #12]
    4ab0:	b942      	cbnz	r2, 4ac4 <RNG_PLAT_SetUserRngParameters+0x58>
    4ab2:	e9c4 3208 	strd	r3, r2, [r4, #32]
    4ab6:	b98b      	cbnz	r3, 4adc <RNG_PLAT_SetUserRngParameters+0x70>
    4ab8:	4d0a      	ldr	r5, [pc, #40]	; (4ae4 <RNG_PLAT_SetUserRngParameters+0x78>)
    4aba:	e7e5      	b.n	4a88 <RNG_PLAT_SetUserRngParameters+0x1c>
    4abc:	68e2      	ldr	r2, [r4, #12]
    4abe:	f043 0304 	orr.w	r3, r3, #4
    4ac2:	b13a      	cbz	r2, 4ad4 <RNG_PLAT_SetUserRngParameters+0x68>
    4ac4:	2200      	movs	r2, #0
    4ac6:	4628      	mov	r0, r5
    4ac8:	f043 0308 	orr.w	r3, r3, #8
    4acc:	e9c4 3208 	strd	r3, r2, [r4, #32]
    4ad0:	b003      	add	sp, #12
    4ad2:	bd30      	pop	{r4, r5, pc}
    4ad4:	4615      	mov	r5, r2
    4ad6:	e9c4 3208 	strd	r3, r2, [r4, #32]
    4ada:	e7d9      	b.n	4a90 <RNG_PLAT_SetUserRngParameters+0x24>
    4adc:	4615      	mov	r5, r2
    4ade:	e7d7      	b.n	4a90 <RNG_PLAT_SetUserRngParameters+0x24>
    4ae0:	00f00c37 	.word	0x00f00c37
    4ae4:	00f00c0e 	.word	0x00f00c0e

00004ae8 <nrf_cc3xx_platform_init>:
    4ae8:	b510      	push	{r4, lr}
    4aea:	4c0c      	ldr	r4, [pc, #48]	; (4b1c <nrf_cc3xx_platform_init+0x34>)
    4aec:	6823      	ldr	r3, [r4, #0]
    4aee:	b113      	cbz	r3, 4af6 <nrf_cc3xx_platform_init+0xe>
    4af0:	4b0b      	ldr	r3, [pc, #44]	; (4b20 <nrf_cc3xx_platform_init+0x38>)
    4af2:	681b      	ldr	r3, [r3, #0]
    4af4:	b92b      	cbnz	r3, 4b02 <nrf_cc3xx_platform_init+0x1a>
    4af6:	f000 f965 	bl	4dc4 <CC_LibInit>
    4afa:	b930      	cbnz	r0, 4b0a <nrf_cc3xx_platform_init+0x22>
    4afc:	2201      	movs	r2, #1
    4afe:	4b08      	ldr	r3, [pc, #32]	; (4b20 <nrf_cc3xx_platform_init+0x38>)
    4b00:	601a      	str	r2, [r3, #0]
    4b02:	2301      	movs	r3, #1
    4b04:	2000      	movs	r0, #0
    4b06:	6023      	str	r3, [r4, #0]
    4b08:	bd10      	pop	{r4, pc}
    4b0a:	3801      	subs	r0, #1
    4b0c:	2806      	cmp	r0, #6
    4b0e:	d901      	bls.n	4b14 <nrf_cc3xx_platform_init+0x2c>
    4b10:	4804      	ldr	r0, [pc, #16]	; (4b24 <nrf_cc3xx_platform_init+0x3c>)
    4b12:	bd10      	pop	{r4, pc}
    4b14:	4b04      	ldr	r3, [pc, #16]	; (4b28 <nrf_cc3xx_platform_init+0x40>)
    4b16:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4b1a:	bd10      	pop	{r4, pc}
    4b1c:	20000868 	.word	0x20000868
    4b20:	2000086c 	.word	0x2000086c
    4b24:	ffff8ffe 	.word	0xffff8ffe
    4b28:	00006664 	.word	0x00006664

00004b2c <nrf_cc3xx_platform_init_no_rng>:
    4b2c:	b510      	push	{r4, lr}
    4b2e:	4c0a      	ldr	r4, [pc, #40]	; (4b58 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    4b30:	6823      	ldr	r3, [r4, #0]
    4b32:	b11b      	cbz	r3, 4b3c <nrf_cc3xx_platform_init_no_rng+0x10>
    4b34:	2301      	movs	r3, #1
    4b36:	2000      	movs	r0, #0
    4b38:	6023      	str	r3, [r4, #0]
    4b3a:	bd10      	pop	{r4, pc}
    4b3c:	f000 f8ae 	bl	4c9c <CC_LibInitNoRng>
    4b40:	2800      	cmp	r0, #0
    4b42:	d0f7      	beq.n	4b34 <nrf_cc3xx_platform_init_no_rng+0x8>
    4b44:	3801      	subs	r0, #1
    4b46:	2806      	cmp	r0, #6
    4b48:	d803      	bhi.n	4b52 <nrf_cc3xx_platform_init_no_rng+0x26>
    4b4a:	4b04      	ldr	r3, [pc, #16]	; (4b5c <nrf_cc3xx_platform_init_no_rng+0x30>)
    4b4c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4b50:	bd10      	pop	{r4, pc}
    4b52:	4803      	ldr	r0, [pc, #12]	; (4b60 <nrf_cc3xx_platform_init_no_rng+0x34>)
    4b54:	bd10      	pop	{r4, pc}
    4b56:	bf00      	nop
    4b58:	20000868 	.word	0x20000868
    4b5c:	00006664 	.word	0x00006664
    4b60:	ffff8ffe 	.word	0xffff8ffe

00004b64 <nrf_cc3xx_platform_abort>:
    4b64:	f3bf 8f4f 	dsb	sy
    4b68:	4905      	ldr	r1, [pc, #20]	; (4b80 <nrf_cc3xx_platform_abort+0x1c>)
    4b6a:	4b06      	ldr	r3, [pc, #24]	; (4b84 <nrf_cc3xx_platform_abort+0x20>)
    4b6c:	68ca      	ldr	r2, [r1, #12]
    4b6e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4b72:	4313      	orrs	r3, r2
    4b74:	60cb      	str	r3, [r1, #12]
    4b76:	f3bf 8f4f 	dsb	sy
    4b7a:	bf00      	nop
    4b7c:	e7fd      	b.n	4b7a <nrf_cc3xx_platform_abort+0x16>
    4b7e:	bf00      	nop
    4b80:	e000ed00 	.word	0xe000ed00
    4b84:	05fa0004 	.word	0x05fa0004

00004b88 <CC_PalAbort>:
    4b88:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    4b8c:	2100      	movs	r1, #0
    4b8e:	b430      	push	{r4, r5}
    4b90:	4a06      	ldr	r2, [pc, #24]	; (4bac <CC_PalAbort+0x24>)
    4b92:	4d07      	ldr	r5, [pc, #28]	; (4bb0 <CC_PalAbort+0x28>)
    4b94:	4c07      	ldr	r4, [pc, #28]	; (4bb4 <CC_PalAbort+0x2c>)
    4b96:	602b      	str	r3, [r5, #0]
    4b98:	6013      	str	r3, [r2, #0]
    4b9a:	6023      	str	r3, [r4, #0]
    4b9c:	4a06      	ldr	r2, [pc, #24]	; (4bb8 <CC_PalAbort+0x30>)
    4b9e:	4c07      	ldr	r4, [pc, #28]	; (4bbc <CC_PalAbort+0x34>)
    4ba0:	60eb      	str	r3, [r5, #12]
    4ba2:	6863      	ldr	r3, [r4, #4]
    4ba4:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    4ba8:	bc30      	pop	{r4, r5}
    4baa:	4718      	bx	r3
    4bac:	50841404 	.word	0x50841404
    4bb0:	50841400 	.word	0x50841400
    4bb4:	50841408 	.word	0x50841408
    4bb8:	50840000 	.word	0x50840000
    4bbc:	20000070 	.word	0x20000070

00004bc0 <nrf_cc3xx_platform_set_abort>:
    4bc0:	4b02      	ldr	r3, [pc, #8]	; (4bcc <nrf_cc3xx_platform_set_abort+0xc>)
    4bc2:	e9d0 1200 	ldrd	r1, r2, [r0]
    4bc6:	e9c3 1200 	strd	r1, r2, [r3]
    4bca:	4770      	bx	lr
    4bcc:	20000070 	.word	0x20000070

00004bd0 <mutex_unlock>:
    4bd0:	b148      	cbz	r0, 4be6 <mutex_unlock+0x16>
    4bd2:	6843      	ldr	r3, [r0, #4]
    4bd4:	b12b      	cbz	r3, 4be2 <mutex_unlock+0x12>
    4bd6:	f3bf 8f5f 	dmb	sy
    4bda:	2300      	movs	r3, #0
    4bdc:	6003      	str	r3, [r0, #0]
    4bde:	4618      	mov	r0, r3
    4be0:	4770      	bx	lr
    4be2:	4802      	ldr	r0, [pc, #8]	; (4bec <mutex_unlock+0x1c>)
    4be4:	4770      	bx	lr
    4be6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4bea:	4770      	bx	lr
    4bec:	ffff8fea 	.word	0xffff8fea

00004bf0 <mutex_free>:
    4bf0:	b510      	push	{r4, lr}
    4bf2:	4604      	mov	r4, r0
    4bf4:	b128      	cbz	r0, 4c02 <mutex_free+0x12>
    4bf6:	6863      	ldr	r3, [r4, #4]
    4bf8:	b113      	cbz	r3, 4c00 <mutex_free+0x10>
    4bfa:	2300      	movs	r3, #0
    4bfc:	6023      	str	r3, [r4, #0]
    4bfe:	6063      	str	r3, [r4, #4]
    4c00:	bd10      	pop	{r4, pc}
    4c02:	4b02      	ldr	r3, [pc, #8]	; (4c0c <mutex_free+0x1c>)
    4c04:	4802      	ldr	r0, [pc, #8]	; (4c10 <mutex_free+0x20>)
    4c06:	685b      	ldr	r3, [r3, #4]
    4c08:	4798      	blx	r3
    4c0a:	e7f4      	b.n	4bf6 <mutex_free+0x6>
    4c0c:	20000070 	.word	0x20000070
    4c10:	00006680 	.word	0x00006680

00004c14 <mutex_init>:
    4c14:	b510      	push	{r4, lr}
    4c16:	4604      	mov	r4, r0
    4c18:	b130      	cbz	r0, 4c28 <mutex_init+0x14>
    4c1a:	2200      	movs	r2, #0
    4c1c:	6863      	ldr	r3, [r4, #4]
    4c1e:	6022      	str	r2, [r4, #0]
    4c20:	f043 0301 	orr.w	r3, r3, #1
    4c24:	6063      	str	r3, [r4, #4]
    4c26:	bd10      	pop	{r4, pc}
    4c28:	4801      	ldr	r0, [pc, #4]	; (4c30 <mutex_init+0x1c>)
    4c2a:	f7ff ffad 	bl	4b88 <CC_PalAbort>
    4c2e:	e7f4      	b.n	4c1a <mutex_init+0x6>
    4c30:	000066a8 	.word	0x000066a8

00004c34 <mutex_lock>:
    4c34:	b180      	cbz	r0, 4c58 <mutex_lock+0x24>
    4c36:	6843      	ldr	r3, [r0, #4]
    4c38:	b163      	cbz	r3, 4c54 <mutex_lock+0x20>
    4c3a:	2201      	movs	r2, #1
    4c3c:	e8d0 3fef 	ldaex	r3, [r0]
    4c40:	e8c0 2fe1 	stlex	r1, r2, [r0]
    4c44:	2900      	cmp	r1, #0
    4c46:	d1f9      	bne.n	4c3c <mutex_lock+0x8>
    4c48:	2b01      	cmp	r3, #1
    4c4a:	d0f7      	beq.n	4c3c <mutex_lock+0x8>
    4c4c:	f3bf 8f5f 	dmb	sy
    4c50:	2000      	movs	r0, #0
    4c52:	4770      	bx	lr
    4c54:	4802      	ldr	r0, [pc, #8]	; (4c60 <mutex_lock+0x2c>)
    4c56:	4770      	bx	lr
    4c58:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4c5c:	4770      	bx	lr
    4c5e:	bf00      	nop
    4c60:	ffff8fea 	.word	0xffff8fea

00004c64 <nrf_cc3xx_platform_set_mutexes>:
    4c64:	b470      	push	{r4, r5, r6}
    4c66:	4b0b      	ldr	r3, [pc, #44]	; (4c94 <nrf_cc3xx_platform_set_mutexes+0x30>)
    4c68:	6806      	ldr	r6, [r0, #0]
    4c6a:	68c2      	ldr	r2, [r0, #12]
    4c6c:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    4c70:	e9c3 4202 	strd	r4, r2, [r3, #8]
    4c74:	e9c3 6500 	strd	r6, r5, [r3]
    4c78:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    4c7c:	680e      	ldr	r6, [r1, #0]
    4c7e:	4b06      	ldr	r3, [pc, #24]	; (4c98 <nrf_cc3xx_platform_set_mutexes+0x34>)
    4c80:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    4c84:	e9c3 6500 	strd	r6, r5, [r3]
    4c88:	e9c3 4002 	strd	r4, r0, [r3, #8]
    4c8c:	611a      	str	r2, [r3, #16]
    4c8e:	bc70      	pop	{r4, r5, r6}
    4c90:	4770      	bx	lr
    4c92:	bf00      	nop
    4c94:	20000080 	.word	0x20000080
    4c98:	20000090 	.word	0x20000090

00004c9c <CC_LibInitNoRng>:
    4c9c:	b510      	push	{r4, lr}
    4c9e:	f7ff fe4d 	bl	493c <CC_HalInit>
    4ca2:	b120      	cbz	r0, 4cae <CC_LibInitNoRng+0x12>
    4ca4:	2403      	movs	r4, #3
    4ca6:	f7ff fda5 	bl	47f4 <CC_PalTerminate>
    4caa:	4620      	mov	r0, r4
    4cac:	bd10      	pop	{r4, pc}
    4cae:	f7ff fd73 	bl	4798 <CC_PalInit>
    4cb2:	b990      	cbnz	r0, 4cda <CC_LibInitNoRng+0x3e>
    4cb4:	f7ff fe00 	bl	48b8 <CC_PalPowerSaveModeSelect>
    4cb8:	b990      	cbnz	r0, 4ce0 <CC_LibInitNoRng+0x44>
    4cba:	4b0f      	ldr	r3, [pc, #60]	; (4cf8 <CC_LibInitNoRng+0x5c>)
    4cbc:	681b      	ldr	r3, [r3, #0]
    4cbe:	0e1b      	lsrs	r3, r3, #24
    4cc0:	2bf0      	cmp	r3, #240	; 0xf0
    4cc2:	d108      	bne.n	4cd6 <CC_LibInitNoRng+0x3a>
    4cc4:	4a0d      	ldr	r2, [pc, #52]	; (4cfc <CC_LibInitNoRng+0x60>)
    4cc6:	4b0e      	ldr	r3, [pc, #56]	; (4d00 <CC_LibInitNoRng+0x64>)
    4cc8:	6812      	ldr	r2, [r2, #0]
    4cca:	429a      	cmp	r2, r3
    4ccc:	d00a      	beq.n	4ce4 <CC_LibInitNoRng+0x48>
    4cce:	2407      	movs	r4, #7
    4cd0:	f7ff fe36 	bl	4940 <CC_HalTerminate>
    4cd4:	e7e7      	b.n	4ca6 <CC_LibInitNoRng+0xa>
    4cd6:	2406      	movs	r4, #6
    4cd8:	e7fa      	b.n	4cd0 <CC_LibInitNoRng+0x34>
    4cda:	2404      	movs	r4, #4
    4cdc:	4620      	mov	r0, r4
    4cde:	bd10      	pop	{r4, pc}
    4ce0:	2400      	movs	r4, #0
    4ce2:	e7f5      	b.n	4cd0 <CC_LibInitNoRng+0x34>
    4ce4:	2001      	movs	r0, #1
    4ce6:	f7ff fde7 	bl	48b8 <CC_PalPowerSaveModeSelect>
    4cea:	4604      	mov	r4, r0
    4cec:	2800      	cmp	r0, #0
    4cee:	d1f7      	bne.n	4ce0 <CC_LibInitNoRng+0x44>
    4cf0:	4b04      	ldr	r3, [pc, #16]	; (4d04 <CC_LibInitNoRng+0x68>)
    4cf2:	6018      	str	r0, [r3, #0]
    4cf4:	e7d9      	b.n	4caa <CC_LibInitNoRng+0xe>
    4cf6:	bf00      	nop
    4cf8:	50841928 	.word	0x50841928
    4cfc:	50841a24 	.word	0x50841a24
    4d00:	20e00000 	.word	0x20e00000
    4d04:	50841a0c 	.word	0x50841a0c

00004d08 <CC_LibInitRngModule>:
    4d08:	b530      	push	{r4, r5, lr}
    4d0a:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
    4d0e:	f44f 7208 	mov.w	r2, #544	; 0x220
    4d12:	2100      	movs	r1, #0
    4d14:	a80c      	add	r0, sp, #48	; 0x30
    4d16:	f001 f878 	bl	5e0a <memset>
    4d1a:	2100      	movs	r1, #0
    4d1c:	2228      	movs	r2, #40	; 0x28
    4d1e:	a802      	add	r0, sp, #8
    4d20:	9101      	str	r1, [sp, #4]
    4d22:	f001 f872 	bl	5e0a <memset>
    4d26:	a802      	add	r0, sp, #8
    4d28:	f7ff fea0 	bl	4a6c <RNG_PLAT_SetUserRngParameters>
    4d2c:	b120      	cbz	r0, 4d38 <CC_LibInitRngModule+0x30>
    4d2e:	2405      	movs	r4, #5
    4d30:	4620      	mov	r0, r4
    4d32:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    4d36:	bd30      	pop	{r4, r5, pc}
    4d38:	4d1d      	ldr	r5, [pc, #116]	; (4db0 <CC_LibInitRngModule+0xa8>)
    4d3a:	f04f 31ff 	mov.w	r1, #4294967295
    4d3e:	6828      	ldr	r0, [r5, #0]
    4d40:	f7ff fd8a 	bl	4858 <CC_PalMutexLock>
    4d44:	4604      	mov	r4, r0
    4d46:	b9e8      	cbnz	r0, 4d84 <CC_LibInitRngModule+0x7c>
    4d48:	2000      	movs	r0, #0
    4d4a:	f7ff fdb5 	bl	48b8 <CC_PalPowerSaveModeSelect>
    4d4e:	bb58      	cbnz	r0, 4da8 <CC_LibInitRngModule+0xa0>
    4d50:	aa0c      	add	r2, sp, #48	; 0x30
    4d52:	a902      	add	r1, sp, #8
    4d54:	a801      	add	r0, sp, #4
    4d56:	f000 fbed 	bl	5534 <LLF_RND_RunTrngStartupTest>
    4d5a:	4604      	mov	r4, r0
    4d5c:	2001      	movs	r0, #1
    4d5e:	f7ff fdab 	bl	48b8 <CC_PalPowerSaveModeSelect>
    4d62:	b9e8      	cbnz	r0, 4da0 <CC_LibInitRngModule+0x98>
    4d64:	6828      	ldr	r0, [r5, #0]
    4d66:	f7ff fd7f 	bl	4868 <CC_PalMutexUnlock>
    4d6a:	b928      	cbnz	r0, 4d78 <CC_LibInitRngModule+0x70>
    4d6c:	2c00      	cmp	r4, #0
    4d6e:	d1de      	bne.n	4d2e <CC_LibInitRngModule+0x26>
    4d70:	4620      	mov	r0, r4
    4d72:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    4d76:	bd30      	pop	{r4, r5, pc}
    4d78:	480e      	ldr	r0, [pc, #56]	; (4db4 <CC_LibInitRngModule+0xac>)
    4d7a:	f7ff ff05 	bl	4b88 <CC_PalAbort>
    4d7e:	2c00      	cmp	r4, #0
    4d80:	d0f6      	beq.n	4d70 <CC_LibInitRngModule+0x68>
    4d82:	e7d4      	b.n	4d2e <CC_LibInitRngModule+0x26>
    4d84:	480c      	ldr	r0, [pc, #48]	; (4db8 <CC_LibInitRngModule+0xb0>)
    4d86:	f7ff feff 	bl	4b88 <CC_PalAbort>
    4d8a:	2c01      	cmp	r4, #1
    4d8c:	d1dc      	bne.n	4d48 <CC_LibInitRngModule+0x40>
    4d8e:	6828      	ldr	r0, [r5, #0]
    4d90:	f7ff fd6a 	bl	4868 <CC_PalMutexUnlock>
    4d94:	2800      	cmp	r0, #0
    4d96:	d0ca      	beq.n	4d2e <CC_LibInitRngModule+0x26>
    4d98:	4806      	ldr	r0, [pc, #24]	; (4db4 <CC_LibInitRngModule+0xac>)
    4d9a:	f7ff fef5 	bl	4b88 <CC_PalAbort>
    4d9e:	e7c6      	b.n	4d2e <CC_LibInitRngModule+0x26>
    4da0:	4806      	ldr	r0, [pc, #24]	; (4dbc <CC_LibInitRngModule+0xb4>)
    4da2:	f7ff fef1 	bl	4b88 <CC_PalAbort>
    4da6:	e7dd      	b.n	4d64 <CC_LibInitRngModule+0x5c>
    4da8:	4805      	ldr	r0, [pc, #20]	; (4dc0 <CC_LibInitRngModule+0xb8>)
    4daa:	f7ff feed 	bl	4b88 <CC_PalAbort>
    4dae:	e7cf      	b.n	4d50 <CC_LibInitRngModule+0x48>
    4db0:	2000006c 	.word	0x2000006c
    4db4:	000066e4 	.word	0x000066e4
    4db8:	000066cc 	.word	0x000066cc
    4dbc:	0000671c 	.word	0x0000671c
    4dc0:	000066fc 	.word	0x000066fc

00004dc4 <CC_LibInit>:
    4dc4:	b508      	push	{r3, lr}
    4dc6:	f7ff fdb9 	bl	493c <CC_HalInit>
    4dca:	b118      	cbz	r0, 4dd4 <CC_LibInit+0x10>
    4dcc:	f7ff fd12 	bl	47f4 <CC_PalTerminate>
    4dd0:	2003      	movs	r0, #3
    4dd2:	bd08      	pop	{r3, pc}
    4dd4:	f7ff fce0 	bl	4798 <CC_PalInit>
    4dd8:	b9c0      	cbnz	r0, 4e0c <CC_LibInit+0x48>
    4dda:	f7ff fd6d 	bl	48b8 <CC_PalPowerSaveModeSelect>
    4dde:	b9b8      	cbnz	r0, 4e10 <CC_LibInit+0x4c>
    4de0:	4b14      	ldr	r3, [pc, #80]	; (4e34 <CC_LibInit+0x70>)
    4de2:	681b      	ldr	r3, [r3, #0]
    4de4:	0e1b      	lsrs	r3, r3, #24
    4de6:	2bf0      	cmp	r3, #240	; 0xf0
    4de8:	d10a      	bne.n	4e00 <CC_LibInit+0x3c>
    4dea:	4a13      	ldr	r2, [pc, #76]	; (4e38 <CC_LibInit+0x74>)
    4dec:	4b13      	ldr	r3, [pc, #76]	; (4e3c <CC_LibInit+0x78>)
    4dee:	6812      	ldr	r2, [r2, #0]
    4df0:	429a      	cmp	r2, r3
    4df2:	d017      	beq.n	4e24 <CC_LibInit+0x60>
    4df4:	f7ff fda4 	bl	4940 <CC_HalTerminate>
    4df8:	f7ff fcfc 	bl	47f4 <CC_PalTerminate>
    4dfc:	2007      	movs	r0, #7
    4dfe:	bd08      	pop	{r3, pc}
    4e00:	f7ff fd9e 	bl	4940 <CC_HalTerminate>
    4e04:	f7ff fcf6 	bl	47f4 <CC_PalTerminate>
    4e08:	2006      	movs	r0, #6
    4e0a:	bd08      	pop	{r3, pc}
    4e0c:	2004      	movs	r0, #4
    4e0e:	bd08      	pop	{r3, pc}
    4e10:	f7ff fd96 	bl	4940 <CC_HalTerminate>
    4e14:	f7ff fcee 	bl	47f4 <CC_PalTerminate>
    4e18:	f7ff ff76 	bl	4d08 <CC_LibInitRngModule>
    4e1c:	2800      	cmp	r0, #0
    4e1e:	bf18      	it	ne
    4e20:	2005      	movne	r0, #5
    4e22:	bd08      	pop	{r3, pc}
    4e24:	2001      	movs	r0, #1
    4e26:	f7ff fd47 	bl	48b8 <CC_PalPowerSaveModeSelect>
    4e2a:	2800      	cmp	r0, #0
    4e2c:	d1f0      	bne.n	4e10 <CC_LibInit+0x4c>
    4e2e:	4b04      	ldr	r3, [pc, #16]	; (4e40 <CC_LibInit+0x7c>)
    4e30:	6018      	str	r0, [r3, #0]
    4e32:	e7f1      	b.n	4e18 <CC_LibInit+0x54>
    4e34:	50841928 	.word	0x50841928
    4e38:	50841a24 	.word	0x50841a24
    4e3c:	20e00000 	.word	0x20e00000
    4e40:	50841a0c 	.word	0x50841a0c

00004e44 <CC_PalTrngParamGet>:
    4e44:	2800      	cmp	r0, #0
    4e46:	d066      	beq.n	4f16 <CC_PalTrngParamGet+0xd2>
    4e48:	2900      	cmp	r1, #0
    4e4a:	d064      	beq.n	4f16 <CC_PalTrngParamGet+0xd2>
    4e4c:	680b      	ldr	r3, [r1, #0]
    4e4e:	2b1c      	cmp	r3, #28
    4e50:	d161      	bne.n	4f16 <CC_PalTrngParamGet+0xd2>
    4e52:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4e56:	4a3b      	ldr	r2, [pc, #236]	; (4f44 <CC_PalTrngParamGet+0x100>)
    4e58:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
    4e5c:	4291      	cmp	r1, r2
    4e5e:	d05c      	beq.n	4f1a <CC_PalTrngParamGet+0xd6>
    4e60:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    4e64:	3201      	adds	r2, #1
    4e66:	d058      	beq.n	4f1a <CC_PalTrngParamGet+0xd6>
    4e68:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    4e6c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4e70:	6002      	str	r2, [r0, #0]
    4e72:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
    4e76:	4a34      	ldr	r2, [pc, #208]	; (4f48 <CC_PalTrngParamGet+0x104>)
    4e78:	4291      	cmp	r1, r2
    4e7a:	d060      	beq.n	4f3e <CC_PalTrngParamGet+0xfa>
    4e7c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    4e80:	3201      	adds	r2, #1
    4e82:	d05c      	beq.n	4f3e <CC_PalTrngParamGet+0xfa>
    4e84:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    4e88:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4e8c:	6042      	str	r2, [r0, #4]
    4e8e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    4e92:	f512 7f94 	cmn.w	r2, #296	; 0x128
    4e96:	d04f      	beq.n	4f38 <CC_PalTrngParamGet+0xf4>
    4e98:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    4e9c:	3201      	adds	r2, #1
    4e9e:	d04b      	beq.n	4f38 <CC_PalTrngParamGet+0xf4>
    4ea0:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    4ea4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4ea8:	6082      	str	r2, [r0, #8]
    4eaa:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
    4eae:	4a27      	ldr	r2, [pc, #156]	; (4f4c <CC_PalTrngParamGet+0x108>)
    4eb0:	4291      	cmp	r1, r2
    4eb2:	d03e      	beq.n	4f32 <CC_PalTrngParamGet+0xee>
    4eb4:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    4eb8:	3201      	adds	r2, #1
    4eba:	d03a      	beq.n	4f32 <CC_PalTrngParamGet+0xee>
    4ebc:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    4ec0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4ec4:	60c2      	str	r2, [r0, #12]
    4ec6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    4eca:	3270      	adds	r2, #112	; 0x70
    4ecc:	d02f      	beq.n	4f2e <CC_PalTrngParamGet+0xea>
    4ece:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    4ed2:	3201      	adds	r2, #1
    4ed4:	d02b      	beq.n	4f2e <CC_PalTrngParamGet+0xea>
    4ed6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    4eda:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4ede:	6102      	str	r2, [r0, #16]
    4ee0:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    4ee4:	32af      	adds	r2, #175	; 0xaf
    4ee6:	d020      	beq.n	4f2a <CC_PalTrngParamGet+0xe6>
    4ee8:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    4eec:	3201      	adds	r2, #1
    4eee:	d01c      	beq.n	4f2a <CC_PalTrngParamGet+0xe6>
    4ef0:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    4ef4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4ef8:	6142      	str	r2, [r0, #20]
    4efa:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
    4efe:	4a14      	ldr	r2, [pc, #80]	; (4f50 <CC_PalTrngParamGet+0x10c>)
    4f00:	4291      	cmp	r1, r2
    4f02:	d00d      	beq.n	4f20 <CC_PalTrngParamGet+0xdc>
    4f04:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    4f08:	3201      	adds	r2, #1
    4f0a:	d009      	beq.n	4f20 <CC_PalTrngParamGet+0xdc>
    4f0c:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
    4f10:	6183      	str	r3, [r0, #24]
    4f12:	2000      	movs	r0, #0
    4f14:	4770      	bx	lr
    4f16:	2001      	movs	r0, #1
    4f18:	4770      	bx	lr
    4f1a:	f640 02fc 	movw	r2, #2300	; 0x8fc
    4f1e:	e7a5      	b.n	4e6c <CC_PalTrngParamGet+0x28>
    4f20:	f240 3337 	movw	r3, #823	; 0x337
    4f24:	6183      	str	r3, [r0, #24]
    4f26:	2000      	movs	r0, #0
    4f28:	4770      	bx	lr
    4f2a:	2251      	movs	r2, #81	; 0x51
    4f2c:	e7e2      	b.n	4ef4 <CC_PalTrngParamGet+0xb0>
    4f2e:	2290      	movs	r2, #144	; 0x90
    4f30:	e7d3      	b.n	4eda <CC_PalTrngParamGet+0x96>
    4f32:	f642 1204 	movw	r2, #10500	; 0x2904
    4f36:	e7c3      	b.n	4ec0 <CC_PalTrngParamGet+0x7c>
    4f38:	f640 62d8 	movw	r2, #3800	; 0xed8
    4f3c:	e7b2      	b.n	4ea4 <CC_PalTrngParamGet+0x60>
    4f3e:	f242 02d0 	movw	r2, #8400	; 0x20d0
    4f42:	e7a1      	b.n	4e88 <CC_PalTrngParamGet+0x44>
    4f44:	fffff8fc 	.word	0xfffff8fc
    4f48:	ffff20d0 	.word	0xffff20d0
    4f4c:	ffff2904 	.word	0xffff2904
    4f50:	fffff337 	.word	0xfffff337

00004f54 <startTrngHW>:
    4f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4f58:	2800      	cmp	r0, #0
    4f5a:	d077      	beq.n	504c <startTrngHW+0xf8>
    4f5c:	460c      	mov	r4, r1
    4f5e:	2900      	cmp	r1, #0
    4f60:	d074      	beq.n	504c <startTrngHW+0xf8>
    4f62:	461d      	mov	r5, r3
    4f64:	2b00      	cmp	r3, #0
    4f66:	d071      	beq.n	504c <startTrngHW+0xf8>
    4f68:	4606      	mov	r6, r0
    4f6a:	b11a      	cbz	r2, 4f74 <startTrngHW+0x20>
    4f6c:	2201      	movs	r2, #1
    4f6e:	2300      	movs	r3, #0
    4f70:	602a      	str	r2, [r5, #0]
    4f72:	6003      	str	r3, [r0, #0]
    4f74:	682b      	ldr	r3, [r5, #0]
    4f76:	2b00      	cmp	r3, #0
    4f78:	d064      	beq.n	5044 <startTrngHW+0xf0>
    4f7a:	4629      	mov	r1, r5
    4f7c:	4620      	mov	r0, r4
    4f7e:	f000 fb15 	bl	55ac <LLF_RND_GetFastestRosc>
    4f82:	4607      	mov	r7, r0
    4f84:	2800      	cmp	r0, #0
    4f86:	d15e      	bne.n	5046 <startTrngHW+0xf2>
    4f88:	4621      	mov	r1, r4
    4f8a:	6828      	ldr	r0, [r5, #0]
    4f8c:	f000 faf0 	bl	5570 <LLF_RND_GetRoscSampleCnt>
    4f90:	4607      	mov	r7, r0
    4f92:	2800      	cmp	r0, #0
    4f94:	d157      	bne.n	5046 <startTrngHW+0xf2>
    4f96:	682b      	ldr	r3, [r5, #0]
    4f98:	2b08      	cmp	r3, #8
    4f9a:	d066      	beq.n	506a <startTrngHW+0x116>
    4f9c:	2b04      	cmp	r3, #4
    4f9e:	d067      	beq.n	5070 <startTrngHW+0x11c>
    4fa0:	f1a3 0802 	sub.w	r8, r3, #2
    4fa4:	fab8 f888 	clz	r8, r8
    4fa8:	ea4f 1858 	mov.w	r8, r8, lsr #5
    4fac:	2301      	movs	r3, #1
    4fae:	469c      	mov	ip, r3
    4fb0:	4a31      	ldr	r2, [pc, #196]	; (5078 <startTrngHW+0x124>)
    4fb2:	4932      	ldr	r1, [pc, #200]	; (507c <startTrngHW+0x128>)
    4fb4:	6013      	str	r3, [r2, #0]
    4fb6:	4610      	mov	r0, r2
    4fb8:	600b      	str	r3, [r1, #0]
    4fba:	3a94      	subs	r2, #148	; 0x94
    4fbc:	f8c0 c000 	str.w	ip, [r0]
    4fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4fc2:	6013      	str	r3, [r2, #0]
    4fc4:	6811      	ldr	r1, [r2, #0]
    4fc6:	428b      	cmp	r3, r1
    4fc8:	d1f8      	bne.n	4fbc <startTrngHW+0x68>
    4fca:	f04f 0900 	mov.w	r9, #0
    4fce:	4b2c      	ldr	r3, [pc, #176]	; (5080 <startTrngHW+0x12c>)
    4fd0:	f04f 30ff 	mov.w	r0, #4294967295
    4fd4:	f8c3 9000 	str.w	r9, [r3]
    4fd8:	f7ff fcb4 	bl	4944 <CC_HalClearInterruptBit>
    4fdc:	4b29      	ldr	r3, [pc, #164]	; (5084 <startTrngHW+0x130>)
    4fde:	4a2a      	ldr	r2, [pc, #168]	; (5088 <startTrngHW+0x134>)
    4fe0:	4648      	mov	r0, r9
    4fe2:	601a      	str	r2, [r3, #0]
    4fe4:	f7ff fcbc 	bl	4960 <CC_HalMaskInterrupt>
    4fe8:	4a28      	ldr	r2, [pc, #160]	; (508c <startTrngHW+0x138>)
    4fea:	4b29      	ldr	r3, [pc, #164]	; (5090 <startTrngHW+0x13c>)
    4fec:	f8c2 8000 	str.w	r8, [r2]
    4ff0:	6818      	ldr	r0, [r3, #0]
    4ff2:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    4ff6:	f7ff fcb3 	bl	4960 <CC_HalMaskInterrupt>
    4ffa:	220a      	movs	r2, #10
    4ffc:	4b25      	ldr	r3, [pc, #148]	; (5094 <startTrngHW+0x140>)
    4ffe:	601a      	str	r2, [r3, #0]
    5000:	9a08      	ldr	r2, [sp, #32]
    5002:	6923      	ldr	r3, [r4, #16]
    5004:	2a01      	cmp	r2, #1
    5006:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5008:	d024      	beq.n	5054 <startTrngHW+0x100>
    500a:	4a23      	ldr	r2, [pc, #140]	; (5098 <startTrngHW+0x144>)
    500c:	fba2 2303 	umull	r2, r3, r2, r3
    5010:	091b      	lsrs	r3, r3, #4
    5012:	2201      	movs	r2, #1
    5014:	fb03 f301 	mul.w	r3, r3, r1
    5018:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    501c:	491f      	ldr	r1, [pc, #124]	; (509c <startTrngHW+0x148>)
    501e:	03db      	lsls	r3, r3, #15
    5020:	099b      	lsrs	r3, r3, #6
    5022:	600b      	str	r3, [r1, #0]
    5024:	4b16      	ldr	r3, [pc, #88]	; (5080 <startTrngHW+0x12c>)
    5026:	4638      	mov	r0, r7
    5028:	601a      	str	r2, [r3, #0]
    502a:	6833      	ldr	r3, [r6, #0]
    502c:	682a      	ldr	r2, [r5, #0]
    502e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    5032:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    5036:	6033      	str	r3, [r6, #0]
    5038:	682a      	ldr	r2, [r5, #0]
    503a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    503e:	6033      	str	r3, [r6, #0]
    5040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5044:	4f16      	ldr	r7, [pc, #88]	; (50a0 <startTrngHW+0x14c>)
    5046:	4638      	mov	r0, r7
    5048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    504c:	4f15      	ldr	r7, [pc, #84]	; (50a4 <startTrngHW+0x150>)
    504e:	4638      	mov	r0, r7
    5050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5054:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5058:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
    505c:	3201      	adds	r2, #1
    505e:	d002      	beq.n	5066 <startTrngHW+0x112>
    5060:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    5064:	e7d1      	b.n	500a <startTrngHW+0xb6>
    5066:	2316      	movs	r3, #22
    5068:	e7d3      	b.n	5012 <startTrngHW+0xbe>
    506a:	f04f 0803 	mov.w	r8, #3
    506e:	e79d      	b.n	4fac <startTrngHW+0x58>
    5070:	f04f 0802 	mov.w	r8, #2
    5074:	e79a      	b.n	4fac <startTrngHW+0x58>
    5076:	bf00      	nop
    5078:	508411c4 	.word	0x508411c4
    507c:	50841140 	.word	0x50841140
    5080:	5084112c 	.word	0x5084112c
    5084:	50841100 	.word	0x50841100
    5088:	0ffffffe 	.word	0x0ffffffe
    508c:	5084110c 	.word	0x5084110c
    5090:	50841a04 	.word	0x50841a04
    5094:	50841138 	.word	0x50841138
    5098:	aaaaaaab 	.word	0xaaaaaaab
    509c:	508411d8 	.word	0x508411d8
    50a0:	00f10c31 	.word	0x00f10c31
    50a4:	00f10c35 	.word	0x00f10c35

000050a8 <LLF_RND_RepetitionCounterTest.part.0>:
    50a8:	b4f0      	push	{r4, r5, r6, r7}
    50aa:	2400      	movs	r4, #0
    50ac:	00c9      	lsls	r1, r1, #3
    50ae:	4626      	mov	r6, r4
    50b0:	4627      	mov	r7, r4
    50b2:	f101 3cff 	add.w	ip, r1, #4294967295
    50b6:	e006      	b.n	50c6 <LLF_RND_RepetitionCounterTest.part.0+0x1e>
    50b8:	429f      	cmp	r7, r3
    50ba:	d015      	beq.n	50e8 <LLF_RND_RepetitionCounterTest.part.0+0x40>
    50bc:	2601      	movs	r6, #1
    50be:	4565      	cmp	r5, ip
    50c0:	d818      	bhi.n	50f4 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
    50c2:	462c      	mov	r4, r5
    50c4:	461f      	mov	r7, r3
    50c6:	0963      	lsrs	r3, r4, #5
    50c8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    50cc:	f004 011f 	and.w	r1, r4, #31
    50d0:	40cb      	lsrs	r3, r1
    50d2:	291f      	cmp	r1, #31
    50d4:	f104 0501 	add.w	r5, r4, #1
    50d8:	bf18      	it	ne
    50da:	f003 0301 	andne.w	r3, r3, #1
    50de:	2c00      	cmp	r4, #0
    50e0:	d1ea      	bne.n	50b8 <LLF_RND_RepetitionCounterTest.part.0+0x10>
    50e2:	2601      	movs	r6, #1
    50e4:	4635      	mov	r5, r6
    50e6:	e7ec      	b.n	50c2 <LLF_RND_RepetitionCounterTest.part.0+0x1a>
    50e8:	3601      	adds	r6, #1
    50ea:	4296      	cmp	r6, r2
    50ec:	d1e7      	bne.n	50be <LLF_RND_RepetitionCounterTest.part.0+0x16>
    50ee:	4803      	ldr	r0, [pc, #12]	; (50fc <LLF_RND_RepetitionCounterTest.part.0+0x54>)
    50f0:	bcf0      	pop	{r4, r5, r6, r7}
    50f2:	4770      	bx	lr
    50f4:	2000      	movs	r0, #0
    50f6:	bcf0      	pop	{r4, r5, r6, r7}
    50f8:	4770      	bx	lr
    50fa:	bf00      	nop
    50fc:	00f10c36 	.word	0x00f10c36

00005100 <LLF_RND_AdaptiveProportionTest>:
    5100:	2800      	cmp	r0, #0
    5102:	d05f      	beq.n	51c4 <LLF_RND_AdaptiveProportionTest+0xc4>
    5104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5108:	1e4c      	subs	r4, r1, #1
    510a:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    510e:	d226      	bcs.n	515e <LLF_RND_AdaptiveProportionTest+0x5e>
    5110:	b32b      	cbz	r3, 515e <LLF_RND_AdaptiveProportionTest+0x5e>
    5112:	b322      	cbz	r2, 515e <LLF_RND_AdaptiveProportionTest+0x5e>
    5114:	00cc      	lsls	r4, r1, #3
    5116:	2b01      	cmp	r3, #1
    5118:	f104 3eff 	add.w	lr, r4, #4294967295
    511c:	d02f      	beq.n	517e <LLF_RND_AdaptiveProportionTest+0x7e>
    511e:	2100      	movs	r1, #0
    5120:	468c      	mov	ip, r1
    5122:	460f      	mov	r7, r1
    5124:	460d      	mov	r5, r1
    5126:	f103 38ff 	add.w	r8, r3, #4294967295
    512a:	094c      	lsrs	r4, r1, #5
    512c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    5130:	f001 061f 	and.w	r6, r1, #31
    5134:	40f4      	lsrs	r4, r6
    5136:	2e1f      	cmp	r6, #31
    5138:	bf18      	it	ne
    513a:	f004 0401 	andne.w	r4, r4, #1
    513e:	b921      	cbnz	r1, 514a <LLF_RND_AdaptiveProportionTest+0x4a>
    5140:	2501      	movs	r5, #1
    5142:	46ac      	mov	ip, r5
    5144:	4629      	mov	r1, r5
    5146:	4627      	mov	r7, r4
    5148:	e7ef      	b.n	512a <LLF_RND_AdaptiveProportionTest+0x2a>
    514a:	42ab      	cmp	r3, r5
    514c:	d013      	beq.n	5176 <LLF_RND_AdaptiveProportionTest+0x76>
    514e:	42a7      	cmp	r7, r4
    5150:	d101      	bne.n	5156 <LLF_RND_AdaptiveProportionTest+0x56>
    5152:	f10c 0c01 	add.w	ip, ip, #1
    5156:	4545      	cmp	r5, r8
    5158:	d104      	bne.n	5164 <LLF_RND_AdaptiveProportionTest+0x64>
    515a:	4562      	cmp	r2, ip
    515c:	d202      	bcs.n	5164 <LLF_RND_AdaptiveProportionTest+0x64>
    515e:	481a      	ldr	r0, [pc, #104]	; (51c8 <LLF_RND_AdaptiveProportionTest+0xc8>)
    5160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5164:	463c      	mov	r4, r7
    5166:	3101      	adds	r1, #1
    5168:	458e      	cmp	lr, r1
    516a:	f105 0501 	add.w	r5, r5, #1
    516e:	d2ea      	bcs.n	5146 <LLF_RND_AdaptiveProportionTest+0x46>
    5170:	2000      	movs	r0, #0
    5172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5176:	2500      	movs	r5, #0
    5178:	f04f 0c01 	mov.w	ip, #1
    517c:	e7f3      	b.n	5166 <LLF_RND_AdaptiveProportionTest+0x66>
    517e:	2600      	movs	r6, #0
    5180:	46b4      	mov	ip, r6
    5182:	4637      	mov	r7, r6
    5184:	4631      	mov	r1, r6
    5186:	094b      	lsrs	r3, r1, #5
    5188:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    518c:	f001 051f 	and.w	r5, r1, #31
    5190:	40eb      	lsrs	r3, r5
    5192:	2d1f      	cmp	r5, #31
    5194:	bf18      	it	ne
    5196:	f003 0301 	andne.w	r3, r3, #1
    519a:	b139      	cbz	r1, 51ac <LLF_RND_AdaptiveProportionTest+0xac>
    519c:	b95f      	cbnz	r7, 51b6 <LLF_RND_AdaptiveProportionTest+0xb6>
    519e:	459c      	cmp	ip, r3
    51a0:	d001      	beq.n	51a6 <LLF_RND_AdaptiveProportionTest+0xa6>
    51a2:	4663      	mov	r3, ip
    51a4:	e008      	b.n	51b8 <LLF_RND_AdaptiveProportionTest+0xb8>
    51a6:	4663      	mov	r3, ip
    51a8:	3601      	adds	r6, #1
    51aa:	e005      	b.n	51b8 <LLF_RND_AdaptiveProportionTest+0xb8>
    51ac:	2601      	movs	r6, #1
    51ae:	4631      	mov	r1, r6
    51b0:	469c      	mov	ip, r3
    51b2:	2701      	movs	r7, #1
    51b4:	e7e7      	b.n	5186 <LLF_RND_AdaptiveProportionTest+0x86>
    51b6:	463e      	mov	r6, r7
    51b8:	42b2      	cmp	r2, r6
    51ba:	d3d0      	bcc.n	515e <LLF_RND_AdaptiveProportionTest+0x5e>
    51bc:	3101      	adds	r1, #1
    51be:	42a1      	cmp	r1, r4
    51c0:	d1f6      	bne.n	51b0 <LLF_RND_AdaptiveProportionTest+0xb0>
    51c2:	e7d5      	b.n	5170 <LLF_RND_AdaptiveProportionTest+0x70>
    51c4:	4800      	ldr	r0, [pc, #0]	; (51c8 <LLF_RND_AdaptiveProportionTest+0xc8>)
    51c6:	4770      	bx	lr
    51c8:	00f10c37 	.word	0x00f10c37

000051cc <getTrngSource>:
    51cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51d0:	b08d      	sub	sp, #52	; 0x34
    51d2:	9e18      	ldr	r6, [sp, #96]	; 0x60
    51d4:	4607      	mov	r7, r0
    51d6:	460c      	mov	r4, r1
    51d8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    51da:	2e00      	cmp	r6, #0
    51dc:	d14c      	bne.n	5278 <getTrngSource+0xac>
    51de:	f8d1 b010 	ldr.w	fp, [r1, #16]
    51e2:	2100      	movs	r1, #0
    51e4:	601d      	str	r5, [r3, #0]
    51e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    51e8:	6019      	str	r1, [r3, #0]
    51ea:	2a00      	cmp	r2, #0
    51ec:	f000 811e 	beq.w	542c <getTrngSource+0x260>
    51f0:	4a9a      	ldr	r2, [pc, #616]	; (545c <getTrngSource+0x290>)
    51f2:	4b9b      	ldr	r3, [pc, #620]	; (5460 <getTrngSource+0x294>)
    51f4:	6811      	ldr	r1, [r2, #0]
    51f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    51f8:	681b      	ldr	r3, [r3, #0]
    51fa:	429a      	cmp	r2, r3
    51fc:	d147      	bne.n	528e <getTrngSource+0xc2>
    51fe:	290a      	cmp	r1, #10
    5200:	d145      	bne.n	528e <getTrngSource+0xc2>
    5202:	78fb      	ldrb	r3, [r7, #3]
    5204:	9304      	str	r3, [sp, #16]
    5206:	2304      	movs	r3, #4
    5208:	46b8      	mov	r8, r7
    520a:	9302      	str	r3, [sp, #8]
    520c:	4b95      	ldr	r3, [pc, #596]	; (5464 <getTrngSource+0x298>)
    520e:	fba3 230b 	umull	r2, r3, r3, fp
    5212:	ea4f 0a93 	mov.w	sl, r3, lsr #2
    5216:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
    521a:	f105 0208 	add.w	r2, r5, #8
    521e:	9203      	str	r2, [sp, #12]
    5220:	ebab 0a43 	sub.w	sl, fp, r3, lsl #1
    5224:	9b16      	ldr	r3, [sp, #88]	; 0x58
    5226:	f8c3 b000 	str.w	fp, [r3]
    522a:	f1bb 0f00 	cmp.w	fp, #0
    522e:	f000 80c3 	beq.w	53b8 <getTrngSource+0x1ec>
    5232:	465d      	mov	r5, fp
    5234:	f04f 0900 	mov.w	r9, #0
    5238:	9e03      	ldr	r6, [sp, #12]
    523a:	f000 f9c7 	bl	55cc <LLF_RND_TurnOffTrng>
    523e:	2300      	movs	r3, #0
    5240:	9305      	str	r3, [sp, #20]
    5242:	f1b8 0f00 	cmp.w	r8, #0
    5246:	f000 80e5 	beq.w	5414 <getTrngSource+0x248>
    524a:	2c00      	cmp	r4, #0
    524c:	f000 80e2 	beq.w	5414 <getTrngSource+0x248>
    5250:	9b04      	ldr	r3, [sp, #16]
    5252:	2b00      	cmp	r3, #0
    5254:	f000 80dc 	beq.w	5410 <getTrngSource+0x244>
    5258:	4620      	mov	r0, r4
    525a:	a904      	add	r1, sp, #16
    525c:	f000 f9a6 	bl	55ac <LLF_RND_GetFastestRosc>
    5260:	b1b8      	cbz	r0, 5292 <getTrngSource+0xc6>
    5262:	4b81      	ldr	r3, [pc, #516]	; (5468 <getTrngSource+0x29c>)
    5264:	4298      	cmp	r0, r3
    5266:	f040 80a7 	bne.w	53b8 <getTrngSource+0x1ec>
    526a:	9002      	str	r0, [sp, #8]
    526c:	f000 f9ae 	bl	55cc <LLF_RND_TurnOffTrng>
    5270:	9802      	ldr	r0, [sp, #8]
    5272:	b00d      	add	sp, #52	; 0x34
    5274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5278:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    527c:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    5280:	3001      	adds	r0, #1
    5282:	bf0c      	ite	eq
    5284:	f44f 7b04 	moveq.w	fp, #528	; 0x210
    5288:	f8d1 bc0c 	ldrne.w	fp, [r1, #3084]	; 0xc0c
    528c:	e7a9      	b.n	51e2 <getTrngSource+0x16>
    528e:	4877      	ldr	r0, [pc, #476]	; (546c <getTrngSource+0x2a0>)
    5290:	e7eb      	b.n	526a <getTrngSource+0x9e>
    5292:	4621      	mov	r1, r4
    5294:	9804      	ldr	r0, [sp, #16]
    5296:	f000 f96b 	bl	5570 <LLF_RND_GetRoscSampleCnt>
    529a:	2800      	cmp	r0, #0
    529c:	d1e1      	bne.n	5262 <getTrngSource+0x96>
    529e:	9f04      	ldr	r7, [sp, #16]
    52a0:	2f08      	cmp	r7, #8
    52a2:	f000 80b9 	beq.w	5418 <getTrngSource+0x24c>
    52a6:	2f04      	cmp	r7, #4
    52a8:	f000 80b8 	beq.w	541c <getTrngSource+0x250>
    52ac:	f1a7 0702 	sub.w	r7, r7, #2
    52b0:	fab7 f787 	clz	r7, r7
    52b4:	097f      	lsrs	r7, r7, #5
    52b6:	2301      	movs	r3, #1
    52b8:	4619      	mov	r1, r3
    52ba:	486d      	ldr	r0, [pc, #436]	; (5470 <getTrngSource+0x2a4>)
    52bc:	6003      	str	r3, [r0, #0]
    52be:	f840 3c84 	str.w	r3, [r0, #-132]
    52c2:	4b6b      	ldr	r3, [pc, #428]	; (5470 <getTrngSource+0x2a4>)
    52c4:	4866      	ldr	r0, [pc, #408]	; (5460 <getTrngSource+0x294>)
    52c6:	6019      	str	r1, [r3, #0]
    52c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    52ca:	6003      	str	r3, [r0, #0]
    52cc:	6800      	ldr	r0, [r0, #0]
    52ce:	4283      	cmp	r3, r0
    52d0:	d1f7      	bne.n	52c2 <getTrngSource+0xf6>
    52d2:	2300      	movs	r3, #0
    52d4:	4a67      	ldr	r2, [pc, #412]	; (5474 <getTrngSource+0x2a8>)
    52d6:	f04f 30ff 	mov.w	r0, #4294967295
    52da:	6013      	str	r3, [r2, #0]
    52dc:	f7ff fb32 	bl	4944 <CC_HalClearInterruptBit>
    52e0:	2300      	movs	r3, #0
    52e2:	4965      	ldr	r1, [pc, #404]	; (5478 <getTrngSource+0x2ac>)
    52e4:	4618      	mov	r0, r3
    52e6:	4b65      	ldr	r3, [pc, #404]	; (547c <getTrngSource+0x2b0>)
    52e8:	6019      	str	r1, [r3, #0]
    52ea:	f7ff fb39 	bl	4960 <CC_HalMaskInterrupt>
    52ee:	4964      	ldr	r1, [pc, #400]	; (5480 <getTrngSource+0x2b4>)
    52f0:	4b64      	ldr	r3, [pc, #400]	; (5484 <getTrngSource+0x2b8>)
    52f2:	600f      	str	r7, [r1, #0]
    52f4:	6818      	ldr	r0, [r3, #0]
    52f6:	4f5b      	ldr	r7, [pc, #364]	; (5464 <getTrngSource+0x298>)
    52f8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    52fc:	f7ff fb30 	bl	4960 <CC_HalMaskInterrupt>
    5300:	210a      	movs	r1, #10
    5302:	2201      	movs	r2, #1
    5304:	4b55      	ldr	r3, [pc, #340]	; (545c <getTrngSource+0x290>)
    5306:	4860      	ldr	r0, [pc, #384]	; (5488 <getTrngSource+0x2bc>)
    5308:	6019      	str	r1, [r3, #0]
    530a:	6921      	ldr	r1, [r4, #16]
    530c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    530e:	fba7 c101 	umull	ip, r1, r7, r1
    5312:	0909      	lsrs	r1, r1, #4
    5314:	fb03 f301 	mul.w	r3, r3, r1
    5318:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    531c:	03db      	lsls	r3, r3, #15
    531e:	099b      	lsrs	r3, r3, #6
    5320:	6003      	str	r3, [r0, #0]
    5322:	4b54      	ldr	r3, [pc, #336]	; (5474 <getTrngSource+0x2a8>)
    5324:	a805      	add	r0, sp, #20
    5326:	601a      	str	r2, [r3, #0]
    5328:	9904      	ldr	r1, [sp, #16]
    532a:	f8d8 2000 	ldr.w	r2, [r8]
    532e:	020b      	lsls	r3, r1, #8
    5330:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    5334:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    5338:	4313      	orrs	r3, r2
    533a:	f8c8 3000 	str.w	r3, [r8]
    533e:	f000 f907 	bl	5550 <LLF_RND_WaitRngInterrupt>
    5342:	2800      	cmp	r0, #0
    5344:	d18d      	bne.n	5262 <getTrngSource+0x96>
    5346:	4b51      	ldr	r3, [pc, #324]	; (548c <getTrngSource+0x2c0>)
    5348:	fba7 2705 	umull	r2, r7, r7, r5
    534c:	681a      	ldr	r2, [r3, #0]
    534e:	3314      	adds	r3, #20
    5350:	9206      	str	r2, [sp, #24]
    5352:	f853 2c10 	ldr.w	r2, [r3, #-16]
    5356:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
    535a:	9207      	str	r2, [sp, #28]
    535c:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    5360:	9208      	str	r2, [sp, #32]
    5362:	f853 2c08 	ldr.w	r2, [r3, #-8]
    5366:	9209      	str	r2, [sp, #36]	; 0x24
    5368:	f853 2c04 	ldr.w	r2, [r3, #-4]
    536c:	920a      	str	r2, [sp, #40]	; 0x28
    536e:	681b      	ldr	r3, [r3, #0]
    5370:	930b      	str	r3, [sp, #44]	; 0x2c
    5372:	d102      	bne.n	537a <getTrngSource+0x1ae>
    5374:	f1ba 0f00 	cmp.w	sl, #0
    5378:	d141      	bne.n	53fe <getTrngSource+0x232>
    537a:	2218      	movs	r2, #24
    537c:	4630      	mov	r0, r6
    537e:	eb0d 0102 	add.w	r1, sp, r2
    5382:	f7ff fa03 	bl	478c <CC_PalMemCopyPlat>
    5386:	3d18      	subs	r5, #24
    5388:	3618      	adds	r6, #24
    538a:	f109 0901 	add.w	r9, r9, #1
    538e:	2d00      	cmp	r5, #0
    5390:	f47f af53 	bne.w	523a <getTrngSource+0x6e>
    5394:	f5bb 7f04 	cmp.w	fp, #528	; 0x210
    5398:	d85d      	bhi.n	5456 <getTrngSource+0x28a>
    539a:	9d03      	ldr	r5, [sp, #12]
    539c:	4659      	mov	r1, fp
    539e:	4628      	mov	r0, r5
    53a0:	6962      	ldr	r2, [r4, #20]
    53a2:	f7ff fe81 	bl	50a8 <LLF_RND_RepetitionCounterTest.part.0>
    53a6:	2800      	cmp	r0, #0
    53a8:	d04b      	beq.n	5442 <getTrngSource+0x276>
    53aa:	2300      	movs	r3, #0
    53ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
    53ae:	6013      	str	r3, [r2, #0]
    53b0:	4b2d      	ldr	r3, [pc, #180]	; (5468 <getTrngSource+0x29c>)
    53b2:	4298      	cmp	r0, r3
    53b4:	f43f af59 	beq.w	526a <getTrngSource+0x9e>
    53b8:	9d04      	ldr	r5, [sp, #16]
    53ba:	2d08      	cmp	r5, #8
    53bc:	d034      	beq.n	5428 <getTrngSource+0x25c>
    53be:	2200      	movs	r2, #0
    53c0:	ab04      	add	r3, sp, #16
    53c2:	4621      	mov	r1, r4
    53c4:	4640      	mov	r0, r8
    53c6:	006d      	lsls	r5, r5, #1
    53c8:	9200      	str	r2, [sp, #0]
    53ca:	9504      	str	r5, [sp, #16]
    53cc:	f7ff fdc2 	bl	4f54 <startTrngHW>
    53d0:	4b2f      	ldr	r3, [pc, #188]	; (5490 <getTrngSource+0x2c4>)
    53d2:	4298      	cmp	r0, r3
    53d4:	d024      	beq.n	5420 <getTrngSource+0x254>
    53d6:	2800      	cmp	r0, #0
    53d8:	f47f af47 	bne.w	526a <getTrngSource+0x9e>
    53dc:	f8d8 2000 	ldr.w	r2, [r8]
    53e0:	0a13      	lsrs	r3, r2, #8
    53e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    53e6:	4313      	orrs	r3, r2
    53e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    53ec:	f8c8 3000 	str.w	r3, [r8]
    53f0:	9b02      	ldr	r3, [sp, #8]
    53f2:	3b01      	subs	r3, #1
    53f4:	9302      	str	r3, [sp, #8]
    53f6:	f47f af15 	bne.w	5224 <getTrngSource+0x58>
    53fa:	2000      	movs	r0, #0
    53fc:	e735      	b.n	526a <getTrngSource+0x9e>
    53fe:	4630      	mov	r0, r6
    5400:	4652      	mov	r2, sl
    5402:	a906      	add	r1, sp, #24
    5404:	f7ff f9c2 	bl	478c <CC_PalMemCopyPlat>
    5408:	eba5 050a 	sub.w	r5, r5, sl
    540c:	4456      	add	r6, sl
    540e:	e7bc      	b.n	538a <getTrngSource+0x1be>
    5410:	481f      	ldr	r0, [pc, #124]	; (5490 <getTrngSource+0x2c4>)
    5412:	e726      	b.n	5262 <getTrngSource+0x96>
    5414:	481f      	ldr	r0, [pc, #124]	; (5494 <getTrngSource+0x2c8>)
    5416:	e724      	b.n	5262 <getTrngSource+0x96>
    5418:	2703      	movs	r7, #3
    541a:	e74c      	b.n	52b6 <getTrngSource+0xea>
    541c:	2702      	movs	r7, #2
    541e:	e74a      	b.n	52b6 <getTrngSource+0xea>
    5420:	6a23      	ldr	r3, [r4, #32]
    5422:	2b00      	cmp	r3, #0
    5424:	f43f af21 	beq.w	526a <getTrngSource+0x9e>
    5428:	481b      	ldr	r0, [pc, #108]	; (5498 <getTrngSource+0x2cc>)
    542a:	e71e      	b.n	526a <getTrngSource+0x9e>
    542c:	2201      	movs	r2, #1
    542e:	4621      	mov	r1, r4
    5430:	4638      	mov	r0, r7
    5432:	9600      	str	r6, [sp, #0]
    5434:	ab04      	add	r3, sp, #16
    5436:	f7ff fd8d 	bl	4f54 <startTrngHW>
    543a:	2800      	cmp	r0, #0
    543c:	f43f aee3 	beq.w	5206 <getTrngSource+0x3a>
    5440:	e713      	b.n	526a <getTrngSource+0x9e>
    5442:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5446:	4659      	mov	r1, fp
    5448:	4628      	mov	r0, r5
    544a:	69a2      	ldr	r2, [r4, #24]
    544c:	f7ff fe58 	bl	5100 <LLF_RND_AdaptiveProportionTest>
    5450:	2800      	cmp	r0, #0
    5452:	d1aa      	bne.n	53aa <getTrngSource+0x1de>
    5454:	e7d1      	b.n	53fa <getTrngSource+0x22e>
    5456:	9b16      	ldr	r3, [sp, #88]	; 0x58
    5458:	601d      	str	r5, [r3, #0]
    545a:	e7ad      	b.n	53b8 <getTrngSource+0x1ec>
    545c:	50841138 	.word	0x50841138
    5460:	50841130 	.word	0x50841130
    5464:	aaaaaaab 	.word	0xaaaaaaab
    5468:	00f10c02 	.word	0x00f10c02
    546c:	00f10c30 	.word	0x00f10c30
    5470:	508411c4 	.word	0x508411c4
    5474:	5084112c 	.word	0x5084112c
    5478:	0ffffffe 	.word	0x0ffffffe
    547c:	50841100 	.word	0x50841100
    5480:	5084110c 	.word	0x5084110c
    5484:	50841a04 	.word	0x50841a04
    5488:	508411d8 	.word	0x508411d8
    548c:	50841114 	.word	0x50841114
    5490:	00f10c31 	.word	0x00f10c31
    5494:	00f10c35 	.word	0x00f10c35
    5498:	00f10c32 	.word	0x00f10c32

0000549c <LLF_RND_GetTrngSource>:
    549c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    54a0:	4e1f      	ldr	r6, [pc, #124]	; (5520 <LLF_RND_GetTrngSource+0x84>)
    54a2:	b084      	sub	sp, #16
    54a4:	4604      	mov	r4, r0
    54a6:	460d      	mov	r5, r1
    54a8:	6830      	ldr	r0, [r6, #0]
    54aa:	f04f 31ff 	mov.w	r1, #4294967295
    54ae:	4690      	mov	r8, r2
    54b0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    54b2:	f7ff f9d1 	bl	4858 <CC_PalMutexLock>
    54b6:	b9d8      	cbnz	r0, 54f0 <LLF_RND_GetTrngSource+0x54>
    54b8:	2000      	movs	r0, #0
    54ba:	f7ff f9fd 	bl	48b8 <CC_PalPowerSaveModeSelect>
    54be:	b9f8      	cbnz	r0, 5500 <LLF_RND_GetTrngSource+0x64>
    54c0:	2300      	movs	r3, #0
    54c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    54c4:	4620      	mov	r0, r4
    54c6:	9200      	str	r2, [sp, #0]
    54c8:	9302      	str	r3, [sp, #8]
    54ca:	4642      	mov	r2, r8
    54cc:	4629      	mov	r1, r5
    54ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    54d0:	9701      	str	r7, [sp, #4]
    54d2:	f7ff fe7b 	bl	51cc <getTrngSource>
    54d6:	4604      	mov	r4, r0
    54d8:	2001      	movs	r0, #1
    54da:	f7ff f9ed 	bl	48b8 <CC_PalPowerSaveModeSelect>
    54de:	b9d0      	cbnz	r0, 5516 <LLF_RND_GetTrngSource+0x7a>
    54e0:	6830      	ldr	r0, [r6, #0]
    54e2:	f7ff f9c1 	bl	4868 <CC_PalMutexUnlock>
    54e6:	b978      	cbnz	r0, 5508 <LLF_RND_GetTrngSource+0x6c>
    54e8:	4620      	mov	r0, r4
    54ea:	b004      	add	sp, #16
    54ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54f0:	480c      	ldr	r0, [pc, #48]	; (5524 <LLF_RND_GetTrngSource+0x88>)
    54f2:	f7ff fb49 	bl	4b88 <CC_PalAbort>
    54f6:	2000      	movs	r0, #0
    54f8:	f7ff f9de 	bl	48b8 <CC_PalPowerSaveModeSelect>
    54fc:	2800      	cmp	r0, #0
    54fe:	d0df      	beq.n	54c0 <LLF_RND_GetTrngSource+0x24>
    5500:	4809      	ldr	r0, [pc, #36]	; (5528 <LLF_RND_GetTrngSource+0x8c>)
    5502:	f7ff fb41 	bl	4b88 <CC_PalAbort>
    5506:	e7db      	b.n	54c0 <LLF_RND_GetTrngSource+0x24>
    5508:	4808      	ldr	r0, [pc, #32]	; (552c <LLF_RND_GetTrngSource+0x90>)
    550a:	f7ff fb3d 	bl	4b88 <CC_PalAbort>
    550e:	4620      	mov	r0, r4
    5510:	b004      	add	sp, #16
    5512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5516:	4806      	ldr	r0, [pc, #24]	; (5530 <LLF_RND_GetTrngSource+0x94>)
    5518:	f7ff fb36 	bl	4b88 <CC_PalAbort>
    551c:	e7e0      	b.n	54e0 <LLF_RND_GetTrngSource+0x44>
    551e:	bf00      	nop
    5520:	2000006c 	.word	0x2000006c
    5524:	000066cc 	.word	0x000066cc
    5528:	000066fc 	.word	0x000066fc
    552c:	000066e4 	.word	0x000066e4
    5530:	0000671c 	.word	0x0000671c

00005534 <LLF_RND_RunTrngStartupTest>:
    5534:	b510      	push	{r4, lr}
    5536:	2401      	movs	r4, #1
    5538:	b086      	sub	sp, #24
    553a:	ab05      	add	r3, sp, #20
    553c:	e9cd 2401 	strd	r2, r4, [sp, #4]
    5540:	9300      	str	r3, [sp, #0]
    5542:	2200      	movs	r2, #0
    5544:	ab04      	add	r3, sp, #16
    5546:	f7ff fe41 	bl	51cc <getTrngSource>
    554a:	b006      	add	sp, #24
    554c:	bd10      	pop	{r4, pc}
    554e:	bf00      	nop

00005550 <LLF_RND_WaitRngInterrupt>:
    5550:	4601      	mov	r1, r0
    5552:	b508      	push	{r3, lr}
    5554:	f44f 6080 	mov.w	r0, #1024	; 0x400
    5558:	f7ff fa08 	bl	496c <CC_HalWaitInterruptRND>
    555c:	2300      	movs	r3, #0
    555e:	4902      	ldr	r1, [pc, #8]	; (5568 <LLF_RND_WaitRngInterrupt+0x18>)
    5560:	4a02      	ldr	r2, [pc, #8]	; (556c <LLF_RND_WaitRngInterrupt+0x1c>)
    5562:	600b      	str	r3, [r1, #0]
    5564:	6013      	str	r3, [r2, #0]
    5566:	bd08      	pop	{r3, pc}
    5568:	508411c8 	.word	0x508411c8
    556c:	5084112c 	.word	0x5084112c

00005570 <LLF_RND_GetRoscSampleCnt>:
    5570:	3801      	subs	r0, #1
    5572:	2807      	cmp	r0, #7
    5574:	d805      	bhi.n	5582 <LLF_RND_GetRoscSampleCnt+0x12>
    5576:	e8df f000 	tbb	[pc, r0]
    557a:	0e0a      	.short	0x0e0a
    557c:	04041204 	.word	0x04041204
    5580:	0604      	.short	0x0604
    5582:	4809      	ldr	r0, [pc, #36]	; (55a8 <LLF_RND_GetRoscSampleCnt+0x38>)
    5584:	4770      	bx	lr
    5586:	68cb      	ldr	r3, [r1, #12]
    5588:	2000      	movs	r0, #0
    558a:	624b      	str	r3, [r1, #36]	; 0x24
    558c:	4770      	bx	lr
    558e:	680b      	ldr	r3, [r1, #0]
    5590:	2000      	movs	r0, #0
    5592:	624b      	str	r3, [r1, #36]	; 0x24
    5594:	4770      	bx	lr
    5596:	684b      	ldr	r3, [r1, #4]
    5598:	2000      	movs	r0, #0
    559a:	624b      	str	r3, [r1, #36]	; 0x24
    559c:	4770      	bx	lr
    559e:	688b      	ldr	r3, [r1, #8]
    55a0:	2000      	movs	r0, #0
    55a2:	624b      	str	r3, [r1, #36]	; 0x24
    55a4:	4770      	bx	lr
    55a6:	bf00      	nop
    55a8:	00f10c31 	.word	0x00f10c31

000055ac <LLF_RND_GetFastestRosc>:
    55ac:	680b      	ldr	r3, [r1, #0]
    55ae:	e002      	b.n	55b6 <LLF_RND_GetFastestRosc+0xa>
    55b0:	2b08      	cmp	r3, #8
    55b2:	600b      	str	r3, [r1, #0]
    55b4:	d806      	bhi.n	55c4 <LLF_RND_GetFastestRosc+0x18>
    55b6:	6a02      	ldr	r2, [r0, #32]
    55b8:	4213      	tst	r3, r2
    55ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
    55be:	d0f7      	beq.n	55b0 <LLF_RND_GetFastestRosc+0x4>
    55c0:	2000      	movs	r0, #0
    55c2:	4770      	bx	lr
    55c4:	4800      	ldr	r0, [pc, #0]	; (55c8 <LLF_RND_GetFastestRosc+0x1c>)
    55c6:	4770      	bx	lr
    55c8:	00f10c31 	.word	0x00f10c31

000055cc <LLF_RND_TurnOffTrng>:
    55cc:	2300      	movs	r3, #0
    55ce:	4904      	ldr	r1, [pc, #16]	; (55e0 <LLF_RND_TurnOffTrng+0x14>)
    55d0:	4a04      	ldr	r2, [pc, #16]	; (55e4 <LLF_RND_TurnOffTrng+0x18>)
    55d2:	600b      	str	r3, [r1, #0]
    55d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
    55d8:	6013      	str	r3, [r2, #0]
    55da:	f7ff b9b3 	b.w	4944 <CC_HalClearInterruptBit>
    55de:	bf00      	nop
    55e0:	5084112c 	.word	0x5084112c
    55e4:	508411c4 	.word	0x508411c4

000055e8 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    55e8:	b508      	push	{r3, lr}
	spm_config();
    55ea:	f7fc fb5f 	bl	1cac <spm_config>
	spm_jump();
}
    55ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    55f2:	f7fc baf1 	b.w	1bd8 <spm_jump>

000055f6 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    55f6:	b160      	cbz	r0, 5612 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    55f8:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    55fa:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    55fe:	2b01      	cmp	r3, #1
    5600:	d003      	beq.n	560a <sys_notify_validate+0x14>
    5602:	2b03      	cmp	r3, #3
    5604:	d105      	bne.n	5612 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    5606:	6803      	ldr	r3, [r0, #0]
    5608:	b11b      	cbz	r3, 5612 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    560a:	2300      	movs	r3, #0
    560c:	6083      	str	r3, [r0, #8]
    560e:	4618      	mov	r0, r3
    5610:	4770      	bx	lr
		return -EINVAL;
    5612:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5616:	4770      	bx	lr

00005618 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5618:	2200      	movs	r2, #0
    561a:	6843      	ldr	r3, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    561c:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    561e:	f003 0303 	and.w	r3, r3, #3
	switch (method) {
    5622:	2b03      	cmp	r3, #3
	sys_notify_generic_callback rv = 0;
    5624:	bf14      	ite	ne
    5626:	4613      	movne	r3, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5628:	6803      	ldreq	r3, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    562a:	6042      	str	r2, [r0, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    562c:	4618      	mov	r0, r3
    562e:	4770      	bx	lr

00005630 <arch_printk_char_out>:
}
    5630:	2000      	movs	r0, #0
    5632:	4770      	bx	lr

00005634 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    5634:	b40f      	push	{r0, r1, r2, r3}
    5636:	b507      	push	{r0, r1, r2, lr}
    5638:	a904      	add	r1, sp, #16
    563a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    563e:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    5640:	f7fa ffb2 	bl	5a8 <vprintk>
	}
	va_end(ap);
}
    5644:	b003      	add	sp, #12
    5646:	f85d eb04 	ldr.w	lr, [sp], #4
    564a:	b004      	add	sp, #16
    564c:	4770      	bx	lr

0000564e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    564e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    5650:	f013 0307 	ands.w	r3, r3, #7
    5654:	d105      	bne.n	5662 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    5656:	6803      	ldr	r3, [r0, #0]
    5658:	2b00      	cmp	r3, #0
		evt = EVT_START;
    565a:	bf0c      	ite	eq
    565c:	2000      	moveq	r0, #0
    565e:	2003      	movne	r0, #3
    5660:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    5662:	2b02      	cmp	r3, #2
    5664:	d105      	bne.n	5672 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    5666:	8b43      	ldrh	r3, [r0, #26]
    5668:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    566a:	bf14      	ite	ne
    566c:	2000      	movne	r0, #0
    566e:	2004      	moveq	r0, #4
    5670:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    5672:	2b01      	cmp	r3, #1
    5674:	d105      	bne.n	5682 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    5676:	6803      	ldr	r3, [r0, #0]
    5678:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    567a:	bf0c      	ite	eq
    567c:	2000      	moveq	r0, #0
    567e:	2005      	movne	r0, #5
    5680:	4770      	bx	lr
	int evt = EVT_NOP;
    5682:	2000      	movs	r0, #0
}
    5684:	4770      	bx	lr

00005686 <notify_one>:
{
    5686:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5688:	460d      	mov	r5, r1
    568a:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    568c:	4619      	mov	r1, r3
    568e:	1d28      	adds	r0, r5, #4
{
    5690:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5692:	9300      	str	r3, [sp, #0]
    5694:	f7ff ffc0 	bl	5618 <sys_notify_finalize>
	if (cb) {
    5698:	4604      	mov	r4, r0
    569a:	b140      	cbz	r0, 56ae <notify_one+0x28>
		cb(mgr, cli, state, res);
    569c:	e9dd 3200 	ldrd	r3, r2, [sp]
    56a0:	4629      	mov	r1, r5
    56a2:	4630      	mov	r0, r6
    56a4:	46a4      	mov	ip, r4
}
    56a6:	b002      	add	sp, #8
    56a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
    56ac:	4760      	bx	ip
}
    56ae:	b002      	add	sp, #8
    56b0:	bd70      	pop	{r4, r5, r6, pc}

000056b2 <transition_complete>:
{
    56b2:	b410      	push	{r4}
	__asm__ volatile(
    56b4:	f04f 0420 	mov.w	r4, #32
    56b8:	f3ef 8211 	mrs	r2, BASEPRI
    56bc:	f384 8811 	msr	BASEPRI, r4
    56c0:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    56c4:	6141      	str	r1, [r0, #20]
}
    56c6:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
    56ca:	2101      	movs	r1, #1
    56cc:	f7fa bf7a 	b.w	5c4 <process_event>

000056d0 <validate_args>:
{
    56d0:	b510      	push	{r4, lr}
    56d2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    56d4:	b140      	cbz	r0, 56e8 <validate_args+0x18>
    56d6:	b139      	cbz	r1, 56e8 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    56d8:	1d08      	adds	r0, r1, #4
    56da:	f7ff ff8c 	bl	55f6 <sys_notify_validate>
	if ((rv == 0)
    56de:	b928      	cbnz	r0, 56ec <validate_args+0x1c>
	    && ((cli->notify.flags
    56e0:	68a3      	ldr	r3, [r4, #8]
    56e2:	f033 0303 	bics.w	r3, r3, #3
    56e6:	d001      	beq.n	56ec <validate_args+0x1c>
		rv = -EINVAL;
    56e8:	f06f 0015 	mvn.w	r0, #21
}
    56ec:	bd10      	pop	{r4, pc}

000056ee <onoff_manager_init>:
{
    56ee:	b538      	push	{r3, r4, r5, lr}
    56f0:	460c      	mov	r4, r1
	if ((mgr == NULL)
    56f2:	4605      	mov	r5, r0
    56f4:	b158      	cbz	r0, 570e <onoff_manager_init+0x20>
	    || (transitions == NULL)
    56f6:	b151      	cbz	r1, 570e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    56f8:	680b      	ldr	r3, [r1, #0]
    56fa:	b143      	cbz	r3, 570e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    56fc:	684b      	ldr	r3, [r1, #4]
    56fe:	b133      	cbz	r3, 570e <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5700:	221c      	movs	r2, #28
    5702:	2100      	movs	r1, #0
    5704:	f000 fb81 	bl	5e0a <memset>
	return 0;
    5708:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    570a:	612c      	str	r4, [r5, #16]
}
    570c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    570e:	f06f 0015 	mvn.w	r0, #21
    5712:	e7fb      	b.n	570c <onoff_manager_init+0x1e>

00005714 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    5714:	b570      	push	{r4, r5, r6, lr}
    5716:	4604      	mov	r4, r0
    5718:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    571a:	f7ff ffd9 	bl	56d0 <validate_args>

	if (rv < 0) {
    571e:	1e05      	subs	r5, r0, #0
    5720:	db31      	blt.n	5786 <onoff_request+0x72>
    5722:	f04f 0320 	mov.w	r3, #32
    5726:	f3ef 8111 	mrs	r1, BASEPRI
    572a:	f383 8811 	msr	BASEPRI, r3
    572e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    5732:	f64f 75ff 	movw	r5, #65535	; 0xffff
    5736:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5738:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    573a:	42ab      	cmp	r3, r5
    573c:	f000 0207 	and.w	r2, r0, #7
    5740:	d02e      	beq.n	57a0 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    5742:	2a02      	cmp	r2, #2
    5744:	d10e      	bne.n	5764 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    5746:	3301      	adds	r3, #1
    5748:	8363      	strh	r3, [r4, #26]
	rv = state;
    574a:	4615      	mov	r5, r2
		notify = true;
    574c:	2301      	movs	r3, #1
	__asm__ volatile(
    574e:	f381 8811 	msr	BASEPRI, r1
    5752:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    5756:	b1b3      	cbz	r3, 5786 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    5758:	2300      	movs	r3, #0
    575a:	4631      	mov	r1, r6
    575c:	4620      	mov	r0, r4
    575e:	f7ff ff92 	bl	5686 <notify_one>
    5762:	e010      	b.n	5786 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    5764:	0783      	lsls	r3, r0, #30
    5766:	d001      	beq.n	576c <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    5768:	2a06      	cmp	r2, #6
    576a:	d10e      	bne.n	578a <onoff_request+0x76>
	parent->next = child;
    576c:	2300      	movs	r3, #0
    576e:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    5770:	6863      	ldr	r3, [r4, #4]
    5772:	b993      	cbnz	r3, 579a <onoff_request+0x86>
	list->head = node;
    5774:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    5778:	4615      	mov	r5, r2
    577a:	b962      	cbnz	r2, 5796 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    577c:	460a      	mov	r2, r1
    577e:	4620      	mov	r0, r4
    5780:	2102      	movs	r1, #2
    5782:	f7fa ff1f 	bl	5c4 <process_event>
		}
	}

	return rv;
}
    5786:	4628      	mov	r0, r5
    5788:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    578a:	2a05      	cmp	r2, #5
    578c:	bf0c      	ite	eq
    578e:	f06f 0522 	mvneq.w	r5, #34	; 0x22
    5792:	f06f 0504 	mvnne.w	r5, #4
    5796:	2300      	movs	r3, #0
    5798:	e7d9      	b.n	574e <onoff_request+0x3a>
	parent->next = child;
    579a:	601e      	str	r6, [r3, #0]
	list->tail = node;
    579c:	6066      	str	r6, [r4, #4]
}
    579e:	e7eb      	b.n	5778 <onoff_request+0x64>
		rv = -EAGAIN;
    57a0:	f06f 050a 	mvn.w	r5, #10
    57a4:	e7f7      	b.n	5796 <onoff_request+0x82>

000057a6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    57a6:	4604      	mov	r4, r0
    57a8:	b508      	push	{r3, lr}
    57aa:	4608      	mov	r0, r1
    57ac:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    57ae:	461a      	mov	r2, r3
    57b0:	47a0      	blx	r4
	return z_impl_k_current_get();
    57b2:	f7fe fd5f 	bl	4274 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    57b6:	f7fd f8e9 	bl	298c <z_impl_k_thread_abort>

000057ba <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    57ba:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    57bc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    57c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    57c4:	bf2c      	ite	cs
    57c6:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    57ca:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    57ce:	4770      	bx	lr

000057d0 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    57d0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    57d4:	6880      	ldr	r0, [r0, #8]
    57d6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    57da:	bf2c      	ite	cs
    57dc:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    57e0:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    57e4:	4770      	bx	lr

000057e6 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    57e6:	2201      	movs	r2, #1
{
    57e8:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    57ea:	f7ff ffe6 	bl	57ba <chunk_field>
}
    57ee:	0840      	lsrs	r0, r0, #1
    57f0:	bd08      	pop	{r3, pc}

000057f2 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    57f2:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    57f4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    57f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    57fc:	d308      	bcc.n	5810 <set_chunk_used+0x1e>
		if (used) {
    57fe:	684b      	ldr	r3, [r1, #4]
    5800:	b11a      	cbz	r2, 580a <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    5802:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    5806:	604b      	str	r3, [r1, #4]
    5808:	4770      	bx	lr
    580a:	f023 0301 	bic.w	r3, r3, #1
    580e:	e7fa      	b.n	5806 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
    5810:	884b      	ldrh	r3, [r1, #2]
    5812:	b11a      	cbz	r2, 581c <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    5814:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    5818:	804b      	strh	r3, [r1, #2]
		}
	}
}
    581a:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    581c:	f023 0301 	bic.w	r3, r3, #1
    5820:	e7fa      	b.n	5818 <set_chunk_used+0x26>

00005822 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    5822:	0053      	lsls	r3, r2, #1
    5824:	2201      	movs	r2, #1
    5826:	f7ff bfd3 	b.w	57d0 <chunk_set>

0000582a <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    582a:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    582c:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    582e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    5832:	bf2c      	ite	cs
    5834:	2002      	movcs	r0, #2
    5836:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    5838:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
    583a:	fab0 f080 	clz	r0, r0
}
    583e:	f1c0 001f 	rsb	r0, r0, #31
    5842:	4770      	bx	lr

00005844 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    5844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5848:	4604      	mov	r4, r0
    584a:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
    584c:	f7ff ffcb 	bl	57e6 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
    5850:	68a3      	ldr	r3, [r4, #8]
    5852:	4601      	mov	r1, r0
    5854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    5858:	d301      	bcc.n	585e <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    585a:	2801      	cmp	r0, #1
    585c:	d035      	beq.n	58ca <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
    585e:	4620      	mov	r0, r4
    5860:	f7ff ffe3 	bl	582a <bucket_idx>
	if (b->next == 0U) {
    5864:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    5868:	6916      	ldr	r6, [r2, #16]
    586a:	b99e      	cbnz	r6, 5894 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    586c:	2301      	movs	r3, #1
    586e:	fa03 f000 	lsl.w	r0, r3, r0
    5872:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    5874:	4629      	mov	r1, r5
    5876:	4303      	orrs	r3, r0
    5878:	60e3      	str	r3, [r4, #12]
    587a:	4620      	mov	r0, r4
		b->next = c;
    587c:	6115      	str	r5, [r2, #16]
    587e:	462b      	mov	r3, r5
    5880:	2202      	movs	r2, #2
    5882:	f7ff ffa5 	bl	57d0 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    5886:	2203      	movs	r2, #3
    5888:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    588a:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
    588c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5890:	f7ff bf9e 	b.w	57d0 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    5894:	2202      	movs	r2, #2
    5896:	4631      	mov	r1, r6
    5898:	4620      	mov	r0, r4
    589a:	f7ff ff8e 	bl	57ba <chunk_field>
    589e:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    58a0:	4603      	mov	r3, r0
    58a2:	2202      	movs	r2, #2
    58a4:	4629      	mov	r1, r5
    58a6:	4620      	mov	r0, r4
    58a8:	f7ff ff92 	bl	57d0 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    58ac:	4633      	mov	r3, r6
    58ae:	2203      	movs	r2, #3
    58b0:	4629      	mov	r1, r5
    58b2:	4620      	mov	r0, r4
    58b4:	f7ff ff8c 	bl	57d0 <chunk_set>
    58b8:	2203      	movs	r2, #3
    58ba:	4639      	mov	r1, r7
    58bc:	462b      	mov	r3, r5
    58be:	4620      	mov	r0, r4
    58c0:	f7ff ff86 	bl	57d0 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    58c4:	2202      	movs	r2, #2
    58c6:	4631      	mov	r1, r6
    58c8:	e7df      	b.n	588a <free_list_add+0x46>
    58ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000058ce <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    58ce:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    58d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58d4:	bf2c      	ite	cs
    58d6:	2508      	movcs	r5, #8
    58d8:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    58da:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
    58dc:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
    58de:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    58e0:	1dcc      	adds	r4, r1, #7
    58e2:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
    58e6:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
    58e8:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
    58ec:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    58ee:	440d      	add	r5, r1
    58f0:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    58f4:	1b2d      	subs	r5, r5, r4
    58f6:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    58f8:	4629      	mov	r1, r5
    58fa:	4620      	mov	r0, r4
	h->len = buf_sz;
    58fc:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
    58fe:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    5900:	f7ff ff93 	bl	582a <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    5904:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    5906:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    5908:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    590a:	361b      	adds	r6, #27
    590c:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
    590e:	f104 0210 	add.w	r2, r4, #16
    5912:	428b      	cmp	r3, r1
    5914:	db29      	blt.n	596a <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    5916:	4632      	mov	r2, r6
    5918:	4620      	mov	r0, r4
    591a:	2100      	movs	r1, #0
    591c:	f7ff ff81 	bl	5822 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    5920:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
    5922:	4620      	mov	r0, r4
    5924:	2201      	movs	r2, #1
    5926:	2100      	movs	r1, #0
    5928:	f7ff ff63 	bl	57f2 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    592c:	463a      	mov	r2, r7
    592e:	4631      	mov	r1, r6
    5930:	f7ff ff77 	bl	5822 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    5934:	4633      	mov	r3, r6
    5936:	4631      	mov	r1, r6
    5938:	4620      	mov	r0, r4
    593a:	2200      	movs	r2, #0
    593c:	f7ff ff48 	bl	57d0 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    5940:	4629      	mov	r1, r5
    5942:	4620      	mov	r0, r4
    5944:	2200      	movs	r2, #0
    5946:	f7ff ff6c 	bl	5822 <set_chunk_size>
    594a:	463b      	mov	r3, r7
    594c:	4629      	mov	r1, r5
    594e:	4620      	mov	r0, r4
    5950:	2200      	movs	r2, #0
    5952:	f7ff ff3d 	bl	57d0 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    5956:	4629      	mov	r1, r5
    5958:	4620      	mov	r0, r4
    595a:	2201      	movs	r2, #1
    595c:	f7ff ff49 	bl	57f2 <set_chunk_used>

	free_list_add(h, chunk0_size);
    5960:	4631      	mov	r1, r6
}
    5962:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    5966:	f7ff bf6d 	b.w	5844 <free_list_add>
		h->buckets[i].next = 0;
    596a:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    596e:	3301      	adds	r3, #1
    5970:	e7cf      	b.n	5912 <sys_heap_init+0x44>

00005972 <_ldiv5>:
{
    5972:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
	uint32_t v_lo = *v;
    5976:	e9d0 2400 	ldrd	r2, r4, [r0]
	__asm__ ("" : "+r" (m));
    597a:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    597e:	fba2 bc03 	umull	fp, ip, r2, r3
    5982:	eb1b 0603 	adds.w	r6, fp, r3
    5986:	eb4c 0503 	adc.w	r5, ip, r3
	result >>= 32;
    598a:	462f      	mov	r7, r5
    598c:	2600      	movs	r6, #0
	result += (uint64_t)v_hi * m;
    598e:	fba4 4503 	umull	r4, r5, r4, r3
    5992:	eb1b 0204 	adds.w	r2, fp, r4
    5996:	eb4c 0105 	adc.w	r1, ip, r5
    599a:	19d2      	adds	r2, r2, r7
	result >>= 32;
    599c:	4632      	mov	r2, r6
	result += (uint64_t)v_hi * m;
    599e:	eb46 0101 	adc.w	r1, r6, r1
	result += (uint64_t)v_hi * m;
    59a2:	1863      	adds	r3, r4, r1
    59a4:	eb45 0202 	adc.w	r2, r5, r2
	*v = result;
    59a8:	e9c0 3200 	strd	r3, r2, [r0]
}
    59ac:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

000059b0 <_get_digit>:
	if (*digit_count > 0) {
    59b0:	680b      	ldr	r3, [r1, #0]
{
    59b2:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
    59b4:	2b00      	cmp	r3, #0
    59b6:	dd10      	ble.n	59da <_get_digit+0x2a>
		--*digit_count;
    59b8:	3b01      	subs	r3, #1
    59ba:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
    59bc:	210a      	movs	r1, #10
    59be:	6802      	ldr	r2, [r0, #0]
    59c0:	6844      	ldr	r4, [r0, #4]
    59c2:	fba2 5601 	umull	r5, r6, r2, r1
    59c6:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= (BIT64(60) - 1U);
    59ca:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
    59ce:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
    59d2:	0f31      	lsrs	r1, r6, #28
    59d4:	3130      	adds	r1, #48	; 0x30
}
    59d6:	4608      	mov	r0, r1
    59d8:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
    59da:	2130      	movs	r1, #48	; 0x30
    59dc:	e7fb      	b.n	59d6 <_get_digit+0x26>

000059de <encode_uint>:
{
    59de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59e2:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    59e4:	78d3      	ldrb	r3, [r2, #3]
{
    59e6:	4614      	mov	r4, r2
	switch (specifier) {
    59e8:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    59ea:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    59ee:	4606      	mov	r6, r0
    59f0:	460f      	mov	r7, r1
    59f2:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    59f4:	d02d      	beq.n	5a52 <encode_uint+0x74>
    59f6:	d828      	bhi.n	5a4a <encode_uint+0x6c>
		return 16;
    59f8:	2b58      	cmp	r3, #88	; 0x58
    59fa:	bf14      	ite	ne
    59fc:	250a      	movne	r5, #10
    59fe:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
    5a00:	46aa      	mov	sl, r5
    5a02:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
    5a06:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    5a0a:	4652      	mov	r2, sl
    5a0c:	465b      	mov	r3, fp
    5a0e:	4630      	mov	r0, r6
    5a10:	4639      	mov	r1, r7
    5a12:	f7fa fc13 	bl	23c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5a16:	2a09      	cmp	r2, #9
    5a18:	b2d3      	uxtb	r3, r2
    5a1a:	d81f      	bhi.n	5a5c <encode_uint+0x7e>
    5a1c:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    5a1e:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5a20:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    5a22:	bf08      	it	eq
    5a24:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5a26:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    5a2a:	d301      	bcc.n	5a30 <encode_uint+0x52>
    5a2c:	45c8      	cmp	r8, r9
    5a2e:	d812      	bhi.n	5a56 <encode_uint+0x78>
	if (conv->flag_hash) {
    5a30:	7823      	ldrb	r3, [r4, #0]
    5a32:	069b      	lsls	r3, r3, #26
    5a34:	d505      	bpl.n	5a42 <encode_uint+0x64>
		if (radix == 8) {
    5a36:	2d08      	cmp	r5, #8
    5a38:	d116      	bne.n	5a68 <encode_uint+0x8a>
			conv->altform_0 = true;
    5a3a:	78a3      	ldrb	r3, [r4, #2]
    5a3c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    5a40:	70a3      	strb	r3, [r4, #2]
}
    5a42:	4640      	mov	r0, r8
    5a44:	b003      	add	sp, #12
    5a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    5a4a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    5a4e:	2b70      	cmp	r3, #112	; 0x70
    5a50:	e7d3      	b.n	59fa <encode_uint+0x1c>
	switch (specifier) {
    5a52:	2508      	movs	r5, #8
    5a54:	e7d4      	b.n	5a00 <encode_uint+0x22>
		value /= radix;
    5a56:	4606      	mov	r6, r0
    5a58:	460f      	mov	r7, r1
    5a5a:	e7d6      	b.n	5a0a <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5a5c:	9a01      	ldr	r2, [sp, #4]
    5a5e:	2a19      	cmp	r2, #25
    5a60:	bf94      	ite	ls
    5a62:	3337      	addls	r3, #55	; 0x37
    5a64:	3357      	addhi	r3, #87	; 0x57
    5a66:	e7da      	b.n	5a1e <encode_uint+0x40>
		} else if (radix == 16) {
    5a68:	2d10      	cmp	r5, #16
    5a6a:	d1ea      	bne.n	5a42 <encode_uint+0x64>
			conv->altform_0c = true;
    5a6c:	78a3      	ldrb	r3, [r4, #2]
    5a6e:	f043 0310 	orr.w	r3, r3, #16
    5a72:	e7e5      	b.n	5a40 <encode_uint+0x62>

00005a74 <outs>:
{
    5a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5a78:	4680      	mov	r8, r0
    5a7a:	4689      	mov	r9, r1
    5a7c:	4616      	mov	r6, r2
    5a7e:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5a80:	4615      	mov	r5, r2
    5a82:	42bd      	cmp	r5, r7
    5a84:	eba5 0406 	sub.w	r4, r5, r6
    5a88:	d305      	bcc.n	5a96 <outs+0x22>
    5a8a:	b10f      	cbz	r7, 5a90 <outs+0x1c>
	return (int)count;
    5a8c:	4620      	mov	r0, r4
    5a8e:	e008      	b.n	5aa2 <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5a90:	782b      	ldrb	r3, [r5, #0]
    5a92:	2b00      	cmp	r3, #0
    5a94:	d0fa      	beq.n	5a8c <outs+0x18>
		int rc = out((int)*sp++, ctx);
    5a96:	4649      	mov	r1, r9
    5a98:	f815 0b01 	ldrb.w	r0, [r5], #1
    5a9c:	47c0      	blx	r8
		if (rc < 0) {
    5a9e:	2800      	cmp	r0, #0
    5aa0:	daef      	bge.n	5a82 <outs+0xe>
}
    5aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00005aa6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5aa6:	4770      	bx	lr

00005aa8 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    5aa8:	f7fd bbf2 	b.w	3290 <SystemInit>

00005aac <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5aac:	b2cb      	uxtb	r3, r1
    5aae:	210c      	movs	r1, #12
    5ab0:	68c2      	ldr	r2, [r0, #12]
    5ab2:	fb03 2101 	mla	r1, r3, r1, r2
    5ab6:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    5ab8:	f000 0007 	and.w	r0, r0, #7
    5abc:	4770      	bx	lr

00005abe <set_off_state>:
	__asm__ volatile(
    5abe:	f04f 0320 	mov.w	r3, #32
    5ac2:	f3ef 8211 	mrs	r2, BASEPRI
    5ac6:	f383 8811 	msr	BASEPRI, r3
    5aca:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5ace:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5ad0:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    5ad4:	d001      	beq.n	5ada <set_off_state+0x1c>
    5ad6:	428b      	cmp	r3, r1
    5ad8:	d107      	bne.n	5aea <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    5ada:	2301      	movs	r3, #1
    5adc:	6003      	str	r3, [r0, #0]
	int err = 0;
    5ade:	2000      	movs	r0, #0
	__asm__ volatile(
    5ae0:	f382 8811 	msr	BASEPRI, r2
    5ae4:	f3bf 8f6f 	isb	sy
}
    5ae8:	4770      	bx	lr
		err = -EPERM;
    5aea:	f04f 30ff 	mov.w	r0, #4294967295
    5aee:	e7f7      	b.n	5ae0 <set_off_state+0x22>

00005af0 <set_starting_state>:
{
    5af0:	b510      	push	{r4, lr}
	__asm__ volatile(
    5af2:	f04f 0320 	mov.w	r3, #32
    5af6:	f3ef 8211 	mrs	r2, BASEPRI
    5afa:	f383 8811 	msr	BASEPRI, r3
    5afe:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5b02:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5b04:	f003 0407 	and.w	r4, r3, #7
    5b08:	2c01      	cmp	r4, #1
    5b0a:	d106      	bne.n	5b1a <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5b0c:	6001      	str	r1, [r0, #0]
	int err = 0;
    5b0e:	2000      	movs	r0, #0
	__asm__ volatile(
    5b10:	f382 8811 	msr	BASEPRI, r2
    5b14:	f3bf 8f6f 	isb	sy
}
    5b18:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    5b1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    5b1e:	428b      	cmp	r3, r1
		err = -EALREADY;
    5b20:	bf14      	ite	ne
    5b22:	f04f 30ff 	movne.w	r0, #4294967295
    5b26:	f06f 0044 	mvneq.w	r0, #68	; 0x44
    5b2a:	e7f1      	b.n	5b10 <set_starting_state+0x20>

00005b2c <set_on_state>:
	__asm__ volatile(
    5b2c:	f04f 0320 	mov.w	r3, #32
    5b30:	f3ef 8211 	mrs	r2, BASEPRI
    5b34:	f383 8811 	msr	BASEPRI, r3
    5b38:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5b3c:	6803      	ldr	r3, [r0, #0]
    5b3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5b42:	f043 0302 	orr.w	r3, r3, #2
    5b46:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    5b48:	f382 8811 	msr	BASEPRI, r2
    5b4c:	f3bf 8f6f 	isb	sy
}
    5b50:	4770      	bx	lr

00005b52 <onoff_started_callback>:
{
    5b52:	b410      	push	{r4}
	notify(mgr, 0);
    5b54:	241c      	movs	r4, #28
	return &data->mgr[type];
    5b56:	68c0      	ldr	r0, [r0, #12]
    5b58:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    5b5a:	fb03 0004 	mla	r0, r3, r4, r0
    5b5e:	2100      	movs	r1, #0
}
    5b60:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
    5b64:	4710      	bx	r2

00005b66 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    5b66:	2000      	movs	r0, #0
    5b68:	f7fd bc5c 	b.w	3424 <nrfx_clock_start>

00005b6c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5b6c:	2000      	movs	r0, #0
    5b6e:	f7fd bc8b 	b.w	3488 <nrfx_clock_stop>

00005b72 <blocking_start_callback>:
{
    5b72:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5b74:	f7fe bb84 	b.w	4280 <z_impl_k_sem_give>

00005b78 <api_stop>:
{
    5b78:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
    5b7a:	240c      	movs	r4, #12
    5b7c:	b2c9      	uxtb	r1, r1
    5b7e:	434c      	muls	r4, r1
{
    5b80:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    5b82:	68c0      	ldr	r0, [r0, #12]
    5b84:	f104 0340 	add.w	r3, r4, #64	; 0x40
    5b88:	2180      	movs	r1, #128	; 0x80
    5b8a:	4418      	add	r0, r3
    5b8c:	f7ff ff97 	bl	5abe <set_off_state>
	if (err < 0) {
    5b90:	2800      	cmp	r0, #0
    5b92:	db04      	blt.n	5b9e <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    5b94:	6869      	ldr	r1, [r5, #4]
    5b96:	440c      	add	r4, r1
    5b98:	6863      	ldr	r3, [r4, #4]
    5b9a:	4798      	blx	r3
	return 0;
    5b9c:	2000      	movs	r0, #0
}
    5b9e:	bd38      	pop	{r3, r4, r5, pc}

00005ba0 <api_start>:
{
    5ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    5ba4:	240c      	movs	r4, #12
    5ba6:	b2c9      	uxtb	r1, r1
    5ba8:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5baa:	68c5      	ldr	r5, [r0, #12]
{
    5bac:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    5bae:	f104 0040 	add.w	r0, r4, #64	; 0x40
    5bb2:	2180      	movs	r1, #128	; 0x80
    5bb4:	4428      	add	r0, r5
{
    5bb6:	4690      	mov	r8, r2
    5bb8:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
    5bba:	f7ff ff99 	bl	5af0 <set_starting_state>
	if (err < 0) {
    5bbe:	2800      	cmp	r0, #0
    5bc0:	db06      	blt.n	5bd0 <api_start+0x30>
	subdata->cb = cb;
    5bc2:	4425      	add	r5, r4
	subdata->user_data = user_data;
    5bc4:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    5bc8:	6873      	ldr	r3, [r6, #4]
    5bca:	591b      	ldr	r3, [r3, r4]
    5bcc:	4798      	blx	r3
	return 0;
    5bce:	2000      	movs	r0, #0
}
    5bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005bd4 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    5bd4:	4770      	bx	lr

00005bd6 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    5bd6:	4770      	bx	lr

00005bd8 <sys_clock_disable>:
    5bd8:	4770      	bx	lr

00005bda <spm_secure_services_init>:
	mbedtls_platform_context platform_ctx = {0};
    5bda:	2300      	movs	r3, #0
{
    5bdc:	b507      	push	{r0, r1, r2, lr}
	err = mbedtls_platform_setup(&platform_ctx);
    5bde:	a801      	add	r0, sp, #4
	mbedtls_platform_context platform_ctx = {0};
    5be0:	f88d 3004 	strb.w	r3, [sp, #4]
	err = mbedtls_platform_setup(&platform_ctx);
    5be4:	f7fe fee0 	bl	49a8 <mbedtls_platform_setup>
}
    5be8:	b003      	add	sp, #12
    5bea:	f85d fb04 	ldr.w	pc, [sp], #4

00005bee <__acle_se_spm_request_random_number_nse>:
{
    5bee:	b570      	push	{r4, r5, r6, lr}
    5bf0:	4606      	mov	r6, r0
    5bf2:	460c      	mov	r4, r1
    5bf4:	4615      	mov	r5, r2
	return arm_cmse_addr_is_secure(ptr) == 1;
    5bf6:	f000 f895 	bl	5d24 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)output) ||
    5bfa:	2801      	cmp	r0, #1
    5bfc:	d136      	bne.n	5c6c <__acle_se_spm_request_random_number_nse+0x7e>
		return -EINVAL;
    5bfe:	f06f 0015 	mvn.w	r0, #21
}
    5c02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5c06:	4671      	mov	r1, lr
    5c08:	4672      	mov	r2, lr
    5c0a:	4673      	mov	r3, lr
    5c0c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    5c10:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    5c14:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    5c18:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    5c1c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    5c20:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    5c24:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    5c28:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    5c2c:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    5c30:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    5c34:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    5c38:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    5c3c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    5c40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    5c44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5c48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    5c4c:	f38e 8c00 	msr	CPSR_fs, lr
    5c50:	b410      	push	{r4}
    5c52:	eef1 ca10 	vmrs	ip, fpscr
    5c56:	f64f 7460 	movw	r4, #65376	; 0xff60
    5c5a:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    5c5e:	ea0c 0c04 	and.w	ip, ip, r4
    5c62:	eee1 ca10 	vmsr	fpscr, ip
    5c66:	bc10      	pop	{r4}
    5c68:	46f4      	mov	ip, lr
    5c6a:	4774      	bxns	lr
	return arm_cmse_addr_is_secure(ptr) == 1;
    5c6c:	4628      	mov	r0, r5
    5c6e:	f000 f859 	bl	5d24 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)output) ||
    5c72:	2801      	cmp	r0, #1
    5c74:	d0c3      	beq.n	5bfe <__acle_se_spm_request_random_number_nse+0x10>
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    5c76:	2c90      	cmp	r4, #144	; 0x90
    5c78:	d1c1      	bne.n	5bfe <__acle_se_spm_request_random_number_nse+0x10>
	err = mbedtls_hardware_poll(NULL, output, len, olen);
    5c7a:	462b      	mov	r3, r5
    5c7c:	4622      	mov	r2, r4
    5c7e:	4631      	mov	r1, r6
    5c80:	2000      	movs	r0, #0
    5c82:	f7fe fe9d 	bl	49c0 <mbedtls_hardware_poll>
	return err;
    5c86:	e7bc      	b.n	5c02 <__acle_se_spm_request_random_number_nse+0x14>

00005c88 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    5c88:	2000      	movs	r0, #0
    5c8a:	f7fb bc57 	b.w	153c <sys_reboot>

00005c8e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5c8e:	2100      	movs	r1, #0
    5c90:	2001      	movs	r0, #1
    5c92:	f7fc bb1b 	b.w	22cc <z_arm_fatal_error>

00005c96 <irq_target_state_set>:
irq_target_state_t irq_target_state_set(unsigned int irq,
	irq_target_state_t irq_target_state)
{
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
    5c96:	b243      	sxtb	r3, r0
    5c98:	b9c9      	cbnz	r1, 5cce <irq_target_state_set+0x38>
  if ((int32_t)(IRQn) >= 0)
    5c9a:	2b00      	cmp	r3, #0
    5c9c:	db15      	blt.n	5cca <irq_target_state_set+0x34>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    5c9e:	2101      	movs	r1, #1
    5ca0:	095b      	lsrs	r3, r3, #5
    5ca2:	009b      	lsls	r3, r3, #2
    5ca4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    5ca8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    5cac:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
    5cb0:	f000 001f 	and.w	r0, r0, #31
    5cb4:	4081      	lsls	r1, r0
    5cb6:	ea22 0201 	bic.w	r2, r2, r1
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    5cba:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    5cbe:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    5cc2:	40c1      	lsrs	r1, r0
    5cc4:	f001 0101 	and.w	r1, r1, #1
	} else {
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
    5cc8:	b2c9      	uxtb	r1, r1
		return IRQ_TARGET_STATE_NON_SECURE;
	} else {
		return IRQ_TARGET_STATE_SECURE;
	}
}
    5cca:	4608      	mov	r0, r1
    5ccc:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    5cce:	2b00      	cmp	r3, #0
    5cd0:	db0d      	blt.n	5cee <irq_target_state_set+0x58>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    5cd2:	2201      	movs	r2, #1
    5cd4:	095b      	lsrs	r3, r3, #5
    5cd6:	009b      	lsls	r3, r3, #2
    5cd8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    5cdc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    5ce0:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    5ce4:	f000 001f 	and.w	r0, r0, #31
    5ce8:	4082      	lsls	r2, r0
    5cea:	430a      	orrs	r2, r1
    5cec:	e7e5      	b.n	5cba <irq_target_state_set+0x24>
		return IRQ_TARGET_STATE_SECURE;
    5cee:	2100      	movs	r1, #0
    5cf0:	e7eb      	b.n	5cca <irq_target_state_set+0x34>

00005cf2 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    5cf2:	6e83      	ldr	r3, [r0, #104]	; 0x68
    5cf4:	f383 880b 	msr	PSPLIM, r3
}
    5cf8:	4770      	bx	lr

00005cfa <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    5cfa:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    5cfc:	6800      	ldr	r0, [r0, #0]
    5cfe:	f7fc bae5 	b.w	22cc <z_arm_fatal_error>

00005d02 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    5d02:	b508      	push	{r3, lr}
	handler();
    5d04:	f7fc fb10 	bl	2328 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    5d08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    5d0c:	f7fc bddc 	b.w	28c8 <z_arm_exc_exit>

00005d10 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    5d10:	e840 f000 	tt	r0, r0
    5d14:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    5d16:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    5d1a:	bf14      	ite	ne
    5d1c:	4618      	movne	r0, r3
    5d1e:	f06f 0015 	mvneq.w	r0, #21
    5d22:	4770      	bx	lr

00005d24 <arm_cmse_addr_is_secure>:
    5d24:	e840 f000 	tt	r0, r0
int arm_cmse_addr_is_secure(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	return addr_info.flags.secure;
}
    5d28:	f3c0 5080 	ubfx	r0, r0, #22, #1
    5d2c:	4770      	bx	lr

00005d2e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    5d2e:	4603      	mov	r3, r0
	size_t n = 0;
    5d30:	2000      	movs	r0, #0

	while (*s != '\0') {
    5d32:	5c1a      	ldrb	r2, [r3, r0]
    5d34:	b902      	cbnz	r2, 5d38 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    5d36:	4770      	bx	lr
		n++;
    5d38:	3001      	adds	r0, #1
    5d3a:	e7fa      	b.n	5d32 <strlen+0x4>

00005d3c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    5d3c:	4603      	mov	r3, r0
	size_t n = 0;
    5d3e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    5d40:	5c1a      	ldrb	r2, [r3, r0]
    5d42:	b10a      	cbz	r2, 5d48 <strnlen+0xc>
    5d44:	4288      	cmp	r0, r1
    5d46:	d100      	bne.n	5d4a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    5d48:	4770      	bx	lr
		n++;
    5d4a:	3001      	adds	r0, #1
    5d4c:	e7f8      	b.n	5d40 <strnlen+0x4>

00005d4e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    5d4e:	3801      	subs	r0, #1
    5d50:	3901      	subs	r1, #1
    5d52:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    5d56:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    5d5a:	4293      	cmp	r3, r2
    5d5c:	d101      	bne.n	5d62 <strcmp+0x14>
    5d5e:	2b00      	cmp	r3, #0
    5d60:	d1f7      	bne.n	5d52 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    5d62:	1a98      	subs	r0, r3, r2
    5d64:	4770      	bx	lr

00005d66 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    5d66:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    5d68:	b15a      	cbz	r2, 5d82 <memcmp+0x1c>
    5d6a:	3901      	subs	r1, #1
    5d6c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    5d6e:	f810 2b01 	ldrb.w	r2, [r0], #1
    5d72:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    5d76:	42a0      	cmp	r0, r4
    5d78:	d001      	beq.n	5d7e <memcmp+0x18>
    5d7a:	429a      	cmp	r2, r3
    5d7c:	d0f7      	beq.n	5d6e <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    5d7e:	1ad0      	subs	r0, r2, r3
}
    5d80:	bd10      	pop	{r4, pc}
		return 0;
    5d82:	4610      	mov	r0, r2
    5d84:	e7fc      	b.n	5d80 <memcmp+0x1a>

00005d86 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    5d86:	1a43      	subs	r3, r0, r1
    5d88:	4293      	cmp	r3, r2
{
    5d8a:	b510      	push	{r4, lr}
    5d8c:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    5d90:	d308      	bcc.n	5da4 <memmove+0x1e>
	char *dest = d;
    5d92:	4602      	mov	r2, r0
    5d94:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    5d96:	429a      	cmp	r2, r3
    5d98:	d00b      	beq.n	5db2 <memmove+0x2c>
			*dest = *src;
    5d9a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    5d9e:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    5da2:	e7f8      	b.n	5d96 <memmove+0x10>
    5da4:	440a      	add	r2, r1
			dest[n] = src[n];
    5da6:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    5daa:	428a      	cmp	r2, r1
			dest[n] = src[n];
    5dac:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    5db0:	d1f9      	bne.n	5da6 <memmove+0x20>
		}
	}

	return d;
}
    5db2:	bd10      	pop	{r4, pc}

00005db4 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    5db4:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    5db6:	ea81 0400 	eor.w	r4, r1, r0
    5dba:	07a5      	lsls	r5, r4, #30
    5dbc:	4603      	mov	r3, r0
    5dbe:	d00b      	beq.n	5dd8 <memcpy+0x24>
    5dc0:	3b01      	subs	r3, #1
    5dc2:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    5dc4:	4291      	cmp	r1, r2
    5dc6:	d11b      	bne.n	5e00 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    5dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    5dca:	2a00      	cmp	r2, #0
    5dcc:	d0fc      	beq.n	5dc8 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    5dce:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    5dd2:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    5dd4:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    5dd8:	079c      	lsls	r4, r3, #30
    5dda:	d1f6      	bne.n	5dca <memcpy+0x16>
    5ddc:	f022 0403 	bic.w	r4, r2, #3
    5de0:	1f1d      	subs	r5, r3, #4
    5de2:	0896      	lsrs	r6, r2, #2
    5de4:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    5de6:	42b9      	cmp	r1, r7
    5de8:	d105      	bne.n	5df6 <memcpy+0x42>
    5dea:	f06f 0503 	mvn.w	r5, #3
    5dee:	4423      	add	r3, r4
    5df0:	fb05 2206 	mla	r2, r5, r6, r2
    5df4:	e7e4      	b.n	5dc0 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    5df6:	f851 cb04 	ldr.w	ip, [r1], #4
    5dfa:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    5dfe:	e7f2      	b.n	5de6 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    5e00:	f811 4b01 	ldrb.w	r4, [r1], #1
    5e04:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    5e08:	e7dc      	b.n	5dc4 <memcpy+0x10>

00005e0a <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    5e0a:	4603      	mov	r3, r0
{
    5e0c:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    5e0e:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    5e10:	079c      	lsls	r4, r3, #30
    5e12:	d111      	bne.n	5e38 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    5e14:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    5e18:	f022 0603 	bic.w	r6, r2, #3
    5e1c:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    5e20:	441e      	add	r6, r3
    5e22:	0894      	lsrs	r4, r2, #2
    5e24:	42b3      	cmp	r3, r6
    5e26:	d10d      	bne.n	5e44 <memset+0x3a>
    5e28:	f06f 0503 	mvn.w	r5, #3
    5e2c:	fb05 2204 	mla	r2, r5, r4, r2
    5e30:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    5e32:	4293      	cmp	r3, r2
    5e34:	d109      	bne.n	5e4a <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    5e36:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    5e38:	2a00      	cmp	r2, #0
    5e3a:	d0fc      	beq.n	5e36 <memset+0x2c>
		*(d_byte++) = c_byte;
    5e3c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5e40:	3a01      	subs	r2, #1
    5e42:	e7e5      	b.n	5e10 <memset+0x6>
		*(d_word++) = c_word;
    5e44:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    5e48:	e7ec      	b.n	5e24 <memset+0x1a>
		*(d_byte++) = c_byte;
    5e4a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5e4e:	e7f0      	b.n	5e32 <memset+0x28>

00005e50 <_stdout_hook_default>:
}
    5e50:	f04f 30ff 	mov.w	r0, #4294967295
    5e54:	4770      	bx	lr

00005e56 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    5e56:	6843      	ldr	r3, [r0, #4]
    5e58:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    5e5a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5e5e:	05d2      	lsls	r2, r2, #23
    5e60:	d518      	bpl.n	5e94 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5e62:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    5e66:	b1aa      	cbz	r2, 5e94 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    5e68:	f04f 0120 	mov.w	r1, #32
    5e6c:	f3ef 8211 	mrs	r2, BASEPRI
    5e70:	f381 8811 	msr	BASEPRI, r1
    5e74:	f3bf 8f6f 	isb	sy
    5e78:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5e7c:	b131      	cbz	r1, 5e8c <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e7e:	2100      	movs	r1, #0
    5e80:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    5e84:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e88:	2101      	movs	r1, #1
    5e8a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    5e8c:	f382 8811 	msr	BASEPRI, r2
    5e90:	f3bf 8f6f 	isb	sy
}
    5e94:	4770      	bx	lr

00005e96 <uarte_nrfx_config_get>:
{
    5e96:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    5e98:	68c2      	ldr	r2, [r0, #12]
    5e9a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    5e9e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    5ea2:	2000      	movs	r0, #0
    5ea4:	4770      	bx	lr

00005ea6 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    5ea6:	6843      	ldr	r3, [r0, #4]
    5ea8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5eaa:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5eae:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5eb2:	4770      	bx	lr

00005eb4 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    5eb4:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    5eb6:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5eb8:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5ebc:	b938      	cbnz	r0, 5ece <is_tx_ready+0x1a>
    5ebe:	7992      	ldrb	r2, [r2, #6]
    5ec0:	b932      	cbnz	r2, 5ed0 <is_tx_ready+0x1c>
    5ec2:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    5ec6:	3800      	subs	r0, #0
    5ec8:	bf18      	it	ne
    5eca:	2001      	movne	r0, #1
    5ecc:	4770      	bx	lr
    5ece:	2001      	movs	r0, #1
}
    5ed0:	4770      	bx	lr

00005ed2 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    5ed2:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    5ed4:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    5ed6:	681b      	ldr	r3, [r3, #0]
    5ed8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5edc:	b148      	cbz	r0, 5ef2 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5ede:	2000      	movs	r0, #0
	*c = data->rx_data;
    5ee0:	7c52      	ldrb	r2, [r2, #17]
    5ee2:	700a      	strb	r2, [r1, #0]
    5ee4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5ee8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5eec:	2201      	movs	r2, #1
    5eee:	601a      	str	r2, [r3, #0]
	return 0;
    5ef0:	4770      	bx	lr
		return -1;
    5ef2:	f04f 30ff 	mov.w	r0, #4294967295
}
    5ef6:	4770      	bx	lr

00005ef8 <hw_cc3xx_init>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init(const struct device *dev)
{
    5ef8:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    5efa:	f7fc f843 	bl	1f84 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    5efe:	f7fc f8ed 	bl	20dc <nrf_cc3xx_platform_mutex_init>
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif
	return res;
}
    5f02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    5f06:	f7fe be11 	b.w	4b2c <nrf_cc3xx_platform_init_no_rng>

00005f0a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    5f0a:	4700      	bx	r0

00005f0c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    5f0c:	f000 b8e1 	b.w	60d2 <z_impl_k_busy_wait>

00005f10 <nrfx_clock_enable>:
{
    5f10:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5f12:	2005      	movs	r0, #5
    5f14:	f7fc f95e 	bl	21d4 <arch_irq_is_enabled>
    5f18:	b920      	cbnz	r0, 5f24 <nrfx_clock_enable+0x14>
}
    5f1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5f1e:	2005      	movs	r0, #5
    5f20:	f7fc b948 	b.w	21b4 <arch_irq_enable>
    5f24:	bd08      	pop	{r3, pc}

00005f26 <z_pm_save_idle_exit>:
	z_clock_idle_exit();
    5f26:	f7ff be56 	b.w	5bd6 <z_clock_idle_exit>

00005f2a <k_mem_slab_init>:
{
    5f2a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    5f2c:	2400      	movs	r4, #0
    5f2e:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5f30:	ea41 0402 	orr.w	r4, r1, r2
    5f34:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    5f38:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    5f3c:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5f3e:	d10c      	bne.n	5f5a <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    5f40:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    5f42:	42a3      	cmp	r3, r4
    5f44:	d103      	bne.n	5f4e <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    5f46:	e9c0 0000 	strd	r0, r0, [r0]
}
    5f4a:	2000      	movs	r0, #0
}
    5f4c:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    5f4e:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    5f50:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    5f52:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    5f54:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    5f56:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    5f58:	e7f3      	b.n	5f42 <k_mem_slab_init+0x18>
		return -EINVAL;
    5f5a:	f06f 0015 	mvn.w	r0, #21
	return rc;
    5f5e:	e7f5      	b.n	5f4c <k_mem_slab_init+0x22>

00005f60 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
    5f60:	2300      	movs	r3, #0
    5f62:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
    5f66:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    5f6a:	4618      	mov	r0, r3
    5f6c:	4770      	bx	lr

00005f6e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5f6e:	4603      	mov	r3, r0
    5f70:	b920      	cbnz	r0, 5f7c <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5f72:	f3ef 8205 	mrs	r2, IPSR
    5f76:	b90a      	cbnz	r2, 5f7c <z_reschedule_irqlock+0xe>
    5f78:	f7fc b8c6 	b.w	2108 <arch_swap>
    5f7c:	f383 8811 	msr	BASEPRI, r3
    5f80:	f3bf 8f6f 	isb	sy
}
    5f84:	4770      	bx	lr

00005f86 <z_reschedule_unlocked>:
	__asm__ volatile(
    5f86:	f04f 0320 	mov.w	r3, #32
    5f8a:	f3ef 8011 	mrs	r0, BASEPRI
    5f8e:	f383 8811 	msr	BASEPRI, r3
    5f92:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    5f96:	f7ff bfea 	b.w	5f6e <z_reschedule_irqlock>

00005f9a <unpend_thread_no_timeout>:
{
    5f9a:	4601      	mov	r1, r0
    5f9c:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    5f9e:	6880      	ldr	r0, [r0, #8]
    5fa0:	f7fd fe38 	bl	3c14 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5fa4:	7b4b      	ldrb	r3, [r1, #13]
    5fa6:	f023 0302 	bic.w	r3, r3, #2
    5faa:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
    5fac:	2300      	movs	r3, #0
    5fae:	608b      	str	r3, [r1, #8]
}
    5fb0:	bd08      	pop	{r3, pc}

00005fb2 <z_priq_dumb_best>:
	return list->head == list;
    5fb2:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5fb4:	4298      	cmp	r0, r3
    5fb6:	d004      	beq.n	5fc2 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    5fb8:	2b00      	cmp	r3, #0
    5fba:	bf38      	it	cc
    5fbc:	2300      	movcc	r3, #0
    5fbe:	4618      	mov	r0, r3
    5fc0:	4770      	bx	lr
	struct k_thread *thread = NULL;
    5fc2:	2000      	movs	r0, #0
}
    5fc4:	4770      	bx	lr

00005fc6 <z_ready_thread>:
{
    5fc6:	b510      	push	{r4, lr}
    5fc8:	f04f 0320 	mov.w	r3, #32
    5fcc:	f3ef 8411 	mrs	r4, BASEPRI
    5fd0:	f383 8811 	msr	BASEPRI, r3
    5fd4:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    5fd8:	f7fd fe76 	bl	3cc8 <ready_thread>
	__asm__ volatile(
    5fdc:	f384 8811 	msr	BASEPRI, r4
    5fe0:	f3bf 8f6f 	isb	sy
}
    5fe4:	bd10      	pop	{r4, pc}

00005fe6 <z_thread_timeout>:
{
    5fe6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5fe8:	4604      	mov	r4, r0
	__asm__ volatile(
    5fea:	f04f 0320 	mov.w	r3, #32
    5fee:	f3ef 8511 	mrs	r5, BASEPRI
    5ff2:	f383 8811 	msr	BASEPRI, r3
    5ff6:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    5ffa:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
    5ffe:	3818      	subs	r0, #24
		if (thread->base.pended_on != NULL) {
    6000:	b11b      	cbz	r3, 600a <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
    6002:	9001      	str	r0, [sp, #4]
    6004:	f7ff ffc9 	bl	5f9a <unpend_thread_no_timeout>
    6008:	9801      	ldr	r0, [sp, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    600a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    600e:	f023 0314 	bic.w	r3, r3, #20
    6012:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
    6016:	f7fd fe57 	bl	3cc8 <ready_thread>
	__asm__ volatile(
    601a:	f385 8811 	msr	BASEPRI, r5
    601e:	f3bf 8f6f 	isb	sy
}
    6022:	b003      	add	sp, #12
    6024:	bd30      	pop	{r4, r5, pc}

00006026 <add_to_waitq_locked>:
{
    6026:	b538      	push	{r3, r4, r5, lr}
    6028:	4604      	mov	r4, r0
    602a:	460d      	mov	r5, r1
	unready_thread(thread);
    602c:	f7fd ffd4 	bl	3fd8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6030:	7b63      	ldrb	r3, [r4, #13]
    6032:	f043 0302 	orr.w	r3, r3, #2
    6036:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    6038:	b1c5      	cbz	r5, 606c <add_to_waitq_locked+0x46>
	return list->head == list;
    603a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    603c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    603e:	429d      	cmp	r5, r3
    6040:	bf08      	it	eq
    6042:	2300      	moveq	r3, #0
    6044:	2b00      	cmp	r3, #0
    6046:	bf38      	it	cc
    6048:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    604a:	b183      	cbz	r3, 606e <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
    604c:	f994 100e 	ldrsb.w	r1, [r4, #14]
    6050:	f993 200e 	ldrsb.w	r2, [r3, #14]
    6054:	4291      	cmp	r1, r2
    6056:	db04      	blt.n	6062 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
    6058:	686a      	ldr	r2, [r5, #4]
    605a:	429a      	cmp	r2, r3
    605c:	d007      	beq.n	606e <add_to_waitq_locked+0x48>
    605e:	681b      	ldr	r3, [r3, #0]
    6060:	e7f3      	b.n	604a <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
    6062:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6064:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    6068:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    606a:	605c      	str	r4, [r3, #4]
}
    606c:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
    606e:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    6070:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    6072:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    6074:	686b      	ldr	r3, [r5, #4]
    6076:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6078:	606c      	str	r4, [r5, #4]
    607a:	e7f7      	b.n	606c <add_to_waitq_locked+0x46>

0000607c <z_unpend_first_thread>:
{
    607c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    607e:	f04f 0320 	mov.w	r3, #32
    6082:	f3ef 8211 	mrs	r2, BASEPRI
    6086:	f383 8811 	msr	BASEPRI, r3
    608a:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    608e:	f7ff ff90 	bl	5fb2 <z_priq_dumb_best>
    6092:	4604      	mov	r4, r0
	__asm__ volatile(
    6094:	f382 8811 	msr	BASEPRI, r2
    6098:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    609c:	b188      	cbz	r0, 60c2 <z_unpend_first_thread+0x46>
	__asm__ volatile(
    609e:	f04f 0320 	mov.w	r3, #32
    60a2:	f3ef 8511 	mrs	r5, BASEPRI
    60a6:	f383 8811 	msr	BASEPRI, r3
    60aa:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    60ae:	f7ff ff74 	bl	5f9a <unpend_thread_no_timeout>
	__asm__ volatile(
    60b2:	f385 8811 	msr	BASEPRI, r5
    60b6:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    60ba:	f104 0018 	add.w	r0, r4, #24
    60be:	f000 f80e 	bl	60de <z_abort_timeout>
}
    60c2:	4620      	mov	r0, r4
    60c4:	bd38      	pop	{r3, r4, r5, pc}

000060c6 <k_is_in_isr>:
    60c6:	f3ef 8005 	mrs	r0, IPSR
}
    60ca:	3800      	subs	r0, #0
    60cc:	bf18      	it	ne
    60ce:	2001      	movne	r0, #1
    60d0:	4770      	bx	lr

000060d2 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
    60d2:	b108      	cbz	r0, 60d8 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
    60d4:	f7fb ba28 	b.w	1528 <arch_busy_wait>
}
    60d8:	4770      	bx	lr

000060da <k_thread_name_get>:
}
    60da:	2000      	movs	r0, #0
    60dc:	4770      	bx	lr

000060de <z_abort_timeout>:
{
    60de:	b510      	push	{r4, lr}
	__asm__ volatile(
    60e0:	f04f 0220 	mov.w	r2, #32
    60e4:	f3ef 8411 	mrs	r4, BASEPRI
    60e8:	f382 8811 	msr	BASEPRI, r2
    60ec:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    60f0:	6803      	ldr	r3, [r0, #0]
    60f2:	b13b      	cbz	r3, 6104 <z_abort_timeout+0x26>
			remove_timeout(to);
    60f4:	f7fe f9e0 	bl	44b8 <remove_timeout>
			ret = 0;
    60f8:	2000      	movs	r0, #0
	__asm__ volatile(
    60fa:	f384 8811 	msr	BASEPRI, r4
    60fe:	f3bf 8f6f 	isb	sy
}
    6102:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    6104:	f06f 0015 	mvn.w	r0, #21
    6108:	e7f7      	b.n	60fa <z_abort_timeout+0x1c>

0000610a <z_get_next_timeout_expiry>:
{
    610a:	b510      	push	{r4, lr}
	__asm__ volatile(
    610c:	f04f 0320 	mov.w	r3, #32
    6110:	f3ef 8411 	mrs	r4, BASEPRI
    6114:	f383 8811 	msr	BASEPRI, r3
    6118:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    611c:	f7fe f9e6 	bl	44ec <next_timeout>
	__asm__ volatile(
    6120:	f384 8811 	msr	BASEPRI, r4
    6124:	f3bf 8f6f 	isb	sy
}
    6128:	bd10      	pop	{r4, pc}

0000612a <z_set_timeout_expiry>:
{
    612a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    612c:	4604      	mov	r4, r0
    612e:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
    6130:	f04f 0320 	mov.w	r3, #32
    6134:	f3ef 8511 	mrs	r5, BASEPRI
    6138:	f383 8811 	msr	BASEPRI, r3
    613c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    6140:	f7fe f9d4 	bl	44ec <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6144:	2801      	cmp	r0, #1
    6146:	dd05      	ble.n	6154 <z_set_timeout_expiry+0x2a>
    6148:	42a0      	cmp	r0, r4
    614a:	9901      	ldr	r1, [sp, #4]
    614c:	dd02      	ble.n	6154 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
    614e:	4620      	mov	r0, r4
    6150:	f7fb fc6c 	bl	1a2c <z_clock_set_timeout>
	__asm__ volatile(
    6154:	f385 8811 	msr	BASEPRI, r5
    6158:	f3bf 8f6f 	isb	sy
}
    615c:	b003      	add	sp, #12
    615e:	bd30      	pop	{r4, r5, pc}

00006160 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
    6160:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
    6162:	f7fe fae7 	bl	4734 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    6166:	bd08      	pop	{r3, pc}

00006168 <k_heap_init>:
{
    6168:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    616a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    616e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    6172:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
    6176:	f7ff bbaa 	b.w	58ce <sys_heap_init>

0000617a <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    617a:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

000073e0 <spm_firmware_info_nse-0xc00>:
	...

00007fe0 <spm_firmware_info_nse>:
    7fe0:	e97f e97f 	sg
    7fe4:	f7f9 bf5c 	b.w	1ea0 <__acle_se_spm_firmware_info_nse>

00007fe8 <spm_request_random_number_nse>:
    7fe8:	e97f e97f 	sg
    7fec:	f7fd bdff 	b.w	5bee <__acle_se_spm_request_random_number_nse>

00007ff0 <spm_request_read_nse>:
    7ff0:	e97f e97f 	sg
    7ff4:	f7f9 bef2 	b.w	1ddc <__acle_se_spm_request_read_nse>
	...
